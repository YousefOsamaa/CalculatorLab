
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000a58  00000aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  00000afc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001351  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ef  00000000  00000000  00001f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095a  00000000  00000000  00002984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  000032e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000661  00000000  00000000  00003484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a34  00000000  00000000  00003ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8e 01 	call	0x31c	; 0x31c <main>
  9e:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vid_ConvertFloatToInteger>:

    }
}

static void vid_ConvertFloatToInteger(f32* Copy_f32_DecimalDigits, u8 Copy_u8_FloatPrecision)
{
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
  b6:	16 2f       	mov	r17, r22
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
  b8:	89 2b       	or	r24, r25
  ba:	89 f4       	brne	.+34     	; 0xde <vid_ConvertFloatToInteger+0x38>
  bc:	28 c0       	rjmp	.+80     	; 0x10e <vid_ConvertFloatToInteger+0x68>
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
        {
            *Copy_f32_DecimalDigits *= 10;
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	40 e2       	ldi	r20, 0x20	; 32
  c4:	51 e4       	ldi	r21, 0x41	; 65
  c6:	c7 01       	movw	r24, r14
  c8:	b6 01       	movw	r22, r12
  ca:	0e 94 bd 04 	call	0x97a	; 0x97a <__mulsf3>
  ce:	68 83       	st	Y, r22
  d0:	79 83       	std	Y+1, r23	; 0x01
  d2:	8a 83       	std	Y+2, r24	; 0x02
  d4:	9b 83       	std	Y+3, r25	; 0x03

            
            Local_u32_CheckVariable = (u32)(*Copy_f32_DecimalDigits);
  d6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fixunssfsi>

            Copy_u8_FloatPrecision--;
  da:	11 50       	subi	r17, 0x01	; 1
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <vid_ConvertFloatToInteger+0x3e>
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	cb 01       	movw	r24, r22
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
  e4:	c8 80       	ld	r12, Y
  e6:	d9 80       	ldd	r13, Y+1	; 0x01
  e8:	ea 80       	ldd	r14, Y+2	; 0x02
  ea:	fb 80       	ldd	r15, Y+3	; 0x03
  ec:	0e 94 0b 04 	call	0x816	; 0x816 <__floatunsisf>
  f0:	9b 01       	movw	r18, r22
  f2:	ac 01       	movw	r20, r24
  f4:	c7 01       	movw	r24, r14
  f6:	b6 01       	movw	r22, r12
  f8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__subsf3>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	a9 01       	movw	r20, r18
 102:	0e 94 65 03 	call	0x6ca	; 0x6ca <__cmpsf2>
 106:	81 11       	cpse	r24, r1
 108:	da cf       	rjmp	.-76     	; 0xbe <vid_ConvertFloatToInteger+0x18>
 10a:	11 23       	and	r17, r17
 10c:	c1 f2       	breq	.-80     	; 0xbe <vid_ConvertFloatToInteger+0x18>
            *Copy_f32_DecimalDigits++;
        }

    }
    
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	df 90       	pop	r13
 11a:	cf 90       	pop	r12
 11c:	08 95       	ret

0000011e <CalculatorInitialzie>:
static void vid_ConvertFloatToInteger(f32* Copy_f32_DecimalDigits, u8 Copy_u8_FloatPrecision);


void CalculatorInitialzie(void)
{
    LCD_Init();
 11e:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_Init>
 122:	08 95       	ret

00000124 <Calculator>:
}

void Calculator(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <Calculator+0x6>
 12a:	00 d0       	rcall	.+0      	; 0x12c <Calculator+0x8>
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
    State_t CurrentState = CALCULATOR_FIRST_DIGIT;
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	01 c0       	rjmp	.+2      	; 0x136 <Calculator+0x12>
                        break;
                    }
 
                }

                CurrentState = CALCULATOR_CLEAR_RESULT;
 134:	15 e0       	ldi	r17, 0x05	; 5
    u8 Operation;

    while (1)
    {

        switch (CurrentState)
 136:	12 30       	cpi	r17, 0x02	; 2
 138:	a1 f1       	breq	.+104    	; 0x1a2 <Calculator+0x7e>
 13a:	28 f4       	brcc	.+10     	; 0x146 <Calculator+0x22>
 13c:	11 23       	and	r17, r17
 13e:	59 f0       	breq	.+22     	; 0x156 <Calculator+0x32>
 140:	11 30       	cpi	r17, 0x01	; 1
 142:	d1 f0       	breq	.+52     	; 0x178 <Calculator+0x54>
 144:	f8 cf       	rjmp	.-16     	; 0x136 <Calculator+0x12>
 146:	14 30       	cpi	r17, 0x04	; 4
 148:	09 f4       	brne	.+2      	; 0x14c <Calculator+0x28>
 14a:	4b c0       	rjmp	.+150    	; 0x1e2 <Calculator+0xbe>
 14c:	d8 f1       	brcs	.+118    	; 0x1c4 <Calculator+0xa0>
 14e:	15 30       	cpi	r17, 0x05	; 5
 150:	09 f4       	brne	.+2      	; 0x154 <Calculator+0x30>
 152:	db c0       	rjmp	.+438    	; 0x30a <Calculator+0x1e6>
 154:	f0 cf       	rjmp	.-32     	; 0x136 <Calculator+0x12>
        {
            case CALCULATOR_FIRST_DIGIT:
            {

                KeyPressed = keypad_scan();
 156:	0e 94 95 01 	call	0x32a	; 0x32a <keypad_scan>
 15a:	e8 2e       	mov	r14, r24

                if ( (KeyPressed >= '0' ) && (KeyPressed <= '9') )
 15c:	00 ed       	ldi	r16, 0xD0	; 208
 15e:	08 0f       	add	r16, r24
 160:	0a 30       	cpi	r16, 0x0A	; 10
 162:	48 f7       	brcc	.-46     	; 0x136 <Calculator+0x12>
                {
                    FirstDigit = KeyPressed - 48;

                    LCD_GoToXY(0,0);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_GoToXY>

                    LCD_PutChar(KeyPressed);
 16c:	8e 2d       	mov	r24, r14
 16e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>

                KeyPressed = keypad_scan();

                if ( (KeyPressed >= '0' ) && (KeyPressed <= '9') )
                {
                    FirstDigit = KeyPressed - 48;
 172:	c0 2e       	mov	r12, r16

                    LCD_GoToXY(0,0);

                    LCD_PutChar(KeyPressed);

                    CurrentState = CALCULATOR_OPERATION;
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	df cf       	rjmp	.-66     	; 0x136 <Calculator+0x12>
                break;
            }            

            case CALCULATOR_OPERATION:
            {
                KeyPressed = keypad_scan();
 178:	0e 94 95 01 	call	0x32a	; 0x32a <keypad_scan>
 17c:	08 2f       	mov	r16, r24

                if ( (KeyPressed == '+' ) || (KeyPressed == '-' ) || (KeyPressed == 'x' ) || (KeyPressed == '/' )  )
 17e:	8b 32       	cpi	r24, 0x2B	; 43
 180:	31 f0       	breq	.+12     	; 0x18e <Calculator+0x6a>
 182:	8d 32       	cpi	r24, 0x2D	; 45
 184:	21 f0       	breq	.+8      	; 0x18e <Calculator+0x6a>
 186:	88 37       	cpi	r24, 0x78	; 120
 188:	11 f0       	breq	.+4      	; 0x18e <Calculator+0x6a>
 18a:	8f 32       	cpi	r24, 0x2F	; 47
 18c:	a1 f6       	brne	.-88     	; 0x136 <Calculator+0x12>
                {
                    Operation = KeyPressed;

                    LCD_GoToXY(0,2);
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_GoToXY>

                    LCD_PutChar(KeyPressed);
 196:	80 2f       	mov	r24, r16
 198:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>
            {
                KeyPressed = keypad_scan();

                if ( (KeyPressed == '+' ) || (KeyPressed == '-' ) || (KeyPressed == 'x' ) || (KeyPressed == '/' )  )
                {
                    Operation = KeyPressed;
 19c:	f0 2e       	mov	r15, r16

                    LCD_GoToXY(0,2);

                    LCD_PutChar(KeyPressed);

                    CurrentState = CALCULATOR_SECOND_DIGIT;
 19e:	12 e0       	ldi	r17, 0x02	; 2
 1a0:	ca cf       	rjmp	.-108    	; 0x136 <Calculator+0x12>
                break;
            }

            case CALCULATOR_SECOND_DIGIT:
            {
                KeyPressed = keypad_scan();
 1a2:	0e 94 95 01 	call	0x32a	; 0x32a <keypad_scan>
 1a6:	e8 2e       	mov	r14, r24

                if ( (KeyPressed >= '0' ) && (KeyPressed <= '9') )
 1a8:	00 ed       	ldi	r16, 0xD0	; 208
 1aa:	08 0f       	add	r16, r24
 1ac:	0a 30       	cpi	r16, 0x0A	; 10
 1ae:	18 f6       	brcc	.-122    	; 0x136 <Calculator+0x12>
                {
                    SecondDigit = KeyPressed - 48;

                    LCD_GoToXY(0,4);
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_GoToXY>

                    LCD_PutChar(KeyPressed);
 1b8:	8e 2d       	mov	r24, r14
 1ba:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>
            {
                KeyPressed = keypad_scan();

                if ( (KeyPressed >= '0' ) && (KeyPressed <= '9') )
                {
                    SecondDigit = KeyPressed - 48;
 1be:	d0 2e       	mov	r13, r16

                    LCD_GoToXY(0,4);

                    LCD_PutChar(KeyPressed);

                    CurrentState = CALCULATOR_EQUAL_OPERATOR;
 1c0:	13 e0       	ldi	r17, 0x03	; 3
 1c2:	b9 cf       	rjmp	.-142    	; 0x136 <Calculator+0x12>
                break;
            }

            case CALCULATOR_EQUAL_OPERATOR:
            {
                KeyPressed = keypad_scan();
 1c4:	0e 94 95 01 	call	0x32a	; 0x32a <keypad_scan>
 1c8:	08 2f       	mov	r16, r24

                if ( KeyPressed == '=' )
 1ca:	8d 33       	cpi	r24, 0x3D	; 61
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <Calculator+0xac>
 1ce:	b3 cf       	rjmp	.-154    	; 0x136 <Calculator+0x12>
                {

                    LCD_GoToXY(0,6);
 1d0:	66 e0       	ldi	r22, 0x06	; 6
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_GoToXY>

                    LCD_PutChar(KeyPressed);
 1d8:	80 2f       	mov	r24, r16
 1da:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>

                    CurrentState = CALCULATOR_RESULT;
 1de:	14 e0       	ldi	r17, 0x04	; 4
 1e0:	aa cf       	rjmp	.-172    	; 0x136 <Calculator+0x12>
        
            case CALCULATOR_RESULT:
            {
                u8 Result;

                switch (Operation)
 1e2:	8d e2       	ldi	r24, 0x2D	; 45
 1e4:	f8 16       	cp	r15, r24
 1e6:	c1 f0       	breq	.+48     	; 0x218 <Calculator+0xf4>
 1e8:	8f 15       	cp	r24, r15
 1ea:	20 f0       	brcs	.+8      	; 0x1f4 <Calculator+0xd0>
 1ec:	8b e2       	ldi	r24, 0x2B	; 43
 1ee:	f8 16       	cp	r15, r24
 1f0:	41 f0       	breq	.+16     	; 0x202 <Calculator+0xde>
 1f2:	a0 cf       	rjmp	.-192    	; 0x134 <Calculator+0x10>
 1f4:	8f e2       	ldi	r24, 0x2F	; 47
 1f6:	f8 16       	cp	r15, r24
 1f8:	39 f1       	breq	.+78     	; 0x248 <Calculator+0x124>
 1fa:	88 e7       	ldi	r24, 0x78	; 120
 1fc:	f8 16       	cp	r15, r24
 1fe:	b9 f0       	breq	.+46     	; 0x22e <Calculator+0x10a>
 200:	99 cf       	rjmp	.-206    	; 0x134 <Calculator+0x10>
                {
                    case '+':
                    {
                        Result = FirstDigit + SecondDigit;

                        LCD_GoToXY(0, 8);
 202:	68 e0       	ldi	r22, 0x08	; 8
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_GoToXY>

                        LCD_PutChar(Result + 48);
 20a:	8c 2d       	mov	r24, r12
 20c:	8d 0d       	add	r24, r13
 20e:	80 5d       	subi	r24, 0xD0	; 208
 210:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>
                        break;
                    }
 
                }

                CurrentState = CALCULATOR_CLEAR_RESULT;
 214:	15 e0       	ldi	r17, 0x05	; 5

                        LCD_GoToXY(0, 8);

                        LCD_PutChar(Result + 48);

                        break;
 216:	8f cf       	rjmp	.-226    	; 0x136 <Calculator+0x12>
                    case '-':
                    {

                        Result = FirstDigit - SecondDigit;

                        LCD_GoToXY(0, 8);
 218:	68 e0       	ldi	r22, 0x08	; 8
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_GoToXY>

                        LCD_PutChar(Result + 48);
 220:	8c 2d       	mov	r24, r12
 222:	8d 19       	sub	r24, r13
 224:	80 5d       	subi	r24, 0xD0	; 208
 226:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>
                        break;
                    }
 
                }

                CurrentState = CALCULATOR_CLEAR_RESULT;
 22a:	15 e0       	ldi	r17, 0x05	; 5

                        LCD_GoToXY(0, 8);

                        LCD_PutChar(Result + 48);

                        break;
 22c:	84 cf       	rjmp	.-248    	; 0x136 <Calculator+0x12>
                    }

                    case 'x':
                    {

                        Result = FirstDigit * SecondDigit;
 22e:	cd 9c       	mul	r12, r13
 230:	10 2d       	mov	r17, r0
 232:	11 24       	eor	r1, r1

                        LCD_GoToXY(0, 8);
 234:	68 e0       	ldi	r22, 0x08	; 8
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_GoToXY>

                        LCD_PutChar(Result + 48);
 23c:	81 2f       	mov	r24, r17
 23e:	80 5d       	subi	r24, 0xD0	; 208
 240:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>
                        break;
                    }
 
                }

                CurrentState = CALCULATOR_CLEAR_RESULT;
 244:	15 e0       	ldi	r17, 0x05	; 5

                        LCD_GoToXY(0, 8);

                        LCD_PutChar(Result + 48);

                        break;
 246:	77 cf       	rjmp	.-274    	; 0x136 <Calculator+0x12>
                    }

                    case '/':
                    {
                        f32 FloatResultPart = (f32)FirstDigit / SecondDigit;
 248:	6c 2d       	mov	r22, r12
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 0b 04 	call	0x816	; 0x816 <__floatunsisf>
 254:	4b 01       	movw	r8, r22
 256:	5c 01       	movw	r10, r24
 258:	6d 2d       	mov	r22, r13
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 0d 04 	call	0x81a	; 0x81a <__floatsisf>
 264:	9b 01       	movw	r18, r22
 266:	ac 01       	movw	r20, r24
 268:	c5 01       	movw	r24, r10
 26a:	b4 01       	movw	r22, r8
 26c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__divsf3>
 270:	4b 01       	movw	r8, r22
 272:	5c 01       	movw	r10, r24

                        u8 IntegerResultPart = FloatResultPart;
 274:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fixunssfsi>
 278:	16 2f       	mov	r17, r22

                        FloatResultPart = FloatResultPart - IntegerResultPart;
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 0d 04 	call	0x81a	; 0x81a <__floatsisf>
 284:	9b 01       	movw	r18, r22
 286:	ac 01       	movw	r20, r24
 288:	c5 01       	movw	r24, r10
 28a:	b4 01       	movw	r22, r8
 28c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__subsf3>
 290:	69 83       	std	Y+1, r22	; 0x01
 292:	7a 83       	std	Y+2, r23	; 0x02
 294:	8b 83       	std	Y+3, r24	; 0x03
 296:	9c 83       	std	Y+4, r25	; 0x04

                        vid_ConvertFloatToInteger(&FloatResultPart, 2);
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	ce 01       	movw	r24, r28
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	0e 94 53 00 	call	0xa6	; 0xa6 <vid_ConvertFloatToInteger>



                        LCD_GoToXY(0, 8);
 2a2:	68 e0       	ldi	r22, 0x08	; 8
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_GoToXY>

                        LCD_PutChar(IntegerResultPart + 48);
 2aa:	80 e3       	ldi	r24, 0x30	; 48
 2ac:	81 0f       	add	r24, r17
 2ae:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>

                        if(FloatResultPart != 0)
 2b2:	69 81       	ldd	r22, Y+1	; 0x01
 2b4:	7a 81       	ldd	r23, Y+2	; 0x02
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	a9 01       	movw	r20, r18
 2c0:	0e 94 65 03 	call	0x6ca	; 0x6ca <__cmpsf2>
 2c4:	88 23       	and	r24, r24
 2c6:	f9 f0       	breq	.+62     	; 0x306 <Calculator+0x1e2>
                        {
                            LCD_PutChar('.');
 2c8:	8e e2       	ldi	r24, 0x2E	; 46
 2ca:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>

                            //Using IntegerResultPart for safety
                            IntegerResultPart = FloatResultPart;
 2ce:	69 81       	ldd	r22, Y+1	; 0x01
 2d0:	7a 81       	ldd	r23, Y+2	; 0x02
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	9c 81       	ldd	r25, Y+4	; 0x04
 2d6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fixunssfsi>
                            
                            while (IntegerResultPart)
 2da:	13 c0       	rjmp	.+38     	; 0x302 <Calculator+0x1de>
                            {
                                LCD_PutChar((IntegerResultPart % 10) + 48);
 2dc:	1d ec       	ldi	r17, 0xCD	; 205
 2de:	61 9f       	mul	r22, r17
 2e0:	11 2d       	mov	r17, r1
 2e2:	11 24       	eor	r1, r1
 2e4:	16 95       	lsr	r17
 2e6:	16 95       	lsr	r17
 2e8:	16 95       	lsr	r17
 2ea:	21 2f       	mov	r18, r17
 2ec:	22 0f       	add	r18, r18
 2ee:	92 2f       	mov	r25, r18
 2f0:	99 0f       	add	r25, r25
 2f2:	99 0f       	add	r25, r25
 2f4:	92 0f       	add	r25, r18
 2f6:	86 2f       	mov	r24, r22
 2f8:	89 1b       	sub	r24, r25
 2fa:	80 5d       	subi	r24, 0xD0	; 208
 2fc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <LCD_PutChar>

                                IntegerResultPart /= 10;
 300:	61 2f       	mov	r22, r17
                            LCD_PutChar('.');

                            //Using IntegerResultPart for safety
                            IntegerResultPart = FloatResultPart;
                            
                            while (IntegerResultPart)
 302:	61 11       	cpse	r22, r1
 304:	eb cf       	rjmp	.-42     	; 0x2dc <Calculator+0x1b8>
                        break;
                    }
 
                }

                CurrentState = CALCULATOR_CLEAR_RESULT;
 306:	15 e0       	ldi	r17, 0x05	; 5
 308:	16 cf       	rjmp	.-468    	; 0x136 <Calculator+0x12>
            }
        
            case CALCULATOR_CLEAR_RESULT:
            {

                KeyPressed = keypad_scan();
 30a:	0e 94 95 01 	call	0x32a	; 0x32a <keypad_scan>

                if ( KeyPressed == '*' )
 30e:	8a 32       	cpi	r24, 0x2A	; 42
 310:	09 f0       	breq	.+2      	; 0x314 <Calculator+0x1f0>
 312:	11 cf       	rjmp	.-478    	; 0x136 <Calculator+0x12>
                {

                    LCD_Clear();
 314:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <LCD_Clear>

                    CurrentState = CALCULATOR_FIRST_DIGIT;
 318:	10 e0       	ldi	r17, 0x00	; 0
 31a:	0d cf       	rjmp	.-486    	; 0x136 <Calculator+0x12>

0000031c <main>:
#define F_CPU 16000000UL

int main(void)
{
	
	CalculatorInitialzie();
 31c:	0e 94 8f 00 	call	0x11e	; 0x11e <CalculatorInitialzie>

	Calculator();
 320:	0e 94 92 00 	call	0x124	; 0x124 <Calculator>
	
}
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	08 95       	ret

0000032a <keypad_scan>:
	{'*','0','=','/'},
};

char keypad_scan()
{
	INPUT_PORT_DIRECTION &=~0xFF;//rows as inputs
 32a:	87 b1       	in	r24, 0x07	; 7
 32c:	17 b8       	out	0x07, r1	; 7
	OUTPUT_PORT_DIRECTION &=~0xFF;//columns
 32e:	84 b1       	in	r24, 0x04	; 4
 330:	14 b8       	out	0x04, r1	; 4

	//Activating Pull up resistor for PORTC 0:3
	INPUR_PORT|=0xFF;
 332:	88 b1       	in	r24, 0x08	; 8
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	88 b9       	out	0x08, r24	; 8
	
	for(int i=0; i<4; i++)
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	b1 c0       	rjmp	.+354    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
	{
		OUTPUT_PORT_DIRECTION |= (1 << i);
 33e:	24 b1       	in	r18, 0x04	; 4
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	04 2e       	mov	r0, r20
 346:	02 c0       	rjmp	.+4      	; 0x34c <keypad_scan+0x22>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <keypad_scan+0x1e>
 350:	92 2f       	mov	r25, r18
 352:	98 2b       	or	r25, r24
 354:	94 b9       	out	0x04, r25	; 4
		OUTPUT_PORT &= ~(1<<i); // Moves on the columns and puts 0 according to the turn
 356:	95 b1       	in	r25, 0x05	; 5
 358:	80 95       	com	r24
 35a:	89 23       	and	r24, r25
 35c:	85 b9       	out	0x05, r24	; 5
		
		for(int j=0; j<4; j++)
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	96 c0       	rjmp	.+300    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		{
			if( (INPUT_PIN & (1 << j)) == 0) // checks if input from rows is also 0 (Active Low)
 364:	86 b1       	in	r24, 0x06	; 6
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 2e       	mov	r0, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <keypad_scan+0x46>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <keypad_scan+0x42>
 374:	80 fd       	sbrc	r24, 0
 376:	8a c0       	rjmp	.+276    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>

static inline void debounce(int Row){
	
	static int count = 0;
	static int button_state = 0;
	int current_state = (~INPUT_PIN & (1<<Row)) != 0;
 378:	86 b1       	in	r24, 0x06	; 6
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	80 95       	com	r24
 37e:	90 95       	com	r25
 380:	02 2e       	mov	r0, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <keypad_scan+0x5e>
 384:	95 95       	asr	r25
 386:	87 95       	ror	r24
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <keypad_scan+0x5a>
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	fc 01       	movw	r30, r24
 390:	e1 70       	andi	r30, 0x01	; 1
 392:	ff 27       	eor	r31, r31
 394:	80 ff       	sbrs	r24, 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	86 2f       	mov	r24, r22
 39a:	90 e0       	ldi	r25, 0x00	; 0
	
	if (current_state != button_state)
 39c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <button_state.1734>
 3a0:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <button_state.1734+0x1>
 3a4:	86 17       	cp	r24, r22
 3a6:	97 07       	cpc	r25, r23
 3a8:	f9 f0       	breq	.+62     	; 0x3e8 <keypad_scan+0xbe>
	{        
		 count++;
 3aa:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 3ae:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 3b2:	6f 5f       	subi	r22, 0xFF	; 255
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
 3ba:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
		 
		if (count >= 4) {
 3be:	64 30       	cpi	r22, 0x04	; 4
 3c0:	71 05       	cpc	r23, r1
 3c2:	0c f4       	brge	.+2      	; 0x3c6 <keypad_scan+0x9c>
 3c4:	51 c0       	rjmp	.+162    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
			
			button_state = current_state;
 3c6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <button_state.1734+0x1>
 3ca:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <button_state.1734>
			if (current_state != 0) button = 1;
 3ce:	ef 2b       	or	r30, r31
 3d0:	31 f0       	breq	.+12     	; 0x3de <keypad_scan+0xb4>
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <button+0x1>
 3da:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <button>
			count = 0;
 3de:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 3e2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 3e6:	40 c0       	rjmp	.+128    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		}
	}
	else count = 0;
 3e8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 3ec:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 3f0:	3b c0       	rjmp	.+118    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>

static inline void debounce(int Row){
	
	static int count = 0;
	static int button_state = 0;
	int current_state = (~INPUT_PIN & (1<<Row)) != 0;
 3f2:	86 b1       	in	r24, 0x06	; 6
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	80 95       	com	r24
 3f8:	90 95       	com	r25
 3fa:	02 2e       	mov	r0, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	95 95       	asr	r25
 400:	87 95       	ror	r24
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <keypad_scan+0xd4>
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	fc 01       	movw	r30, r24
 40a:	e1 70       	andi	r30, 0x01	; 1
 40c:	ff 27       	eor	r31, r31
 40e:	80 ff       	sbrs	r24, 0
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	86 2f       	mov	r24, r22
 414:	90 e0       	ldi	r25, 0x00	; 0
	
	if (current_state != button_state)
 416:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <button_state.1734>
 41a:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <button_state.1734+0x1>
 41e:	86 17       	cp	r24, r22
 420:	97 07       	cpc	r25, r23
 422:	f1 f0       	breq	.+60     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
	{        
		 count++;
 424:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 428:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
 434:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
		 
		if (count >= 4) {
 438:	64 30       	cpi	r22, 0x04	; 4
 43a:	71 05       	cpc	r23, r1
 43c:	ac f0       	brlt	.+42     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
			
			button_state = current_state;
 43e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <button_state.1734+0x1>
 442:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <button_state.1734>
			if (current_state != 0) button = 1;
 446:	ef 2b       	or	r30, r31
 448:	31 f0       	breq	.+12     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <button+0x1>
 452:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <button>
			count = 0;
 456:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 45a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 45e:	04 c0       	rjmp	.+8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		}
	}
	else count = 0;
 460:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 464:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			{
				debounce(j);
				
				while(button == 0) debounce(j); //handling long press on key in the function
 468:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <button>
 46c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <button+0x1>
 470:	89 2b       	or	r24, r25
 472:	09 f4       	brne	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 474:	be cf       	rjmp	.-132    	; 0x3f2 <keypad_scan+0xc8>
				
				return key[j][i];
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	22 0f       	add	r18, r18
 47c:	33 1f       	adc	r19, r19
 47e:	20 50       	subi	r18, 0x00	; 0
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	f9 01       	movw	r30, r18
 484:	e4 0f       	add	r30, r20
 486:	f5 1f       	adc	r31, r21
 488:	80 81       	ld	r24, Z
 48a:	08 95       	ret
	for(int i=0; i<4; i++)
	{
		OUTPUT_PORT_DIRECTION |= (1 << i);
		OUTPUT_PORT &= ~(1<<i); // Moves on the columns and puts 0 according to the turn
		
		for(int j=0; j<4; j++)
 48c:	2f 5f       	subi	r18, 0xFF	; 255
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	24 30       	cpi	r18, 0x04	; 4
 492:	31 05       	cpc	r19, r1
 494:	0c f4       	brge	.+2      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 496:	66 cf       	rjmp	.-308    	; 0x364 <keypad_scan+0x3a>
				return key[j][i];
			}
			
		}
		
		OUTPUT_PORT_DIRECTION &= ~0xFF; // Resets all port output to 1
 498:	84 b1       	in	r24, 0x04	; 4
 49a:	14 b8       	out	0x04, r1	; 4
	OUTPUT_PORT_DIRECTION &=~0xFF;//columns

	//Activating Pull up resistor for PORTC 0:3
	INPUR_PORT|=0xFF;
	
	for(int i=0; i<4; i++)
 49c:	4f 5f       	subi	r20, 0xFF	; 255
 49e:	5f 4f       	sbci	r21, 0xFF	; 255
 4a0:	44 30       	cpi	r20, 0x04	; 4
 4a2:	51 05       	cpc	r21, r1
 4a4:	0c f4       	brge	.+2      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a6:	4b cf       	rjmp	.-362    	; 0x33e <keypad_scan+0x14>
		
		OUTPUT_PORT_DIRECTION &= ~0xFF; // Resets all port output to 1
		
	}
	
	return KEYPAD_DEFAULT_VALUE; // clear the buffer key press to avoid condition mishandling 
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	08 95       	ret

000004ac <lcd_reset>:
char columnCount;
char lastPOSx;

void lcd_reset()
{
	    lcd_port_dir=0XFF;
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	8a b9       	out	0x0a, r24	; 10
        lcd_port = 0xFF;
 4b0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b2:	2f ef       	ldi	r18, 0xFF	; 255
 4b4:	89 ef       	ldi	r24, 0xF9	; 249
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	21 50       	subi	r18, 0x01	; 1
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	90 40       	sbci	r25, 0x00	; 0
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <lcd_reset+0xc>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <lcd_reset+0x16>
 4c2:	00 00       	nop
        _delay_ms(20);
        lcd_port = 0x03+LCD_EN;
 4c4:	93 e8       	ldi	r25, 0x83	; 131
 4c6:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
 4c8:	83 e0       	ldi	r24, 0x03	; 3
 4ca:	8b b9       	out	0x0b, r24	; 11
 4cc:	ef e3       	ldi	r30, 0x3F	; 63
 4ce:	fc e9       	ldi	r31, 0x9C	; 156
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <lcd_reset+0x24>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <lcd_reset+0x2a>
 4d6:	00 00       	nop
        _delay_ms(10);
        lcd_port = 0x03+LCD_EN;
 4d8:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
 4da:	8b b9       	out	0x0b, r24	; 11
 4dc:	ef e9       	ldi	r30, 0x9F	; 159
 4de:	ff e0       	ldi	r31, 0x0F	; 15
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <lcd_reset+0x34>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <lcd_reset+0x3a>
 4e6:	00 00       	nop
        _delay_ms(1);
        lcd_port = 0x03+LCD_EN;
 4e8:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
 4ea:	8b b9       	out	0x0b, r24	; 11
 4ec:	8f e9       	ldi	r24, 0x9F	; 159
 4ee:	9f e0       	ldi	r25, 0x0F	; 15
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <lcd_reset+0x44>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <lcd_reset+0x4a>
 4f6:	00 00       	nop
        _delay_ms(1);
        lcd_port = 0x02+LCD_EN;
 4f8:	82 e8       	ldi	r24, 0x82	; 130
 4fa:	8b b9       	out	0x0b, r24	; 11
        lcd_port = 0x02;
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	8b b9       	out	0x0b, r24	; 11
 500:	ef e9       	ldi	r30, 0x9F	; 159
 502:	ff e0       	ldi	r31, 0x0F	; 15
 504:	31 97       	sbiw	r30, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <lcd_reset+0x58>
 508:	00 c0       	rjmp	.+0      	; 0x50a <lcd_reset+0x5e>
 50a:	00 00       	nop
 50c:	08 95       	ret

0000050e <lcd_cmd>:
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 void lcd_cmd (char cmd)
{
        lcd_port = ((cmd >> 4) & 0x0F)|LCD_EN;
 50e:	98 2f       	mov	r25, r24
 510:	92 95       	swap	r25
 512:	9f 70       	andi	r25, 0x0F	; 15
 514:	29 2f       	mov	r18, r25
 516:	20 68       	ori	r18, 0x80	; 128
 518:	2b b9       	out	0x0b, r18	; 11
        lcd_port = ((cmd >> 4) & 0x0F);
 51a:	9b b9       	out	0x0b, r25	; 11

        lcd_port = (cmd & 0x0F)|LCD_EN;
 51c:	8f 70       	andi	r24, 0x0F	; 15
 51e:	98 2f       	mov	r25, r24
 520:	90 68       	ori	r25, 0x80	; 128
 522:	9b b9       	out	0x0b, r25	; 11
        lcd_port = (cmd & 0x0F);
 524:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 526:	8f e1       	ldi	r24, 0x1F	; 31
 528:	93 e0       	ldi	r25, 0x03	; 3
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <lcd_cmd+0x1c>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <lcd_cmd+0x22>
 530:	00 00       	nop
 532:	8f e1       	ldi	r24, 0x1F	; 31
 534:	93 e0       	ldi	r25, 0x03	; 3
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <lcd_cmd+0x28>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <lcd_cmd+0x2e>
 53c:	00 00       	nop
 53e:	08 95       	ret

00000540 <LCD_Init>:
        _delay_ms(1);
}

void LCD_Init(void)
{
	columnCount= 16;
 540:	80 e1       	ldi	r24, 0x10	; 16
 542:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <columnCount>
	lastPOSx=0;
 546:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <lastPOSx>
        lcd_reset();         // Call LCD reset
 54a:	0e 94 56 02 	call	0x4ac	; 0x4ac <lcd_reset>
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font. 
 54e:	88 e2       	ldi	r24, 0x28	; 40
 550:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_cmd>
        lcd_cmd(0x0c);       // Display no cursor - no blink.
 554:	8c e0       	ldi	r24, 0x0C	; 12
 556:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_cmd>
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_cmd>
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 560:	80 e8       	ldi	r24, 0x80	; 128
 562:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_cmd>
 566:	08 95       	ret

00000568 <lcd_data>:
}

//Print character
void lcd_data (unsigned char dat)
{
        lcd_port = (((dat >> 4) & 0x0F)|LCD_EN|LCD_RS);
 568:	98 2f       	mov	r25, r24
 56a:	92 95       	swap	r25
 56c:	9f 70       	andi	r25, 0x0F	; 15
 56e:	29 2f       	mov	r18, r25
 570:	20 6a       	ori	r18, 0xA0	; 160
 572:	2b b9       	out	0x0b, r18	; 11
        lcd_port = (((dat >> 4) & 0x0F)|LCD_RS);
 574:	90 62       	ori	r25, 0x20	; 32
 576:	9b b9       	out	0x0b, r25	; 11
       
        lcd_port = ((dat & 0x0F)|LCD_EN|LCD_RS);
 578:	8f 70       	andi	r24, 0x0F	; 15
 57a:	98 2f       	mov	r25, r24
 57c:	90 6a       	ori	r25, 0xA0	; 160
 57e:	9b b9       	out	0x0b, r25	; 11
        lcd_port = ((dat & 0x0F)|LCD_RS);
 580:	80 62       	ori	r24, 0x20	; 32
 582:	8b b9       	out	0x0b, r24	; 11
 584:	8f e1       	ldi	r24, 0x1F	; 31
 586:	93 e0       	ldi	r25, 0x03	; 3
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <lcd_data+0x20>
 58c:	00 c0       	rjmp	.+0      	; 0x58e <lcd_data+0x26>
 58e:	00 00       	nop
 590:	8f e1       	ldi	r24, 0x1F	; 31
 592:	93 e0       	ldi	r25, 0x03	; 3
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <lcd_data+0x2c>
 598:	00 c0       	rjmp	.+0      	; 0x59a <lcd_data+0x32>
 59a:	00 00       	nop
 59c:	08 95       	ret

0000059e <LCD_GoToXY>:
}

//Go to Location
void LCD_GoToXY(char posX,char posY)
{
    if (posX==0 ) 
 59e:	81 11       	cpse	r24, r1
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <LCD_GoToXY+0xe>
        lcd_cmd((1<<7)+0x00+posY);
 5a2:	80 e8       	ldi	r24, 0x80	; 128
 5a4:	86 0f       	add	r24, r22
 5a6:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_cmd>
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <LCD_GoToXY+0x1c>
    else
	{
        lcd_cmd((1<<7)+0x40+posY);
 5ac:	80 ec       	ldi	r24, 0xC0	; 192
 5ae:	86 0f       	add	r24, r22
 5b0:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_cmd>
	lastPOSx=1;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <lastPOSx>
 5ba:	85 ed       	ldi	r24, 0xD5	; 213
 5bc:	8a 95       	dec	r24
 5be:	f1 f7       	brne	.-4      	; 0x5bc <LCD_GoToXY+0x1e>
 5c0:	00 00       	nop
 5c2:	08 95       	ret

000005c4 <LCD_Clear>:
}

//Clears Page
void LCD_Clear(void)
{
	lcd_cmd(0x01);
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ca:	8f e3       	ldi	r24, 0x3F	; 63
 5cc:	9f e1       	ldi	r25, 0x1F	; 31
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <LCD_Clear+0xa>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <LCD_Clear+0x10>
 5d4:	00 00       	nop
	_delay_ms(2);
	lcd_cmd(0x02);
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_cmd>
 5dc:	8f e3       	ldi	r24, 0x3F	; 63
 5de:	9f e1       	ldi	r25, 0x1F	; 31
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <LCD_Clear+0x1c>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <LCD_Clear+0x22>
 5e6:	00 00       	nop
 5e8:	08 95       	ret

000005ea <LCD_PutChar>:
}

//Prints Char
void LCD_PutChar(unsigned char data)
{
	lcd_data(data);
 5ea:	0e 94 b4 02 	call	0x568	; 0x568 <lcd_data>
 5ee:	08 95       	ret

000005f0 <__subsf3>:
 5f0:	50 58       	subi	r21, 0x80	; 128

000005f2 <__addsf3>:
 5f2:	bb 27       	eor	r27, r27
 5f4:	aa 27       	eor	r26, r26
 5f6:	0e 94 10 03 	call	0x620	; 0x620 <__addsf3x>
 5fa:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_round>
 5fe:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_pscA>
 602:	38 f0       	brcs	.+14     	; 0x612 <__addsf3+0x20>
 604:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fp_pscB>
 608:	20 f0       	brcs	.+8      	; 0x612 <__addsf3+0x20>
 60a:	39 f4       	brne	.+14     	; 0x61a <__addsf3+0x28>
 60c:	9f 3f       	cpi	r25, 0xFF	; 255
 60e:	19 f4       	brne	.+6      	; 0x616 <__addsf3+0x24>
 610:	26 f4       	brtc	.+8      	; 0x61a <__addsf3+0x28>
 612:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_nan>
 616:	0e f4       	brtc	.+2      	; 0x61a <__addsf3+0x28>
 618:	e0 95       	com	r30
 61a:	e7 fb       	bst	r30, 7
 61c:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_inf>

00000620 <__addsf3x>:
 620:	e9 2f       	mov	r30, r25
 622:	0e 94 94 04 	call	0x928	; 0x928 <__fp_split3>
 626:	58 f3       	brcs	.-42     	; 0x5fe <__addsf3+0xc>
 628:	ba 17       	cp	r27, r26
 62a:	62 07       	cpc	r22, r18
 62c:	73 07       	cpc	r23, r19
 62e:	84 07       	cpc	r24, r20
 630:	95 07       	cpc	r25, r21
 632:	20 f0       	brcs	.+8      	; 0x63c <__addsf3x+0x1c>
 634:	79 f4       	brne	.+30     	; 0x654 <__addsf3x+0x34>
 636:	a6 f5       	brtc	.+104    	; 0x6a0 <__addsf3x+0x80>
 638:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_zero>
 63c:	0e f4       	brtc	.+2      	; 0x640 <__addsf3x+0x20>
 63e:	e0 95       	com	r30
 640:	0b 2e       	mov	r0, r27
 642:	ba 2f       	mov	r27, r26
 644:	a0 2d       	mov	r26, r0
 646:	0b 01       	movw	r0, r22
 648:	b9 01       	movw	r22, r18
 64a:	90 01       	movw	r18, r0
 64c:	0c 01       	movw	r0, r24
 64e:	ca 01       	movw	r24, r20
 650:	a0 01       	movw	r20, r0
 652:	11 24       	eor	r1, r1
 654:	ff 27       	eor	r31, r31
 656:	59 1b       	sub	r21, r25
 658:	99 f0       	breq	.+38     	; 0x680 <__addsf3x+0x60>
 65a:	59 3f       	cpi	r21, 0xF9	; 249
 65c:	50 f4       	brcc	.+20     	; 0x672 <__addsf3x+0x52>
 65e:	50 3e       	cpi	r21, 0xE0	; 224
 660:	68 f1       	brcs	.+90     	; 0x6bc <__addsf3x+0x9c>
 662:	1a 16       	cp	r1, r26
 664:	f0 40       	sbci	r31, 0x00	; 0
 666:	a2 2f       	mov	r26, r18
 668:	23 2f       	mov	r18, r19
 66a:	34 2f       	mov	r19, r20
 66c:	44 27       	eor	r20, r20
 66e:	58 5f       	subi	r21, 0xF8	; 248
 670:	f3 cf       	rjmp	.-26     	; 0x658 <__addsf3x+0x38>
 672:	46 95       	lsr	r20
 674:	37 95       	ror	r19
 676:	27 95       	ror	r18
 678:	a7 95       	ror	r26
 67a:	f0 40       	sbci	r31, 0x00	; 0
 67c:	53 95       	inc	r21
 67e:	c9 f7       	brne	.-14     	; 0x672 <__addsf3x+0x52>
 680:	7e f4       	brtc	.+30     	; 0x6a0 <__addsf3x+0x80>
 682:	1f 16       	cp	r1, r31
 684:	ba 0b       	sbc	r27, r26
 686:	62 0b       	sbc	r22, r18
 688:	73 0b       	sbc	r23, r19
 68a:	84 0b       	sbc	r24, r20
 68c:	ba f0       	brmi	.+46     	; 0x6bc <__addsf3x+0x9c>
 68e:	91 50       	subi	r25, 0x01	; 1
 690:	a1 f0       	breq	.+40     	; 0x6ba <__addsf3x+0x9a>
 692:	ff 0f       	add	r31, r31
 694:	bb 1f       	adc	r27, r27
 696:	66 1f       	adc	r22, r22
 698:	77 1f       	adc	r23, r23
 69a:	88 1f       	adc	r24, r24
 69c:	c2 f7       	brpl	.-16     	; 0x68e <__addsf3x+0x6e>
 69e:	0e c0       	rjmp	.+28     	; 0x6bc <__addsf3x+0x9c>
 6a0:	ba 0f       	add	r27, r26
 6a2:	62 1f       	adc	r22, r18
 6a4:	73 1f       	adc	r23, r19
 6a6:	84 1f       	adc	r24, r20
 6a8:	48 f4       	brcc	.+18     	; 0x6bc <__addsf3x+0x9c>
 6aa:	87 95       	ror	r24
 6ac:	77 95       	ror	r23
 6ae:	67 95       	ror	r22
 6b0:	b7 95       	ror	r27
 6b2:	f7 95       	ror	r31
 6b4:	9e 3f       	cpi	r25, 0xFE	; 254
 6b6:	08 f0       	brcs	.+2      	; 0x6ba <__addsf3x+0x9a>
 6b8:	b0 cf       	rjmp	.-160    	; 0x61a <__addsf3+0x28>
 6ba:	93 95       	inc	r25
 6bc:	88 0f       	add	r24, r24
 6be:	08 f0       	brcs	.+2      	; 0x6c2 <__addsf3x+0xa2>
 6c0:	99 27       	eor	r25, r25
 6c2:	ee 0f       	add	r30, r30
 6c4:	97 95       	ror	r25
 6c6:	87 95       	ror	r24
 6c8:	08 95       	ret

000006ca <__cmpsf2>:
 6ca:	0e 94 48 04 	call	0x890	; 0x890 <__fp_cmp>
 6ce:	08 f4       	brcc	.+2      	; 0x6d2 <__cmpsf2+0x8>
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	08 95       	ret

000006d4 <__divsf3>:
 6d4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__divsf3x>
 6d8:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_round>
 6dc:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fp_pscB>
 6e0:	58 f0       	brcs	.+22     	; 0x6f8 <__divsf3+0x24>
 6e2:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_pscA>
 6e6:	40 f0       	brcs	.+16     	; 0x6f8 <__divsf3+0x24>
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <__divsf3+0x20>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	29 f0       	breq	.+10     	; 0x6f8 <__divsf3+0x24>
 6ee:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_inf>
 6f2:	51 11       	cpse	r21, r1
 6f4:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_szero>
 6f8:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_nan>

000006fc <__divsf3x>:
 6fc:	0e 94 94 04 	call	0x928	; 0x928 <__fp_split3>
 700:	68 f3       	brcs	.-38     	; 0x6dc <__divsf3+0x8>

00000702 <__divsf3_pse>:
 702:	99 23       	and	r25, r25
 704:	b1 f3       	breq	.-20     	; 0x6f2 <__divsf3+0x1e>
 706:	55 23       	and	r21, r21
 708:	91 f3       	breq	.-28     	; 0x6ee <__divsf3+0x1a>
 70a:	95 1b       	sub	r25, r21
 70c:	55 0b       	sbc	r21, r21
 70e:	bb 27       	eor	r27, r27
 710:	aa 27       	eor	r26, r26
 712:	62 17       	cp	r22, r18
 714:	73 07       	cpc	r23, r19
 716:	84 07       	cpc	r24, r20
 718:	38 f0       	brcs	.+14     	; 0x728 <__divsf3_pse+0x26>
 71a:	9f 5f       	subi	r25, 0xFF	; 255
 71c:	5f 4f       	sbci	r21, 0xFF	; 255
 71e:	22 0f       	add	r18, r18
 720:	33 1f       	adc	r19, r19
 722:	44 1f       	adc	r20, r20
 724:	aa 1f       	adc	r26, r26
 726:	a9 f3       	breq	.-22     	; 0x712 <__divsf3_pse+0x10>
 728:	35 d0       	rcall	.+106    	; 0x794 <__divsf3_pse+0x92>
 72a:	0e 2e       	mov	r0, r30
 72c:	3a f0       	brmi	.+14     	; 0x73c <__divsf3_pse+0x3a>
 72e:	e0 e8       	ldi	r30, 0x80	; 128
 730:	32 d0       	rcall	.+100    	; 0x796 <__divsf3_pse+0x94>
 732:	91 50       	subi	r25, 0x01	; 1
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	e6 95       	lsr	r30
 738:	00 1c       	adc	r0, r0
 73a:	ca f7       	brpl	.-14     	; 0x72e <__divsf3_pse+0x2c>
 73c:	2b d0       	rcall	.+86     	; 0x794 <__divsf3_pse+0x92>
 73e:	fe 2f       	mov	r31, r30
 740:	29 d0       	rcall	.+82     	; 0x794 <__divsf3_pse+0x92>
 742:	66 0f       	add	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	bb 1f       	adc	r27, r27
 74a:	26 17       	cp	r18, r22
 74c:	37 07       	cpc	r19, r23
 74e:	48 07       	cpc	r20, r24
 750:	ab 07       	cpc	r26, r27
 752:	b0 e8       	ldi	r27, 0x80	; 128
 754:	09 f0       	breq	.+2      	; 0x758 <__divsf3_pse+0x56>
 756:	bb 0b       	sbc	r27, r27
 758:	80 2d       	mov	r24, r0
 75a:	bf 01       	movw	r22, r30
 75c:	ff 27       	eor	r31, r31
 75e:	93 58       	subi	r25, 0x83	; 131
 760:	5f 4f       	sbci	r21, 0xFF	; 255
 762:	3a f0       	brmi	.+14     	; 0x772 <__divsf3_pse+0x70>
 764:	9e 3f       	cpi	r25, 0xFE	; 254
 766:	51 05       	cpc	r21, r1
 768:	78 f0       	brcs	.+30     	; 0x788 <__divsf3_pse+0x86>
 76a:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_inf>
 76e:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_szero>
 772:	5f 3f       	cpi	r21, 0xFF	; 255
 774:	e4 f3       	brlt	.-8      	; 0x76e <__divsf3_pse+0x6c>
 776:	98 3e       	cpi	r25, 0xE8	; 232
 778:	d4 f3       	brlt	.-12     	; 0x76e <__divsf3_pse+0x6c>
 77a:	86 95       	lsr	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b7 95       	ror	r27
 782:	f7 95       	ror	r31
 784:	9f 5f       	subi	r25, 0xFF	; 255
 786:	c9 f7       	brne	.-14     	; 0x77a <__divsf3_pse+0x78>
 788:	88 0f       	add	r24, r24
 78a:	91 1d       	adc	r25, r1
 78c:	96 95       	lsr	r25
 78e:	87 95       	ror	r24
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret
 794:	e1 e0       	ldi	r30, 0x01	; 1
 796:	66 0f       	add	r22, r22
 798:	77 1f       	adc	r23, r23
 79a:	88 1f       	adc	r24, r24
 79c:	bb 1f       	adc	r27, r27
 79e:	62 17       	cp	r22, r18
 7a0:	73 07       	cpc	r23, r19
 7a2:	84 07       	cpc	r24, r20
 7a4:	ba 07       	cpc	r27, r26
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <__divsf3_pse+0xae>
 7a8:	62 1b       	sub	r22, r18
 7aa:	73 0b       	sbc	r23, r19
 7ac:	84 0b       	sbc	r24, r20
 7ae:	ba 0b       	sbc	r27, r26
 7b0:	ee 1f       	adc	r30, r30
 7b2:	88 f7       	brcc	.-30     	; 0x796 <__divsf3_pse+0x94>
 7b4:	e0 95       	com	r30
 7b6:	08 95       	ret

000007b8 <__fixunssfsi>:
 7b8:	0e 94 9c 04 	call	0x938	; 0x938 <__fp_splitA>
 7bc:	88 f0       	brcs	.+34     	; 0x7e0 <__fixunssfsi+0x28>
 7be:	9f 57       	subi	r25, 0x7F	; 127
 7c0:	98 f0       	brcs	.+38     	; 0x7e8 <__fixunssfsi+0x30>
 7c2:	b9 2f       	mov	r27, r25
 7c4:	99 27       	eor	r25, r25
 7c6:	b7 51       	subi	r27, 0x17	; 23
 7c8:	b0 f0       	brcs	.+44     	; 0x7f6 <__fixunssfsi+0x3e>
 7ca:	e1 f0       	breq	.+56     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	1a f0       	brmi	.+6      	; 0x7dc <__fixunssfsi+0x24>
 7d6:	ba 95       	dec	r27
 7d8:	c9 f7       	brne	.-14     	; 0x7cc <__fixunssfsi+0x14>
 7da:	14 c0       	rjmp	.+40     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7dc:	b1 30       	cpi	r27, 0x01	; 1
 7de:	91 f0       	breq	.+36     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7e0:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_zero>
 7e4:	b1 e0       	ldi	r27, 0x01	; 1
 7e6:	08 95       	ret
 7e8:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__fp_zero>
 7ec:	67 2f       	mov	r22, r23
 7ee:	78 2f       	mov	r23, r24
 7f0:	88 27       	eor	r24, r24
 7f2:	b8 5f       	subi	r27, 0xF8	; 248
 7f4:	39 f0       	breq	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f6:	b9 3f       	cpi	r27, 0xF9	; 249
 7f8:	cc f3       	brlt	.-14     	; 0x7ec <__fixunssfsi+0x34>
 7fa:	86 95       	lsr	r24
 7fc:	77 95       	ror	r23
 7fe:	67 95       	ror	r22
 800:	b3 95       	inc	r27
 802:	d9 f7       	brne	.-10     	; 0x7fa <__fixunssfsi+0x42>
 804:	3e f4       	brtc	.+14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 806:	90 95       	com	r25
 808:	80 95       	com	r24
 80a:	70 95       	com	r23
 80c:	61 95       	neg	r22
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	08 95       	ret

00000816 <__floatunsisf>:
 816:	e8 94       	clt
 818:	09 c0       	rjmp	.+18     	; 0x82c <__floatsisf+0x12>

0000081a <__floatsisf>:
 81a:	97 fb       	bst	r25, 7
 81c:	3e f4       	brtc	.+14     	; 0x82c <__floatsisf+0x12>
 81e:	90 95       	com	r25
 820:	80 95       	com	r24
 822:	70 95       	com	r23
 824:	61 95       	neg	r22
 826:	7f 4f       	sbci	r23, 0xFF	; 255
 828:	8f 4f       	sbci	r24, 0xFF	; 255
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	99 23       	and	r25, r25
 82e:	a9 f0       	breq	.+42     	; 0x85a <__floatsisf+0x40>
 830:	f9 2f       	mov	r31, r25
 832:	96 e9       	ldi	r25, 0x96	; 150
 834:	bb 27       	eor	r27, r27
 836:	93 95       	inc	r25
 838:	f6 95       	lsr	r31
 83a:	87 95       	ror	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f1 11       	cpse	r31, r1
 844:	f8 cf       	rjmp	.-16     	; 0x836 <__floatsisf+0x1c>
 846:	fa f4       	brpl	.+62     	; 0x886 <__floatsisf+0x6c>
 848:	bb 0f       	add	r27, r27
 84a:	11 f4       	brne	.+4      	; 0x850 <__floatsisf+0x36>
 84c:	60 ff       	sbrs	r22, 0
 84e:	1b c0       	rjmp	.+54     	; 0x886 <__floatsisf+0x6c>
 850:	6f 5f       	subi	r22, 0xFF	; 255
 852:	7f 4f       	sbci	r23, 0xFF	; 255
 854:	8f 4f       	sbci	r24, 0xFF	; 255
 856:	9f 4f       	sbci	r25, 0xFF	; 255
 858:	16 c0       	rjmp	.+44     	; 0x886 <__floatsisf+0x6c>
 85a:	88 23       	and	r24, r24
 85c:	11 f0       	breq	.+4      	; 0x862 <__floatsisf+0x48>
 85e:	96 e9       	ldi	r25, 0x96	; 150
 860:	11 c0       	rjmp	.+34     	; 0x884 <__floatsisf+0x6a>
 862:	77 23       	and	r23, r23
 864:	21 f0       	breq	.+8      	; 0x86e <__floatsisf+0x54>
 866:	9e e8       	ldi	r25, 0x8E	; 142
 868:	87 2f       	mov	r24, r23
 86a:	76 2f       	mov	r23, r22
 86c:	05 c0       	rjmp	.+10     	; 0x878 <__floatsisf+0x5e>
 86e:	66 23       	and	r22, r22
 870:	71 f0       	breq	.+28     	; 0x88e <__floatsisf+0x74>
 872:	96 e8       	ldi	r25, 0x86	; 134
 874:	86 2f       	mov	r24, r22
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	2a f0       	brmi	.+10     	; 0x886 <__floatsisf+0x6c>
 87c:	9a 95       	dec	r25
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	da f7       	brpl	.-10     	; 0x87c <__floatsisf+0x62>
 886:	88 0f       	add	r24, r24
 888:	96 95       	lsr	r25
 88a:	87 95       	ror	r24
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret

00000890 <__fp_cmp>:
 890:	99 0f       	add	r25, r25
 892:	00 08       	sbc	r0, r0
 894:	55 0f       	add	r21, r21
 896:	aa 0b       	sbc	r26, r26
 898:	e0 e8       	ldi	r30, 0x80	; 128
 89a:	fe ef       	ldi	r31, 0xFE	; 254
 89c:	16 16       	cp	r1, r22
 89e:	17 06       	cpc	r1, r23
 8a0:	e8 07       	cpc	r30, r24
 8a2:	f9 07       	cpc	r31, r25
 8a4:	c0 f0       	brcs	.+48     	; 0x8d6 <__fp_cmp+0x46>
 8a6:	12 16       	cp	r1, r18
 8a8:	13 06       	cpc	r1, r19
 8aa:	e4 07       	cpc	r30, r20
 8ac:	f5 07       	cpc	r31, r21
 8ae:	98 f0       	brcs	.+38     	; 0x8d6 <__fp_cmp+0x46>
 8b0:	62 1b       	sub	r22, r18
 8b2:	73 0b       	sbc	r23, r19
 8b4:	84 0b       	sbc	r24, r20
 8b6:	95 0b       	sbc	r25, r21
 8b8:	39 f4       	brne	.+14     	; 0x8c8 <__fp_cmp+0x38>
 8ba:	0a 26       	eor	r0, r26
 8bc:	61 f0       	breq	.+24     	; 0x8d6 <__fp_cmp+0x46>
 8be:	23 2b       	or	r18, r19
 8c0:	24 2b       	or	r18, r20
 8c2:	25 2b       	or	r18, r21
 8c4:	21 f4       	brne	.+8      	; 0x8ce <__fp_cmp+0x3e>
 8c6:	08 95       	ret
 8c8:	0a 26       	eor	r0, r26
 8ca:	09 f4       	brne	.+2      	; 0x8ce <__fp_cmp+0x3e>
 8cc:	a1 40       	sbci	r26, 0x01	; 1
 8ce:	a6 95       	lsr	r26
 8d0:	8f ef       	ldi	r24, 0xFF	; 255
 8d2:	81 1d       	adc	r24, r1
 8d4:	81 1d       	adc	r24, r1
 8d6:	08 95       	ret

000008d8 <__fp_inf>:
 8d8:	97 f9       	bld	r25, 7
 8da:	9f 67       	ori	r25, 0x7F	; 127
 8dc:	80 e8       	ldi	r24, 0x80	; 128
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	08 95       	ret

000008e4 <__fp_nan>:
 8e4:	9f ef       	ldi	r25, 0xFF	; 255
 8e6:	80 ec       	ldi	r24, 0xC0	; 192
 8e8:	08 95       	ret

000008ea <__fp_pscA>:
 8ea:	00 24       	eor	r0, r0
 8ec:	0a 94       	dec	r0
 8ee:	16 16       	cp	r1, r22
 8f0:	17 06       	cpc	r1, r23
 8f2:	18 06       	cpc	r1, r24
 8f4:	09 06       	cpc	r0, r25
 8f6:	08 95       	ret

000008f8 <__fp_pscB>:
 8f8:	00 24       	eor	r0, r0
 8fa:	0a 94       	dec	r0
 8fc:	12 16       	cp	r1, r18
 8fe:	13 06       	cpc	r1, r19
 900:	14 06       	cpc	r1, r20
 902:	05 06       	cpc	r0, r21
 904:	08 95       	ret

00000906 <__fp_round>:
 906:	09 2e       	mov	r0, r25
 908:	03 94       	inc	r0
 90a:	00 0c       	add	r0, r0
 90c:	11 f4       	brne	.+4      	; 0x912 <__fp_round+0xc>
 90e:	88 23       	and	r24, r24
 910:	52 f0       	brmi	.+20     	; 0x926 <__fp_round+0x20>
 912:	bb 0f       	add	r27, r27
 914:	40 f4       	brcc	.+16     	; 0x926 <__fp_round+0x20>
 916:	bf 2b       	or	r27, r31
 918:	11 f4       	brne	.+4      	; 0x91e <__fp_round+0x18>
 91a:	60 ff       	sbrs	r22, 0
 91c:	04 c0       	rjmp	.+8      	; 0x926 <__fp_round+0x20>
 91e:	6f 5f       	subi	r22, 0xFF	; 255
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	8f 4f       	sbci	r24, 0xFF	; 255
 924:	9f 4f       	sbci	r25, 0xFF	; 255
 926:	08 95       	ret

00000928 <__fp_split3>:
 928:	57 fd       	sbrc	r21, 7
 92a:	90 58       	subi	r25, 0x80	; 128
 92c:	44 0f       	add	r20, r20
 92e:	55 1f       	adc	r21, r21
 930:	59 f0       	breq	.+22     	; 0x948 <__fp_splitA+0x10>
 932:	5f 3f       	cpi	r21, 0xFF	; 255
 934:	71 f0       	breq	.+28     	; 0x952 <__fp_splitA+0x1a>
 936:	47 95       	ror	r20

00000938 <__fp_splitA>:
 938:	88 0f       	add	r24, r24
 93a:	97 fb       	bst	r25, 7
 93c:	99 1f       	adc	r25, r25
 93e:	61 f0       	breq	.+24     	; 0x958 <__fp_splitA+0x20>
 940:	9f 3f       	cpi	r25, 0xFF	; 255
 942:	79 f0       	breq	.+30     	; 0x962 <__fp_splitA+0x2a>
 944:	87 95       	ror	r24
 946:	08 95       	ret
 948:	12 16       	cp	r1, r18
 94a:	13 06       	cpc	r1, r19
 94c:	14 06       	cpc	r1, r20
 94e:	55 1f       	adc	r21, r21
 950:	f2 cf       	rjmp	.-28     	; 0x936 <__fp_split3+0xe>
 952:	46 95       	lsr	r20
 954:	f1 df       	rcall	.-30     	; 0x938 <__fp_splitA>
 956:	08 c0       	rjmp	.+16     	; 0x968 <__fp_splitA+0x30>
 958:	16 16       	cp	r1, r22
 95a:	17 06       	cpc	r1, r23
 95c:	18 06       	cpc	r1, r24
 95e:	99 1f       	adc	r25, r25
 960:	f1 cf       	rjmp	.-30     	; 0x944 <__fp_splitA+0xc>
 962:	86 95       	lsr	r24
 964:	71 05       	cpc	r23, r1
 966:	61 05       	cpc	r22, r1
 968:	08 94       	sec
 96a:	08 95       	ret

0000096c <__fp_zero>:
 96c:	e8 94       	clt

0000096e <__fp_szero>:
 96e:	bb 27       	eor	r27, r27
 970:	66 27       	eor	r22, r22
 972:	77 27       	eor	r23, r23
 974:	cb 01       	movw	r24, r22
 976:	97 f9       	bld	r25, 7
 978:	08 95       	ret

0000097a <__mulsf3>:
 97a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__mulsf3x>
 97e:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_round>
 982:	0e 94 75 04 	call	0x8ea	; 0x8ea <__fp_pscA>
 986:	38 f0       	brcs	.+14     	; 0x996 <__mulsf3+0x1c>
 988:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__fp_pscB>
 98c:	20 f0       	brcs	.+8      	; 0x996 <__mulsf3+0x1c>
 98e:	95 23       	and	r25, r21
 990:	11 f0       	breq	.+4      	; 0x996 <__mulsf3+0x1c>
 992:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_inf>
 996:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_nan>
 99a:	11 24       	eor	r1, r1
 99c:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_szero>

000009a0 <__mulsf3x>:
 9a0:	0e 94 94 04 	call	0x928	; 0x928 <__fp_split3>
 9a4:	70 f3       	brcs	.-36     	; 0x982 <__mulsf3+0x8>

000009a6 <__mulsf3_pse>:
 9a6:	95 9f       	mul	r25, r21
 9a8:	c1 f3       	breq	.-16     	; 0x99a <__mulsf3+0x20>
 9aa:	95 0f       	add	r25, r21
 9ac:	50 e0       	ldi	r21, 0x00	; 0
 9ae:	55 1f       	adc	r21, r21
 9b0:	62 9f       	mul	r22, r18
 9b2:	f0 01       	movw	r30, r0
 9b4:	72 9f       	mul	r23, r18
 9b6:	bb 27       	eor	r27, r27
 9b8:	f0 0d       	add	r31, r0
 9ba:	b1 1d       	adc	r27, r1
 9bc:	63 9f       	mul	r22, r19
 9be:	aa 27       	eor	r26, r26
 9c0:	f0 0d       	add	r31, r0
 9c2:	b1 1d       	adc	r27, r1
 9c4:	aa 1f       	adc	r26, r26
 9c6:	64 9f       	mul	r22, r20
 9c8:	66 27       	eor	r22, r22
 9ca:	b0 0d       	add	r27, r0
 9cc:	a1 1d       	adc	r26, r1
 9ce:	66 1f       	adc	r22, r22
 9d0:	82 9f       	mul	r24, r18
 9d2:	22 27       	eor	r18, r18
 9d4:	b0 0d       	add	r27, r0
 9d6:	a1 1d       	adc	r26, r1
 9d8:	62 1f       	adc	r22, r18
 9da:	73 9f       	mul	r23, r19
 9dc:	b0 0d       	add	r27, r0
 9de:	a1 1d       	adc	r26, r1
 9e0:	62 1f       	adc	r22, r18
 9e2:	83 9f       	mul	r24, r19
 9e4:	a0 0d       	add	r26, r0
 9e6:	61 1d       	adc	r22, r1
 9e8:	22 1f       	adc	r18, r18
 9ea:	74 9f       	mul	r23, r20
 9ec:	33 27       	eor	r19, r19
 9ee:	a0 0d       	add	r26, r0
 9f0:	61 1d       	adc	r22, r1
 9f2:	23 1f       	adc	r18, r19
 9f4:	84 9f       	mul	r24, r20
 9f6:	60 0d       	add	r22, r0
 9f8:	21 1d       	adc	r18, r1
 9fa:	82 2f       	mov	r24, r18
 9fc:	76 2f       	mov	r23, r22
 9fe:	6a 2f       	mov	r22, r26
 a00:	11 24       	eor	r1, r1
 a02:	9f 57       	subi	r25, 0x7F	; 127
 a04:	50 40       	sbci	r21, 0x00	; 0
 a06:	9a f0       	brmi	.+38     	; 0xa2e <__mulsf3_pse+0x88>
 a08:	f1 f0       	breq	.+60     	; 0xa46 <__mulsf3_pse+0xa0>
 a0a:	88 23       	and	r24, r24
 a0c:	4a f0       	brmi	.+18     	; 0xa20 <__mulsf3_pse+0x7a>
 a0e:	ee 0f       	add	r30, r30
 a10:	ff 1f       	adc	r31, r31
 a12:	bb 1f       	adc	r27, r27
 a14:	66 1f       	adc	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	91 50       	subi	r25, 0x01	; 1
 a1c:	50 40       	sbci	r21, 0x00	; 0
 a1e:	a9 f7       	brne	.-22     	; 0xa0a <__mulsf3_pse+0x64>
 a20:	9e 3f       	cpi	r25, 0xFE	; 254
 a22:	51 05       	cpc	r21, r1
 a24:	80 f0       	brcs	.+32     	; 0xa46 <__mulsf3_pse+0xa0>
 a26:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__fp_inf>
 a2a:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_szero>
 a2e:	5f 3f       	cpi	r21, 0xFF	; 255
 a30:	e4 f3       	brlt	.-8      	; 0xa2a <__mulsf3_pse+0x84>
 a32:	98 3e       	cpi	r25, 0xE8	; 232
 a34:	d4 f3       	brlt	.-12     	; 0xa2a <__mulsf3_pse+0x84>
 a36:	86 95       	lsr	r24
 a38:	77 95       	ror	r23
 a3a:	67 95       	ror	r22
 a3c:	b7 95       	ror	r27
 a3e:	f7 95       	ror	r31
 a40:	e7 95       	ror	r30
 a42:	9f 5f       	subi	r25, 0xFF	; 255
 a44:	c1 f7       	brne	.-16     	; 0xa36 <__mulsf3_pse+0x90>
 a46:	fe 2b       	or	r31, r30
 a48:	88 0f       	add	r24, r24
 a4a:	91 1d       	adc	r25, r1
 a4c:	96 95       	lsr	r25
 a4e:	87 95       	ror	r24
 a50:	97 f9       	bld	r25, 7
 a52:	08 95       	ret

00000a54 <_exit>:
 a54:	f8 94       	cli

00000a56 <__stop_program>:
 a56:	ff cf       	rjmp	.-2      	; 0xa56 <__stop_program>
