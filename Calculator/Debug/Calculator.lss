
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000e76  00000f0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800110  00800110  00000f1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e3  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a04  00000000  00000000  00002557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa5  00000000  00000000  00002f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b3  00000000  00000000  00003c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c4b  00000000  00000000  000042b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 03 	call	0x72a	; 0x72a <main>
  9e:	0c 94 39 07 	jmp	0xe72	; 0xe72 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CalculatorInitialzie>:



void CalculatorInitialzie(void)
{
    LCD_Init();
  a6:	0e 94 44 04 	call	0x888	; 0x888 <LCD_Init>
  aa:	08 95       	ret

000000ac <vid_ConvertFloatToInteger>:

    }
}

void vid_ConvertFloatToInteger(f32* Copy_f32_DecimalDigits, u8 Copy_u8_FloatPrecision)
{
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
  bc:	16 2f       	mov	r17, r22
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
  be:	89 2b       	or	r24, r25
  c0:	89 f4       	brne	.+34     	; 0xe4 <vid_ConvertFloatToInteger+0x38>
  c2:	28 c0       	rjmp	.+80     	; 0x114 <vid_ConvertFloatToInteger+0x68>
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
        {
            *Copy_f32_DecimalDigits *= 10;
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	40 e2       	ldi	r20, 0x20	; 32
  ca:	51 e4       	ldi	r21, 0x41	; 65
  cc:	c7 01       	movw	r24, r14
  ce:	b6 01       	movw	r22, r12
  d0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__mulsf3>
  d4:	68 83       	st	Y, r22
  d6:	79 83       	std	Y+1, r23	; 0x01
  d8:	8a 83       	std	Y+2, r24	; 0x02
  da:	9b 83       	std	Y+3, r25	; 0x03

            
            Local_u32_CheckVariable = (u32)(*Copy_f32_DecimalDigits);
  dc:	0e 94 80 05 	call	0xb00	; 0xb00 <__fixunssfsi>

            Copy_u8_FloatPrecision--;
  e0:	11 50       	subi	r17, 0x01	; 1
  e2:	03 c0       	rjmp	.+6      	; 0xea <vid_ConvertFloatToInteger+0x3e>
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	cb 01       	movw	r24, r22
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
  ea:	c8 80       	ld	r12, Y
  ec:	d9 80       	ldd	r13, Y+1	; 0x01
  ee:	ea 80       	ldd	r14, Y+2	; 0x02
  f0:	fb 80       	ldd	r15, Y+3	; 0x03
  f2:	0e 94 af 05 	call	0xb5e	; 0xb5e <__floatunsisf>
  f6:	9b 01       	movw	r18, r22
  f8:	ac 01       	movw	r20, r24
  fa:	c7 01       	movw	r24, r14
  fc:	b6 01       	movw	r22, r12
  fe:	0e 94 9c 04 	call	0x938	; 0x938 <__subsf3>
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	a9 01       	movw	r20, r18
 108:	0e 94 09 05 	call	0xa12	; 0xa12 <__cmpsf2>
 10c:	81 11       	cpse	r24, r1
 10e:	da cf       	rjmp	.-76     	; 0xc4 <vid_ConvertFloatToInteger+0x18>
 110:	11 23       	and	r17, r17
 112:	c1 f2       	breq	.-80     	; 0xc4 <vid_ConvertFloatToInteger+0x18>
        if(Local_u32_CheckVariable >= 5)
        {
            *Copy_f32_DecimalDigits++;
        }
	}
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	df 90       	pop	r13
 120:	cf 90       	pop	r12
 122:	08 95       	ret

00000124 <vid_ReverseInteger>:

void vid_ReverseInteger(u32* Copy_pu32_Num)
{
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
    //Must cast any to u32 when using this function

    if(Copy_pu32_Num)
 136:	89 2b       	or	r24, r25
 138:	21 f5       	brne	.+72     	; 0x182 <vid_ReverseInteger+0x5e>
 13a:	33 c0       	rjmp	.+102    	; 0x1a2 <vid_ReverseInteger+0x7e>
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
 13c:	97 01       	movw	r18, r14
 13e:	86 01       	movw	r16, r12
 140:	00 0f       	add	r16, r16
 142:	11 1f       	adc	r17, r17
 144:	22 1f       	adc	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	68 01       	movw	r12, r16
 14a:	79 01       	movw	r14, r18
 14c:	cc 0c       	add	r12, r12
 14e:	dd 1c       	adc	r13, r13
 150:	ee 1c       	adc	r14, r14
 152:	ff 1c       	adc	r15, r15
 154:	cc 0c       	add	r12, r12
 156:	dd 1c       	adc	r13, r13
 158:	ee 1c       	adc	r14, r14
 15a:	ff 1c       	adc	r15, r15
 15c:	c0 0e       	add	r12, r16
 15e:	d1 1e       	adc	r13, r17
 160:	e2 1e       	adc	r14, r18
 162:	f3 1e       	adc	r15, r19
 164:	2a e0       	ldi	r18, 0x0A	; 10
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	0e 94 de 06 	call	0xdbc	; 0xdbc <__udivmodsi4>
 170:	c6 0e       	add	r12, r22
 172:	d7 1e       	adc	r13, r23
 174:	e8 1e       	adc	r14, r24
 176:	f9 1e       	adc	r15, r25
            *Copy_pu32_Num /= 10;
 178:	28 83       	st	Y, r18
 17a:	39 83       	std	Y+1, r19	; 0x01
 17c:	4a 83       	std	Y+2, r20	; 0x02
 17e:	5b 83       	std	Y+3, r21	; 0x03
 180:	03 c0       	rjmp	.+6      	; 0x188 <vid_ReverseInteger+0x64>
 182:	c1 2c       	mov	r12, r1
 184:	d1 2c       	mov	r13, r1
 186:	76 01       	movw	r14, r12
    //Must cast any to u32 when using this function

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
 188:	68 81       	ld	r22, Y
 18a:	79 81       	ldd	r23, Y+1	; 0x01
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	9b 81       	ldd	r25, Y+3	; 0x03
 190:	61 15       	cp	r22, r1
 192:	71 05       	cpc	r23, r1
 194:	81 05       	cpc	r24, r1
 196:	91 05       	cpc	r25, r1
 198:	89 f6       	brne	.-94     	; 0x13c <vid_ReverseInteger+0x18>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
 19a:	c8 82       	st	Y, r12
 19c:	d9 82       	std	Y+1, r13	; 0x01
 19e:	ea 82       	std	Y+2, r14	; 0x02
 1a0:	fb 82       	std	Y+3, r15	; 0x03

    }

}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	08 95       	ret

000001b4 <vid_CountNumber>:

u32 vid_CountNumber(u32 Num)
{
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
    u32 Count = 0;
 1bc:	c1 2c       	mov	r12, r1
 1be:	d1 2c       	mov	r13, r1
 1c0:	76 01       	movw	r14, r12

    do
    {
        Num /= 10;
 1c2:	2a e0       	ldi	r18, 0x0A	; 10
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	0e 94 de 06 	call	0xdbc	; 0xdbc <__udivmodsi4>
 1ce:	ca 01       	movw	r24, r20
 1d0:	b9 01       	movw	r22, r18

        Count++;
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	c2 1a       	sub	r12, r18
 1d6:	d2 0a       	sbc	r13, r18
 1d8:	e2 0a       	sbc	r14, r18
 1da:	f2 0a       	sbc	r15, r18

    }while(Num);
 1dc:	61 15       	cp	r22, r1
 1de:	71 05       	cpc	r23, r1
 1e0:	81 05       	cpc	r24, r1
 1e2:	91 05       	cpc	r25, r1
 1e4:	71 f7       	brne	.-36     	; 0x1c2 <vid_CountNumber+0xe>

    return Count;

 1e6:	c7 01       	movw	r24, r14
 1e8:	b6 01       	movw	r22, r12
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	08 95       	ret

000001f4 <Calculator>:
{
    LCD_Init();
}

void Calculator(void)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	2c 97       	sbiw	r28, 0x0c	; 12
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61

    s32 FirstDigit;
    s32 SecondDigit;
    u8 Operation;

    u8 NegativeFlag = False;
 208:	31 2c       	mov	r3, r1
    LCD_Init();
}

void Calculator(void)
{
    State_t CurrentState = CALCULATOR_FIRST_DIGIT;
 20a:	00 e0       	ldi	r16, 0x00	; 0
    u8 NegativeFlag = False;
	
    while (1)
    {

        switch (CurrentState)
 20c:	02 30       	cpi	r16, 0x02	; 2
 20e:	09 f4       	brne	.+2      	; 0x212 <Calculator+0x1e>
 210:	58 c0       	rjmp	.+176    	; 0x2c2 <Calculator+0xce>
 212:	28 f4       	brcc	.+10     	; 0x21e <Calculator+0x2a>
 214:	00 23       	and	r16, r16
 216:	61 f0       	breq	.+24     	; 0x230 <Calculator+0x3c>
 218:	01 30       	cpi	r16, 0x01	; 1
 21a:	d1 f1       	breq	.+116    	; 0x290 <Calculator+0x9c>
 21c:	f7 cf       	rjmp	.-18     	; 0x20c <Calculator+0x18>
 21e:	04 30       	cpi	r16, 0x04	; 4
 220:	09 f4       	brne	.+2      	; 0x224 <Calculator+0x30>
 222:	89 c0       	rjmp	.+274    	; 0x336 <Calculator+0x142>
 224:	08 f4       	brcc	.+2      	; 0x228 <Calculator+0x34>
 226:	78 c0       	rjmp	.+240    	; 0x318 <Calculator+0x124>
 228:	05 30       	cpi	r16, 0x05	; 5
 22a:	09 f4       	brne	.+2      	; 0x22e <Calculator+0x3a>
 22c:	75 c2       	rjmp	.+1258   	; 0x718 <__EEPROM_REGION_LENGTH__+0x318>
 22e:	ee cf       	rjmp	.-36     	; 0x20c <Calculator+0x18>
        {
            case CALCULATOR_FIRST_DIGIT:
            {

                KeyPressed = keypad_scan();
 230:	0e 94 9c 03 	call	0x738	; 0x738 <keypad_scan>


                if( KeyPressed == '-')
 234:	8d 32       	cpi	r24, 0x2D	; 45
 236:	51 f4       	brne	.+20     	; 0x24c <Calculator+0x58>
                {
                    LCD_GoToXY(0,0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_GoToXY>

                    NegativeFlag = True;

                    LCD_PutChar('-');
 240:	8d e2       	ldi	r24, 0x2D	; 45
 242:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                if( KeyPressed == '-')
                {
                    LCD_GoToXY(0,0);

                    NegativeFlag = True;
 246:	33 24       	eor	r3, r3
 248:	33 94       	inc	r3
 24a:	e0 cf       	rjmp	.-64     	; 0x20c <Calculator+0x18>

                    LCD_PutChar('-');
                }
                else if ( (KeyPressed >= '0' ) && (KeyPressed <= '9') )
 24c:	90 ed       	ldi	r25, 0xD0	; 208
 24e:	98 0f       	add	r25, r24
 250:	9a 30       	cpi	r25, 0x0A	; 10
 252:	e0 f6       	brcc	.-72     	; 0x20c <Calculator+0x18>
                {
                    
                    FirstDigit = (KeyPressed - 48);
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	20 53       	subi	r18, 0x30	; 48
 25a:	31 09       	sbc	r19, r1
 25c:	a9 01       	movw	r20, r18
 25e:	33 0f       	add	r19, r19
 260:	66 0b       	sbc	r22, r22
 262:	77 0b       	sbc	r23, r23
 264:	49 87       	std	Y+9, r20	; 0x09
 266:	5a 87       	std	Y+10, r21	; 0x0a
 268:	6b 87       	std	Y+11, r22	; 0x0b
 26a:	7c 87       	std	Y+12, r23	; 0x0c

                    if(NegativeFlag)
 26c:	33 20       	and	r3, r3
 26e:	61 f0       	breq	.+24     	; 0x288 <Calculator+0x94>
                    {
                        FirstDigit *= -1;
 270:	70 95       	com	r23
 272:	60 95       	com	r22
 274:	50 95       	com	r21
 276:	41 95       	neg	r20
 278:	5f 4f       	sbci	r21, 0xFF	; 255
 27a:	6f 4f       	sbci	r22, 0xFF	; 255
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	49 87       	std	Y+9, r20	; 0x09
 280:	5a 87       	std	Y+10, r21	; 0x0a
 282:	6b 87       	std	Y+11, r22	; 0x0b
 284:	7c 87       	std	Y+12, r23	; 0x0c

                        NegativeFlag = False;
 286:	31 2c       	mov	r3, r1
                    }

                    LCD_PutChar(KeyPressed);
 288:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                    CurrentState = CALCULATOR_OPERATION;
 28c:	01 e0       	ldi	r16, 0x01	; 1
 28e:	be cf       	rjmp	.-132    	; 0x20c <Calculator+0x18>
                break;
            }            

            case CALCULATOR_OPERATION:
            {
                KeyPressed = keypad_scan();
 290:	0e 94 9c 03 	call	0x738	; 0x738 <keypad_scan>
 294:	e8 2e       	mov	r14, r24

                if ( (KeyPressed == '+' ) || (KeyPressed == '-' ) || (KeyPressed == 'x' ) || (KeyPressed == '/' )  )
 296:	5b e2       	ldi	r21, 0x2B	; 43
 298:	85 17       	cp	r24, r21
 29a:	49 f0       	breq	.+18     	; 0x2ae <Calculator+0xba>
 29c:	6d e2       	ldi	r22, 0x2D	; 45
 29e:	86 17       	cp	r24, r22
 2a0:	31 f0       	breq	.+12     	; 0x2ae <Calculator+0xba>
 2a2:	78 e7       	ldi	r23, 0x78	; 120
 2a4:	87 17       	cp	r24, r23
 2a6:	19 f0       	breq	.+6      	; 0x2ae <Calculator+0xba>
 2a8:	8f e2       	ldi	r24, 0x2F	; 47
 2aa:	e8 12       	cpse	r14, r24
 2ac:	af cf       	rjmp	.-162    	; 0x20c <Calculator+0x18>
                {
                    Operation = KeyPressed;

                    LCD_GoToXY(0,2);
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_GoToXY>

                    LCD_PutChar(KeyPressed);
 2b6:	8e 2d       	mov	r24, r14
 2b8:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>
            {
                KeyPressed = keypad_scan();

                if ( (KeyPressed == '+' ) || (KeyPressed == '-' ) || (KeyPressed == 'x' ) || (KeyPressed == '/' )  )
                {
                    Operation = KeyPressed;
 2bc:	1e 2d       	mov	r17, r14

                    LCD_GoToXY(0,2);

                    LCD_PutChar(KeyPressed);

                    CurrentState = CALCULATOR_SECOND_DIGIT;
 2be:	02 e0       	ldi	r16, 0x02	; 2
 2c0:	a5 cf       	rjmp	.-182    	; 0x20c <Calculator+0x18>
                break;
            }

            case CALCULATOR_SECOND_DIGIT:
            {
                KeyPressed = keypad_scan();
 2c2:	0e 94 9c 03 	call	0x738	; 0x738 <keypad_scan>

                if( KeyPressed == '-')
 2c6:	8d 32       	cpi	r24, 0x2D	; 45
 2c8:	51 f4       	brne	.+20     	; 0x2de <Calculator+0xea>
                {
                    LCD_GoToXY(0,4);
 2ca:	64 e0       	ldi	r22, 0x04	; 4
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_GoToXY>

                    NegativeFlag = True;

                    LCD_PutChar('-');
 2d2:	8d e2       	ldi	r24, 0x2D	; 45
 2d4:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                if( KeyPressed == '-')
                {
                    LCD_GoToXY(0,4);

                    NegativeFlag = True;
 2d8:	33 24       	eor	r3, r3
 2da:	33 94       	inc	r3
 2dc:	97 cf       	rjmp	.-210    	; 0x20c <Calculator+0x18>

                    LCD_PutChar('-');
                }
                else if ( (KeyPressed >= '0' ) && (KeyPressed <= '9') )
 2de:	90 ed       	ldi	r25, 0xD0	; 208
 2e0:	98 0f       	add	r25, r24
 2e2:	9a 30       	cpi	r25, 0x0A	; 10
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <Calculator+0xf4>
 2e6:	92 cf       	rjmp	.-220    	; 0x20c <Calculator+0x18>
                {
                    SecondDigit = KeyPressed - 48;
 2e8:	88 2e       	mov	r8, r24
 2ea:	91 2c       	mov	r9, r1
 2ec:	90 e3       	ldi	r25, 0x30	; 48
 2ee:	89 1a       	sub	r8, r25
 2f0:	91 08       	sbc	r9, r1
 2f2:	09 2c       	mov	r0, r9
 2f4:	00 0c       	add	r0, r0
 2f6:	aa 08       	sbc	r10, r10
 2f8:	bb 08       	sbc	r11, r11
                    
                    if(NegativeFlag)
 2fa:	33 20       	and	r3, r3
 2fc:	49 f0       	breq	.+18     	; 0x310 <Calculator+0x11c>
                    {
                        SecondDigit *= -1;
 2fe:	b0 94       	com	r11
 300:	a0 94       	com	r10
 302:	90 94       	com	r9
 304:	80 94       	com	r8
 306:	81 1c       	adc	r8, r1
 308:	91 1c       	adc	r9, r1
 30a:	a1 1c       	adc	r10, r1
 30c:	b1 1c       	adc	r11, r1

                        NegativeFlag = False;
 30e:	31 2c       	mov	r3, r1
                    }

                    LCD_PutChar(KeyPressed);
 310:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                    CurrentState = CALCULATOR_EQUAL_OPERATOR;
 314:	03 e0       	ldi	r16, 0x03	; 3
 316:	7a cf       	rjmp	.-268    	; 0x20c <Calculator+0x18>
                break;
            }

            case CALCULATOR_EQUAL_OPERATOR:
            {
                KeyPressed = keypad_scan();
 318:	0e 94 9c 03 	call	0x738	; 0x738 <keypad_scan>
 31c:	e8 2e       	mov	r14, r24

                if ( KeyPressed == '=' )
 31e:	2d e3       	ldi	r18, 0x3D	; 61
 320:	82 13       	cpse	r24, r18
 322:	74 cf       	rjmp	.-280    	; 0x20c <Calculator+0x18>
                {

                    LCD_GoToXY(0,6);
 324:	66 e0       	ldi	r22, 0x06	; 6
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_GoToXY>

                    LCD_PutChar(KeyPressed);
 32c:	8e 2d       	mov	r24, r14
 32e:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                    CurrentState = CALCULATOR_RESULT;
 332:	04 e0       	ldi	r16, 0x04	; 4
 334:	6b cf       	rjmp	.-298    	; 0x20c <Calculator+0x18>
        
            case CALCULATOR_RESULT:
            {
                s32 Result;

                switch (Operation)
 336:	1d 32       	cpi	r17, 0x2D	; 45
 338:	09 f4       	brne	.+2      	; 0x33c <Calculator+0x148>
 33a:	79 c0       	rjmp	.+242    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 33c:	18 f4       	brcc	.+6      	; 0x344 <Calculator+0x150>
 33e:	1b 32       	cpi	r17, 0x2B	; 43
 340:	41 f0       	breq	.+16     	; 0x352 <Calculator+0x15e>
 342:	e8 c1       	rjmp	.+976    	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
 344:	1f 32       	cpi	r17, 0x2F	; 47
 346:	09 f4       	brne	.+2      	; 0x34a <Calculator+0x156>
 348:	4c c1       	rjmp	.+664    	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 34a:	18 37       	cpi	r17, 0x78	; 120
 34c:	09 f4       	brne	.+2      	; 0x350 <Calculator+0x15c>
 34e:	dc c0       	rjmp	.+440    	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 350:	e1 c1       	rjmp	.+962    	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
                {
                    case '+':
                    {
                        Result = FirstDigit + SecondDigit;
 352:	89 85       	ldd	r24, Y+9	; 0x09
 354:	9a 85       	ldd	r25, Y+10	; 0x0a
 356:	ab 85       	ldd	r26, Y+11	; 0x0b
 358:	bc 85       	ldd	r27, Y+12	; 0x0c
 35a:	88 0d       	add	r24, r8
 35c:	99 1d       	adc	r25, r9
 35e:	aa 1d       	adc	r26, r10
 360:	bb 1d       	adc	r27, r11
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	9a 83       	std	Y+2, r25	; 0x02
 366:	ab 83       	std	Y+3, r26	; 0x03
 368:	bc 83       	std	Y+4, r27	; 0x04
						
                        LCD_GoToXY(0, 8);
 36a:	68 e0       	ldi	r22, 0x08	; 8
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_GoToXY>

                        if(Result < 0 )
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	ab 81       	ldd	r26, Y+3	; 0x03
 378:	bc 81       	ldd	r27, Y+4	; 0x04
 37a:	bb 23       	and	r27, r27
 37c:	94 f4       	brge	.+36     	; 0x3a2 <Calculator+0x1ae>
                        {
                            LCD_PutChar('-');
 37e:	8d e2       	ldi	r24, 0x2D	; 45
 380:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                            Result *= -1;
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	9a 81       	ldd	r25, Y+2	; 0x02
 388:	ab 81       	ldd	r26, Y+3	; 0x03
 38a:	bc 81       	ldd	r27, Y+4	; 0x04
 38c:	b0 95       	com	r27
 38e:	a0 95       	com	r26
 390:	90 95       	com	r25
 392:	81 95       	neg	r24
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	af 4f       	sbci	r26, 0xFF	; 255
 398:	bf 4f       	sbci	r27, 0xFF	; 255
 39a:	89 83       	std	Y+1, r24	; 0x01
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	ab 83       	std	Y+3, r26	; 0x03
 3a0:	bc 83       	std	Y+4, r27	; 0x04

                        }   

						u32 Count = vid_CountNumber(Result);
 3a2:	49 80       	ldd	r4, Y+1	; 0x01
 3a4:	5a 80       	ldd	r5, Y+2	; 0x02
 3a6:	6b 80       	ldd	r6, Y+3	; 0x03
 3a8:	7c 80       	ldd	r7, Y+4	; 0x04
 3aa:	c3 01       	movw	r24, r6
 3ac:	b2 01       	movw	r22, r4
 3ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vid_CountNumber>
 3b2:	6b 01       	movw	r12, r22
 3b4:	7c 01       	movw	r14, r24

                        vid_ReverseInteger(Result);
 3b6:	c2 01       	movw	r24, r4
 3b8:	0e 94 92 00 	call	0x124	; 0x124 <vid_ReverseInteger>

                        while (Result)
 3bc:	20 c0       	rjmp	.+64     	; 0x3fe <Calculator+0x20a>
                        {
                            LCD_PutChar((Result % 10) + 48);
 3be:	0f 2e       	mov	r0, r31
 3c0:	fa e0       	ldi	r31, 0x0A	; 10
 3c2:	4f 2e       	mov	r4, r31
 3c4:	51 2c       	mov	r5, r1
 3c6:	61 2c       	mov	r6, r1
 3c8:	71 2c       	mov	r7, r1
 3ca:	f0 2d       	mov	r31, r0
 3cc:	a3 01       	movw	r20, r6
 3ce:	92 01       	movw	r18, r4
 3d0:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 3d4:	80 e3       	ldi	r24, 0x30	; 48
 3d6:	86 0f       	add	r24, r22
 3d8:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                            Result /= 10;
 3dc:	69 81       	ldd	r22, Y+1	; 0x01
 3de:	7a 81       	ldd	r23, Y+2	; 0x02
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	9c 81       	ldd	r25, Y+4	; 0x04
 3e4:	a3 01       	movw	r20, r6
 3e6:	92 01       	movw	r18, r4
 3e8:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 3ec:	29 83       	std	Y+1, r18	; 0x01
 3ee:	3a 83       	std	Y+2, r19	; 0x02
 3f0:	4b 83       	std	Y+3, r20	; 0x03
 3f2:	5c 83       	std	Y+4, r21	; 0x04

                            Count--;    
 3f4:	31 e0       	ldi	r19, 0x01	; 1
 3f6:	c3 1a       	sub	r12, r19
 3f8:	d1 08       	sbc	r13, r1
 3fa:	e1 08       	sbc	r14, r1
 3fc:	f1 08       	sbc	r15, r1

						u32 Count = vid_CountNumber(Result);

                        vid_ReverseInteger(Result);

                        while (Result)
 3fe:	69 81       	ldd	r22, Y+1	; 0x01
 400:	7a 81       	ldd	r23, Y+2	; 0x02
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	9c 81       	ldd	r25, Y+4	; 0x04
 406:	61 15       	cp	r22, r1
 408:	71 05       	cpc	r23, r1
 40a:	81 05       	cpc	r24, r1
 40c:	91 05       	cpc	r25, r1
 40e:	b9 f6       	brne	.-82     	; 0x3be <Calculator+0x1ca>
 410:	08 c0       	rjmp	.+16     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
                            Count--;    
                        }

                        while(Count)
                        {
                            LCD_PutChar('0');
 412:	80 e3       	ldi	r24, 0x30	; 48
 414:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>
                            
                            Count--;
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	c4 1a       	sub	r12, r20
 41c:	d1 08       	sbc	r13, r1
 41e:	e1 08       	sbc	r14, r1
 420:	f1 08       	sbc	r15, r1
                            Result /= 10;

                            Count--;    
                        }

                        while(Count)
 422:	c1 14       	cp	r12, r1
 424:	d1 04       	cpc	r13, r1
 426:	e1 04       	cpc	r14, r1
 428:	f1 04       	cpc	r15, r1
 42a:	99 f7       	brne	.-26     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 42c:	73 c1       	rjmp	.+742    	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
                    }

                    case '-':
                    {

                        Result = FirstDigit - SecondDigit;
 42e:	89 85       	ldd	r24, Y+9	; 0x09
 430:	9a 85       	ldd	r25, Y+10	; 0x0a
 432:	ab 85       	ldd	r26, Y+11	; 0x0b
 434:	bc 85       	ldd	r27, Y+12	; 0x0c
 436:	88 19       	sub	r24, r8
 438:	99 09       	sbc	r25, r9
 43a:	aa 09       	sbc	r26, r10
 43c:	bb 09       	sbc	r27, r11
 43e:	89 83       	std	Y+1, r24	; 0x01
 440:	9a 83       	std	Y+2, r25	; 0x02
 442:	ab 83       	std	Y+3, r26	; 0x03
 444:	bc 83       	std	Y+4, r27	; 0x04

                        LCD_GoToXY(0, 8);
 446:	68 e0       	ldi	r22, 0x08	; 8
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_GoToXY>

                        if(Result < 0 )
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	9a 81       	ldd	r25, Y+2	; 0x02
 452:	ab 81       	ldd	r26, Y+3	; 0x03
 454:	bc 81       	ldd	r27, Y+4	; 0x04
 456:	bb 23       	and	r27, r27
 458:	94 f4       	brge	.+36     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
                        {
                            LCD_PutChar('-');
 45a:	8d e2       	ldi	r24, 0x2D	; 45
 45c:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                            Result *= -1;
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	ab 81       	ldd	r26, Y+3	; 0x03
 466:	bc 81       	ldd	r27, Y+4	; 0x04
 468:	b0 95       	com	r27
 46a:	a0 95       	com	r26
 46c:	90 95       	com	r25
 46e:	81 95       	neg	r24
 470:	9f 4f       	sbci	r25, 0xFF	; 255
 472:	af 4f       	sbci	r26, 0xFF	; 255
 474:	bf 4f       	sbci	r27, 0xFF	; 255
 476:	89 83       	std	Y+1, r24	; 0x01
 478:	9a 83       	std	Y+2, r25	; 0x02
 47a:	ab 83       	std	Y+3, r26	; 0x03
 47c:	bc 83       	std	Y+4, r27	; 0x04
                        }                        
                        
                        u32 Count = vid_CountNumber(Result);
 47e:	69 81       	ldd	r22, Y+1	; 0x01
 480:	7a 81       	ldd	r23, Y+2	; 0x02
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	9c 81       	ldd	r25, Y+4	; 0x04
 486:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vid_CountNumber>
 48a:	6b 01       	movw	r12, r22
 48c:	7c 01       	movw	r14, r24

                        vid_ReverseInteger(&Result);
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	0e 94 92 00 	call	0x124	; 0x124 <vid_ReverseInteger>

                        while (Result)
 496:	20 c0       	rjmp	.+64     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
                        {
                            LCD_PutChar((Result % 10) + 48);
 498:	0f 2e       	mov	r0, r31
 49a:	fa e0       	ldi	r31, 0x0A	; 10
 49c:	4f 2e       	mov	r4, r31
 49e:	51 2c       	mov	r5, r1
 4a0:	61 2c       	mov	r6, r1
 4a2:	71 2c       	mov	r7, r1
 4a4:	f0 2d       	mov	r31, r0
 4a6:	a3 01       	movw	r20, r6
 4a8:	92 01       	movw	r18, r4
 4aa:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 4ae:	80 e3       	ldi	r24, 0x30	; 48
 4b0:	86 0f       	add	r24, r22
 4b2:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                            Result /= 10;
 4b6:	69 81       	ldd	r22, Y+1	; 0x01
 4b8:	7a 81       	ldd	r23, Y+2	; 0x02
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	9c 81       	ldd	r25, Y+4	; 0x04
 4be:	a3 01       	movw	r20, r6
 4c0:	92 01       	movw	r18, r4
 4c2:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 4c6:	29 83       	std	Y+1, r18	; 0x01
 4c8:	3a 83       	std	Y+2, r19	; 0x02
 4ca:	4b 83       	std	Y+3, r20	; 0x03
 4cc:	5c 83       	std	Y+4, r21	; 0x04

                            Count--;    
 4ce:	51 e0       	ldi	r21, 0x01	; 1
 4d0:	c5 1a       	sub	r12, r21
 4d2:	d1 08       	sbc	r13, r1
 4d4:	e1 08       	sbc	r14, r1
 4d6:	f1 08       	sbc	r15, r1
                        
                        u32 Count = vid_CountNumber(Result);

                        vid_ReverseInteger(&Result);

                        while (Result)
 4d8:	69 81       	ldd	r22, Y+1	; 0x01
 4da:	7a 81       	ldd	r23, Y+2	; 0x02
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	9c 81       	ldd	r25, Y+4	; 0x04
 4e0:	61 15       	cp	r22, r1
 4e2:	71 05       	cpc	r23, r1
 4e4:	81 05       	cpc	r24, r1
 4e6:	91 05       	cpc	r25, r1
 4e8:	b9 f6       	brne	.-82     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4ea:	08 c0       	rjmp	.+16     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
                            Count--;    
                        }

                        while(Count)
                        {
                            LCD_PutChar('0');
 4ec:	80 e3       	ldi	r24, 0x30	; 48
 4ee:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>
                            
                            Count--;
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	c6 1a       	sub	r12, r22
 4f6:	d1 08       	sbc	r13, r1
 4f8:	e1 08       	sbc	r14, r1
 4fa:	f1 08       	sbc	r15, r1
                            Result /= 10;

                            Count--;    
                        }

                        while(Count)
 4fc:	c1 14       	cp	r12, r1
 4fe:	d1 04       	cpc	r13, r1
 500:	e1 04       	cpc	r14, r1
 502:	f1 04       	cpc	r15, r1
 504:	99 f7       	brne	.-26     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 506:	06 c1       	rjmp	.+524    	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
                    }

                    case 'x':
                    {
                        
                        Result = FirstDigit * SecondDigit;
 508:	29 85       	ldd	r18, Y+9	; 0x09
 50a:	3a 85       	ldd	r19, Y+10	; 0x0a
 50c:	4b 85       	ldd	r20, Y+11	; 0x0b
 50e:	5c 85       	ldd	r21, Y+12	; 0x0c
 510:	c5 01       	movw	r24, r10
 512:	b4 01       	movw	r22, r8
 514:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__mulsi3>
 518:	69 83       	std	Y+1, r22	; 0x01
 51a:	7a 83       	std	Y+2, r23	; 0x02
 51c:	8b 83       	std	Y+3, r24	; 0x03
 51e:	9c 83       	std	Y+4, r25	; 0x04

                        LCD_GoToXY(0, 8);
 520:	68 e0       	ldi	r22, 0x08	; 8
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_GoToXY>

                        if(Result < 0 )
 528:	89 81       	ldd	r24, Y+1	; 0x01
 52a:	9a 81       	ldd	r25, Y+2	; 0x02
 52c:	ab 81       	ldd	r26, Y+3	; 0x03
 52e:	bc 81       	ldd	r27, Y+4	; 0x04
 530:	bb 23       	and	r27, r27
 532:	94 f4       	brge	.+36     	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
                        {
                            LCD_PutChar('-');
 534:	8d e2       	ldi	r24, 0x2D	; 45
 536:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                            Result *= -1;
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	9a 81       	ldd	r25, Y+2	; 0x02
 53e:	ab 81       	ldd	r26, Y+3	; 0x03
 540:	bc 81       	ldd	r27, Y+4	; 0x04
 542:	b0 95       	com	r27
 544:	a0 95       	com	r26
 546:	90 95       	com	r25
 548:	81 95       	neg	r24
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	af 4f       	sbci	r26, 0xFF	; 255
 54e:	bf 4f       	sbci	r27, 0xFF	; 255
 550:	89 83       	std	Y+1, r24	; 0x01
 552:	9a 83       	std	Y+2, r25	; 0x02
 554:	ab 83       	std	Y+3, r26	; 0x03
 556:	bc 83       	std	Y+4, r27	; 0x04
                        }                        
                        
                        u32 Count = vid_CountNumber(Result);
 558:	69 81       	ldd	r22, Y+1	; 0x01
 55a:	7a 81       	ldd	r23, Y+2	; 0x02
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	9c 81       	ldd	r25, Y+4	; 0x04
 560:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vid_CountNumber>
 564:	6b 01       	movw	r12, r22
 566:	7c 01       	movw	r14, r24

                        vid_ReverseInteger(&Result);
 568:	ce 01       	movw	r24, r28
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	0e 94 92 00 	call	0x124	; 0x124 <vid_ReverseInteger>

                        while (Result)
 570:	20 c0       	rjmp	.+64     	; 0x5b2 <__EEPROM_REGION_LENGTH__+0x1b2>
                        {
                            LCD_PutChar((Result % 10) + 48);
 572:	0f 2e       	mov	r0, r31
 574:	fa e0       	ldi	r31, 0x0A	; 10
 576:	4f 2e       	mov	r4, r31
 578:	51 2c       	mov	r5, r1
 57a:	61 2c       	mov	r6, r1
 57c:	71 2c       	mov	r7, r1
 57e:	f0 2d       	mov	r31, r0
 580:	a3 01       	movw	r20, r6
 582:	92 01       	movw	r18, r4
 584:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 588:	80 e3       	ldi	r24, 0x30	; 48
 58a:	86 0f       	add	r24, r22
 58c:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                            Result /= 10;
 590:	69 81       	ldd	r22, Y+1	; 0x01
 592:	7a 81       	ldd	r23, Y+2	; 0x02
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	9c 81       	ldd	r25, Y+4	; 0x04
 598:	a3 01       	movw	r20, r6
 59a:	92 01       	movw	r18, r4
 59c:	0e 94 00 07 	call	0xe00	; 0xe00 <__divmodsi4>
 5a0:	29 83       	std	Y+1, r18	; 0x01
 5a2:	3a 83       	std	Y+2, r19	; 0x02
 5a4:	4b 83       	std	Y+3, r20	; 0x03
 5a6:	5c 83       	std	Y+4, r21	; 0x04

                            Count--;    
 5a8:	71 e0       	ldi	r23, 0x01	; 1
 5aa:	c7 1a       	sub	r12, r23
 5ac:	d1 08       	sbc	r13, r1
 5ae:	e1 08       	sbc	r14, r1
 5b0:	f1 08       	sbc	r15, r1
                        
                        u32 Count = vid_CountNumber(Result);

                        vid_ReverseInteger(&Result);

                        while (Result)
 5b2:	69 81       	ldd	r22, Y+1	; 0x01
 5b4:	7a 81       	ldd	r23, Y+2	; 0x02
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	9c 81       	ldd	r25, Y+4	; 0x04
 5ba:	61 15       	cp	r22, r1
 5bc:	71 05       	cpc	r23, r1
 5be:	81 05       	cpc	r24, r1
 5c0:	91 05       	cpc	r25, r1
 5c2:	b9 f6       	brne	.-82     	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
 5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
                            Count--;    
                        }

                        while(Count)
                        {
                            LCD_PutChar('0');
 5c6:	80 e3       	ldi	r24, 0x30	; 48
 5c8:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>
                            
                            Count--;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	c8 1a       	sub	r12, r24
 5d0:	d1 08       	sbc	r13, r1
 5d2:	e1 08       	sbc	r14, r1
 5d4:	f1 08       	sbc	r15, r1
                            Result /= 10;

                            Count--;    
                        }

                        while(Count)
 5d6:	c1 14       	cp	r12, r1
 5d8:	d1 04       	cpc	r13, r1
 5da:	e1 04       	cpc	r14, r1
 5dc:	f1 04       	cpc	r15, r1
 5de:	99 f7       	brne	.-26     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 5e0:	99 c0       	rjmp	.+306    	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
                        break;
                    }

                    case '/':
                    {
                        f32 FloatResultPart = (((f32)FirstDigit) / SecondDigit);
 5e2:	69 85       	ldd	r22, Y+9	; 0x09
 5e4:	7a 85       	ldd	r23, Y+10	; 0x0a
 5e6:	8b 85       	ldd	r24, Y+11	; 0x0b
 5e8:	9c 85       	ldd	r25, Y+12	; 0x0c
 5ea:	0e 94 b1 05 	call	0xb62	; 0xb62 <__floatsisf>
 5ee:	6b 01       	movw	r12, r22
 5f0:	7c 01       	movw	r14, r24
 5f2:	c5 01       	movw	r24, r10
 5f4:	b4 01       	movw	r22, r8
 5f6:	0e 94 b1 05 	call	0xb62	; 0xb62 <__floatsisf>
 5fa:	9b 01       	movw	r18, r22
 5fc:	ac 01       	movw	r20, r24
 5fe:	c7 01       	movw	r24, r14
 600:	b6 01       	movw	r22, r12
 602:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__divsf3>
 606:	6d 83       	std	Y+5, r22	; 0x05
 608:	7e 83       	std	Y+6, r23	; 0x06
 60a:	8f 83       	std	Y+7, r24	; 0x07
 60c:	98 87       	std	Y+8, r25	; 0x08

                        LCD_GoToXY(0, 8);
 60e:	68 e0       	ldi	r22, 0x08	; 8
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	0e 94 73 04 	call	0x8e6	; 0x8e6 <LCD_GoToXY>

                        if(FloatResultPart < 0 )
 616:	6d 81       	ldd	r22, Y+5	; 0x05
 618:	7e 81       	ldd	r23, Y+6	; 0x06
 61a:	8f 81       	ldd	r24, Y+7	; 0x07
 61c:	98 85       	ldd	r25, Y+8	; 0x08
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	a9 01       	movw	r20, r18
 624:	0e 94 09 05 	call	0xa12	; 0xa12 <__cmpsf2>
 628:	88 23       	and	r24, r24
 62a:	64 f4       	brge	.+24     	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
                        {
                            LCD_PutChar('-');
 62c:	8d e2       	ldi	r24, 0x2D	; 45
 62e:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                            FloatResultPart *= -1;
 632:	8d 81       	ldd	r24, Y+5	; 0x05
 634:	9e 81       	ldd	r25, Y+6	; 0x06
 636:	af 81       	ldd	r26, Y+7	; 0x07
 638:	b8 85       	ldd	r27, Y+8	; 0x08
 63a:	b0 58       	subi	r27, 0x80	; 128
 63c:	8d 83       	std	Y+5, r24	; 0x05
 63e:	9e 83       	std	Y+6, r25	; 0x06
 640:	af 83       	std	Y+7, r26	; 0x07
 642:	b8 87       	std	Y+8, r27	; 0x08
                        }   

                        u32 IntegerResultPart = FloatResultPart;
 644:	cd 80       	ldd	r12, Y+5	; 0x05
 646:	de 80       	ldd	r13, Y+6	; 0x06
 648:	ef 80       	ldd	r14, Y+7	; 0x07
 64a:	f8 84       	ldd	r15, Y+8	; 0x08
 64c:	c7 01       	movw	r24, r14
 64e:	b6 01       	movw	r22, r12
 650:	0e 94 80 05 	call	0xb00	; 0xb00 <__fixunssfsi>
 654:	69 83       	std	Y+1, r22	; 0x01
 656:	7a 83       	std	Y+2, r23	; 0x02
 658:	8b 83       	std	Y+3, r24	; 0x03
 65a:	9c 83       	std	Y+4, r25	; 0x04

                        FloatResultPart = FloatResultPart - (f32)IntegerResultPart;
 65c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__floatunsisf>
 660:	9b 01       	movw	r18, r22
 662:	ac 01       	movw	r20, r24
 664:	c7 01       	movw	r24, r14
 666:	b6 01       	movw	r22, r12
 668:	0e 94 9c 04 	call	0x938	; 0x938 <__subsf3>
 66c:	6d 83       	std	Y+5, r22	; 0x05
 66e:	7e 83       	std	Y+6, r23	; 0x06
 670:	8f 83       	std	Y+7, r24	; 0x07
 672:	98 87       	std	Y+8, r25	; 0x08

                        u8 DecimalDigitsCount = FLOAT_PRECISION;

                        vid_ConvertFloatToInteger(&FloatResultPart, DecimalDigitsCount);
 674:	63 e0       	ldi	r22, 0x03	; 3
 676:	ce 01       	movw	r24, r28
 678:	05 96       	adiw	r24, 0x05	; 5
 67a:	0e 94 56 00 	call	0xac	; 0xac <vid_ConvertFloatToInteger>
                        
                        LCD_PutChar(IntegerResultPart + 48);
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	80 5d       	subi	r24, 0xD0	; 208
 682:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                        if(FloatResultPart != 0)
 686:	6d 81       	ldd	r22, Y+5	; 0x05
 688:	7e 81       	ldd	r23, Y+6	; 0x06
 68a:	8f 81       	ldd	r24, Y+7	; 0x07
 68c:	98 85       	ldd	r25, Y+8	; 0x08
 68e:	20 e0       	ldi	r18, 0x00	; 0
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	a9 01       	movw	r20, r18
 694:	0e 94 09 05 	call	0xa12	; 0xa12 <__cmpsf2>
 698:	88 23       	and	r24, r24
 69a:	e1 f1       	breq	.+120    	; 0x714 <__EEPROM_REGION_LENGTH__+0x314>
                        {
                            LCD_PutChar('.');
 69c:	8e e2       	ldi	r24, 0x2E	; 46
 69e:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                            //Using IntegerResultPart for safety
                            IntegerResultPart = FloatResultPart;
 6a2:	6d 81       	ldd	r22, Y+5	; 0x05
 6a4:	7e 81       	ldd	r23, Y+6	; 0x06
 6a6:	8f 81       	ldd	r24, Y+7	; 0x07
 6a8:	98 85       	ldd	r25, Y+8	; 0x08
 6aa:	0e 94 80 05 	call	0xb00	; 0xb00 <__fixunssfsi>
 6ae:	69 83       	std	Y+1, r22	; 0x01
 6b0:	7a 83       	std	Y+2, r23	; 0x02
 6b2:	8b 83       	std	Y+3, r24	; 0x03
 6b4:	9c 83       	std	Y+4, r25	; 0x04

                            vid_ReverseInteger(&IntegerResultPart);
 6b6:	ce 01       	movw	r24, r28
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	0e 94 92 00 	call	0x124	; 0x124 <vid_ReverseInteger>

                        u32 IntegerResultPart = FloatResultPart;

                        FloatResultPart = FloatResultPart - (f32)IntegerResultPart;

                        u8 DecimalDigitsCount = FLOAT_PRECISION;
 6be:	03 e0       	ldi	r16, 0x03	; 3
                            //Using IntegerResultPart for safety
                            IntegerResultPart = FloatResultPart;

                            vid_ReverseInteger(&IntegerResultPart);
                            
                            while (DecimalDigitsCount)
 6c0:	20 c0       	rjmp	.+64     	; 0x702 <__EEPROM_REGION_LENGTH__+0x302>
                            {
                                LCD_PutChar((IntegerResultPart % 10) + 48);
 6c2:	69 81       	ldd	r22, Y+1	; 0x01
 6c4:	7a 81       	ldd	r23, Y+2	; 0x02
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ca:	0f 2e       	mov	r0, r31
 6cc:	fa e0       	ldi	r31, 0x0A	; 10
 6ce:	4f 2e       	mov	r4, r31
 6d0:	51 2c       	mov	r5, r1
 6d2:	61 2c       	mov	r6, r1
 6d4:	71 2c       	mov	r7, r1
 6d6:	f0 2d       	mov	r31, r0
 6d8:	a3 01       	movw	r20, r6
 6da:	92 01       	movw	r18, r4
 6dc:	0e 94 de 06 	call	0xdbc	; 0xdbc <__udivmodsi4>
 6e0:	80 e3       	ldi	r24, 0x30	; 48
 6e2:	86 0f       	add	r24, r22
 6e4:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                                IntegerResultPart /= 10;
 6e8:	69 81       	ldd	r22, Y+1	; 0x01
 6ea:	7a 81       	ldd	r23, Y+2	; 0x02
 6ec:	8b 81       	ldd	r24, Y+3	; 0x03
 6ee:	9c 81       	ldd	r25, Y+4	; 0x04
 6f0:	a3 01       	movw	r20, r6
 6f2:	92 01       	movw	r18, r4
 6f4:	0e 94 de 06 	call	0xdbc	; 0xdbc <__udivmodsi4>
 6f8:	29 83       	std	Y+1, r18	; 0x01
 6fa:	3a 83       	std	Y+2, r19	; 0x02
 6fc:	4b 83       	std	Y+3, r20	; 0x03
 6fe:	5c 83       	std	Y+4, r21	; 0x04

                                DecimalDigitsCount--;
 700:	01 50       	subi	r16, 0x01	; 1
                            //Using IntegerResultPart for safety
                            IntegerResultPart = FloatResultPart;

                            vid_ReverseInteger(&IntegerResultPart);
                            
                            while (DecimalDigitsCount)
 702:	01 11       	cpse	r16, r1
 704:	de cf       	rjmp	.-68     	; 0x6c2 <__EEPROM_REGION_LENGTH__+0x2c2>
 706:	04 c0       	rjmp	.+8      	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
                            }

                            //To Print any lost zeroes when the num was reversed
                            while(DecimalDigitsCount)
                            {
                                LCD_PutChar('0');
 708:	80 e3       	ldi	r24, 0x30	; 48
 70a:	0e 94 99 04 	call	0x932	; 0x932 <LCD_PutChar>

                                DecimalDigitsCount--;
 70e:	01 50       	subi	r16, 0x01	; 1

                                DecimalDigitsCount--;
                            }

                            //To Print any lost zeroes when the num was reversed
                            while(DecimalDigitsCount)
 710:	01 11       	cpse	r16, r1
 712:	fa cf       	rjmp	.-12     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
                        break;
                    }
 
                }

                CurrentState = CALCULATOR_CLEAR_RESULT;
 714:	05 e0       	ldi	r16, 0x05	; 5
 716:	7a cd       	rjmp	.-1292   	; 0x20c <Calculator+0x18>
            }
        
            case CALCULATOR_CLEAR_RESULT:
            {

                KeyPressed = keypad_scan();
 718:	0e 94 9c 03 	call	0x738	; 0x738 <keypad_scan>

                if ( KeyPressed == '*' )
 71c:	8a 32       	cpi	r24, 0x2A	; 42
 71e:	09 f0       	breq	.+2      	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 720:	75 cd       	rjmp	.-1302   	; 0x20c <Calculator+0x18>
                {

                    LCD_Clear();
 722:	0e 94 86 04 	call	0x90c	; 0x90c <LCD_Clear>

                    CurrentState = CALCULATOR_FIRST_DIGIT;
 726:	00 e0       	ldi	r16, 0x00	; 0
 728:	71 cd       	rjmp	.-1310   	; 0x20c <Calculator+0x18>

0000072a <main>:
#define F_CPU 16000000UL

int main(void)
{
	
	CalculatorInitialzie();
 72a:	0e 94 53 00 	call	0xa6	; 0xa6 <CalculatorInitialzie>

	Calculator();
 72e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Calculator>
	
}
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	08 95       	ret

00000738 <keypad_scan>:

char KeyStatus [4][4] =  {NOT_PRESSED};

char keypad_scan()
{
	INPUT_PORT_DIRECTION &=~0xFF;//rows as inputs
 738:	87 b1       	in	r24, 0x07	; 7
 73a:	17 b8       	out	0x07, r1	; 7
	OUTPUT_PORT_DIRECTION &=~0xFF;//columns
 73c:	84 b1       	in	r24, 0x04	; 4
 73e:	14 b8       	out	0x04, r1	; 4

	//Activating Pull up resistor for PORTC 0:3
	INPUR_PORT |= 0xFF;
 740:	88 b1       	in	r24, 0x08	; 8
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	88 b9       	out	0x08, r24	; 8
	
	for(int i=0; i<4; i++)
 746:	40 e0       	ldi	r20, 0x00	; 0
 748:	50 e0       	ldi	r21, 0x00	; 0
 74a:	4e c0       	rjmp	.+156    	; 0x7e8 <keypad_scan+0xb0>
	{
		OUTPUT_PORT_DIRECTION |= (1 << i);
 74c:	24 b1       	in	r18, 0x04	; 4
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	04 2e       	mov	r0, r20
 754:	02 c0       	rjmp	.+4      	; 0x75a <keypad_scan+0x22>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	0a 94       	dec	r0
 75c:	e2 f7       	brpl	.-8      	; 0x756 <keypad_scan+0x1e>
 75e:	92 2f       	mov	r25, r18
 760:	98 2b       	or	r25, r24
 762:	94 b9       	out	0x04, r25	; 4
		OUTPUT_PORT &= ~(1<<i); // Moves on the columns and puts 0 according to the turn
 764:	95 b1       	in	r25, 0x05	; 5
 766:	80 95       	com	r24
 768:	89 23       	and	r24, r25
 76a:	85 b9       	out	0x05, r24	; 5
		
		for(int j=0; j<4; j++)
 76c:	20 e0       	ldi	r18, 0x00	; 0
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	34 c0       	rjmp	.+104    	; 0x7da <keypad_scan+0xa2>
		{
			if( ((INPUT_PIN & (1 << j)) == 0) ) // checks if input from rows is also 0 (Active Low)
 772:	86 b1       	in	r24, 0x06	; 6
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	02 2e       	mov	r0, r18
 778:	02 c0       	rjmp	.+4      	; 0x77e <keypad_scan+0x46>
 77a:	95 95       	asr	r25
 77c:	87 95       	ror	r24
 77e:	0a 94       	dec	r0
 780:	e2 f7       	brpl	.-8      	; 0x77a <keypad_scan+0x42>
 782:	80 fd       	sbrc	r24, 0
 784:	1e c0       	rjmp	.+60     	; 0x7c2 <keypad_scan+0x8a>
			{
				if(KeyStatus[j][i] == NOT_PRESSED)
 786:	f9 01       	movw	r30, r18
 788:	ee 0f       	add	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	e0 5f       	subi	r30, 0xF0	; 240
 792:	fe 4f       	sbci	r31, 0xFE	; 254
 794:	e4 0f       	add	r30, r20
 796:	f5 1f       	adc	r31, r21
 798:	80 81       	ld	r24, Z
 79a:	81 11       	cpse	r24, r1
 79c:	1c c0       	rjmp	.+56     	; 0x7d6 <keypad_scan+0x9e>

					// debounce(j);
					
					// while(button == 0) debounce(j); //handling long press on key in the function
					
					KeyStatus[j][i]  = PRESSED;
 79e:	22 0f       	add	r18, r18
 7a0:	33 1f       	adc	r19, r19
 7a2:	22 0f       	add	r18, r18
 7a4:	33 1f       	adc	r19, r19
 7a6:	f9 01       	movw	r30, r18
 7a8:	e0 5f       	subi	r30, 0xF0	; 240
 7aa:	fe 4f       	sbci	r31, 0xFE	; 254
 7ac:	e4 0f       	add	r30, r20
 7ae:	f5 1f       	adc	r31, r21
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	80 83       	st	Z, r24
					
					return key[j][i];
 7b4:	20 50       	subi	r18, 0x00	; 0
 7b6:	3f 4f       	sbci	r19, 0xFF	; 255
 7b8:	f9 01       	movw	r30, r18
 7ba:	e4 0f       	add	r30, r20
 7bc:	f5 1f       	adc	r31, r21
 7be:	80 81       	ld	r24, Z
 7c0:	08 95       	ret
				
			}
			else
			{

				KeyStatus[j][i]  = NOT_PRESSED;
 7c2:	f9 01       	movw	r30, r18
 7c4:	ee 0f       	add	r30, r30
 7c6:	ff 1f       	adc	r31, r31
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	e0 5f       	subi	r30, 0xF0	; 240
 7ce:	fe 4f       	sbci	r31, 0xFE	; 254
 7d0:	e4 0f       	add	r30, r20
 7d2:	f5 1f       	adc	r31, r21
 7d4:	10 82       	st	Z, r1
	for(int i=0; i<4; i++)
	{
		OUTPUT_PORT_DIRECTION |= (1 << i);
		OUTPUT_PORT &= ~(1<<i); // Moves on the columns and puts 0 according to the turn
		
		for(int j=0; j<4; j++)
 7d6:	2f 5f       	subi	r18, 0xFF	; 255
 7d8:	3f 4f       	sbci	r19, 0xFF	; 255
 7da:	24 30       	cpi	r18, 0x04	; 4
 7dc:	31 05       	cpc	r19, r1
 7de:	4c f2       	brlt	.-110    	; 0x772 <keypad_scan+0x3a>
				
			}
			
		}
		
		OUTPUT_PORT_DIRECTION &= ~0xFF; // Resets all port output to 1
 7e0:	84 b1       	in	r24, 0x04	; 4
 7e2:	14 b8       	out	0x04, r1	; 4
	OUTPUT_PORT_DIRECTION &=~0xFF;//columns

	//Activating Pull up resistor for PORTC 0:3
	INPUR_PORT |= 0xFF;
	
	for(int i=0; i<4; i++)
 7e4:	4f 5f       	subi	r20, 0xFF	; 255
 7e6:	5f 4f       	sbci	r21, 0xFF	; 255
 7e8:	44 30       	cpi	r20, 0x04	; 4
 7ea:	51 05       	cpc	r21, r1
 7ec:	0c f4       	brge	.+2      	; 0x7f0 <keypad_scan+0xb8>
 7ee:	ae cf       	rjmp	.-164    	; 0x74c <keypad_scan+0x14>
		
		OUTPUT_PORT_DIRECTION &= ~0xFF; // Resets all port output to 1
		
	}
	
	return KEYPAD_DEFAULT_VALUE; // clear the buffer key press to avoid condition mishandling 
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	08 95       	ret

000007f4 <lcd_reset>:
char columnCount;
char lastPOSx;

void lcd_reset()
{
	    lcd_port_dir=0XFF;
 7f4:	8f ef       	ldi	r24, 0xFF	; 255
 7f6:	8a b9       	out	0x0a, r24	; 10
        lcd_port = 0xFF;
 7f8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7fa:	2f ef       	ldi	r18, 0xFF	; 255
 7fc:	89 ef       	ldi	r24, 0xF9	; 249
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	21 50       	subi	r18, 0x01	; 1
 802:	80 40       	sbci	r24, 0x00	; 0
 804:	90 40       	sbci	r25, 0x00	; 0
 806:	e1 f7       	brne	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
 808:	00 c0       	rjmp	.+0      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 80a:	00 00       	nop
        _delay_ms(20);
        lcd_port = 0x03+LCD_EN;
 80c:	93 e8       	ldi	r25, 0x83	; 131
 80e:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	8b b9       	out	0x0b, r24	; 11
 814:	ef e3       	ldi	r30, 0x3F	; 63
 816:	fc e9       	ldi	r31, 0x9C	; 156
 818:	31 97       	sbiw	r30, 0x01	; 1
 81a:	f1 f7       	brne	.-4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81e:	00 00       	nop
        _delay_ms(10);
        lcd_port = 0x03+LCD_EN;
 820:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
 822:	8b b9       	out	0x0b, r24	; 11
 824:	ef e9       	ldi	r30, 0x9F	; 159
 826:	ff e0       	ldi	r31, 0x0F	; 15
 828:	31 97       	sbiw	r30, 0x01	; 1
 82a:	f1 f7       	brne	.-4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 82e:	00 00       	nop
        _delay_ms(1);
        lcd_port = 0x03+LCD_EN;
 830:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
 832:	8b b9       	out	0x0b, r24	; 11
 834:	8f e9       	ldi	r24, 0x9F	; 159
 836:	9f e0       	ldi	r25, 0x0F	; 15
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	f1 f7       	brne	.-4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83e:	00 00       	nop
        _delay_ms(1);
        lcd_port = 0x02+LCD_EN;
 840:	82 e8       	ldi	r24, 0x82	; 130
 842:	8b b9       	out	0x0b, r24	; 11
        lcd_port = 0x02;
 844:	82 e0       	ldi	r24, 0x02	; 2
 846:	8b b9       	out	0x0b, r24	; 11
 848:	ef e9       	ldi	r30, 0x9F	; 159
 84a:	ff e0       	ldi	r31, 0x0F	; 15
 84c:	31 97       	sbiw	r30, 0x01	; 1
 84e:	f1 f7       	brne	.-4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 850:	00 c0       	rjmp	.+0      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 852:	00 00       	nop
 854:	08 95       	ret

00000856 <lcd_cmd>:
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 void lcd_cmd (char cmd)
{
        lcd_port = ((cmd >> 4) & 0x0F)|LCD_EN;
 856:	98 2f       	mov	r25, r24
 858:	92 95       	swap	r25
 85a:	9f 70       	andi	r25, 0x0F	; 15
 85c:	29 2f       	mov	r18, r25
 85e:	20 68       	ori	r18, 0x80	; 128
 860:	2b b9       	out	0x0b, r18	; 11
        lcd_port = ((cmd >> 4) & 0x0F);
 862:	9b b9       	out	0x0b, r25	; 11

        lcd_port = (cmd & 0x0F)|LCD_EN;
 864:	8f 70       	andi	r24, 0x0F	; 15
 866:	98 2f       	mov	r25, r24
 868:	90 68       	ori	r25, 0x80	; 128
 86a:	9b b9       	out	0x0b, r25	; 11
        lcd_port = (cmd & 0x0F);
 86c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 86e:	8f e1       	ldi	r24, 0x1F	; 31
 870:	93 e0       	ldi	r25, 0x03	; 3
 872:	01 97       	sbiw	r24, 0x01	; 1
 874:	f1 f7       	brne	.-4      	; 0x872 <lcd_cmd+0x1c>
 876:	00 c0       	rjmp	.+0      	; 0x878 <lcd_cmd+0x22>
 878:	00 00       	nop
 87a:	8f e1       	ldi	r24, 0x1F	; 31
 87c:	93 e0       	ldi	r25, 0x03	; 3
 87e:	01 97       	sbiw	r24, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <lcd_cmd+0x28>
 882:	00 c0       	rjmp	.+0      	; 0x884 <lcd_cmd+0x2e>
 884:	00 00       	nop
 886:	08 95       	ret

00000888 <LCD_Init>:
        _delay_ms(1);
}

void LCD_Init(void)
{
	columnCount= 16;
 888:	80 e1       	ldi	r24, 0x10	; 16
 88a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <columnCount>
	lastPOSx=0;
 88e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <lastPOSx>
        lcd_reset();         // Call LCD reset
 892:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <lcd_reset>
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font. 
 896:	88 e2       	ldi	r24, 0x28	; 40
 898:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_cmd>
        lcd_cmd(0x0c);       // Display no cursor - no blink.
 89c:	8c e0       	ldi	r24, 0x0C	; 12
 89e:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_cmd>
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
 8a2:	86 e0       	ldi	r24, 0x06	; 6
 8a4:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_cmd>
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 8a8:	80 e8       	ldi	r24, 0x80	; 128
 8aa:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_cmd>
 8ae:	08 95       	ret

000008b0 <lcd_data>:
}

//Print character
void lcd_data (unsigned char dat)
{
        lcd_port = (((dat >> 4) & 0x0F)|LCD_EN|LCD_RS);
 8b0:	98 2f       	mov	r25, r24
 8b2:	92 95       	swap	r25
 8b4:	9f 70       	andi	r25, 0x0F	; 15
 8b6:	29 2f       	mov	r18, r25
 8b8:	20 6a       	ori	r18, 0xA0	; 160
 8ba:	2b b9       	out	0x0b, r18	; 11
        lcd_port = (((dat >> 4) & 0x0F)|LCD_RS);
 8bc:	90 62       	ori	r25, 0x20	; 32
 8be:	9b b9       	out	0x0b, r25	; 11
       
        lcd_port = ((dat & 0x0F)|LCD_EN|LCD_RS);
 8c0:	8f 70       	andi	r24, 0x0F	; 15
 8c2:	98 2f       	mov	r25, r24
 8c4:	90 6a       	ori	r25, 0xA0	; 160
 8c6:	9b b9       	out	0x0b, r25	; 11
        lcd_port = ((dat & 0x0F)|LCD_RS);
 8c8:	80 62       	ori	r24, 0x20	; 32
 8ca:	8b b9       	out	0x0b, r24	; 11
 8cc:	8f e1       	ldi	r24, 0x1F	; 31
 8ce:	93 e0       	ldi	r25, 0x03	; 3
 8d0:	01 97       	sbiw	r24, 0x01	; 1
 8d2:	f1 f7       	brne	.-4      	; 0x8d0 <lcd_data+0x20>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <lcd_data+0x26>
 8d6:	00 00       	nop
 8d8:	8f e1       	ldi	r24, 0x1F	; 31
 8da:	93 e0       	ldi	r25, 0x03	; 3
 8dc:	01 97       	sbiw	r24, 0x01	; 1
 8de:	f1 f7       	brne	.-4      	; 0x8dc <lcd_data+0x2c>
 8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <lcd_data+0x32>
 8e2:	00 00       	nop
 8e4:	08 95       	ret

000008e6 <LCD_GoToXY>:
}

//Go to Location
void LCD_GoToXY(char posX,char posY)
{
    if (posX==0 ) 
 8e6:	81 11       	cpse	r24, r1
 8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <LCD_GoToXY+0xe>
        lcd_cmd((1<<7)+0x00+posY);
 8ea:	80 e8       	ldi	r24, 0x80	; 128
 8ec:	86 0f       	add	r24, r22
 8ee:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_cmd>
 8f2:	07 c0       	rjmp	.+14     	; 0x902 <__stack+0x3>
    else
	{
        lcd_cmd((1<<7)+0x40+posY);
 8f4:	80 ec       	ldi	r24, 0xC0	; 192
 8f6:	86 0f       	add	r24, r22
 8f8:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_cmd>
	lastPOSx=1;
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <lastPOSx>
 902:	85 ed       	ldi	r24, 0xD5	; 213
 904:	8a 95       	dec	r24
 906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0x5>
 908:	00 00       	nop
 90a:	08 95       	ret

0000090c <LCD_Clear>:
}

//Clears Page
void LCD_Clear(void)
{
	lcd_cmd(0x01);
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 912:	8f e3       	ldi	r24, 0x3F	; 63
 914:	9f e1       	ldi	r25, 0x1F	; 31
 916:	01 97       	sbiw	r24, 0x01	; 1
 918:	f1 f7       	brne	.-4      	; 0x916 <LCD_Clear+0xa>
 91a:	00 c0       	rjmp	.+0      	; 0x91c <LCD_Clear+0x10>
 91c:	00 00       	nop
	_delay_ms(2);
	lcd_cmd(0x02);
 91e:	82 e0       	ldi	r24, 0x02	; 2
 920:	0e 94 2b 04 	call	0x856	; 0x856 <lcd_cmd>
 924:	8f e3       	ldi	r24, 0x3F	; 63
 926:	9f e1       	ldi	r25, 0x1F	; 31
 928:	01 97       	sbiw	r24, 0x01	; 1
 92a:	f1 f7       	brne	.-4      	; 0x928 <LCD_Clear+0x1c>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <LCD_Clear+0x22>
 92e:	00 00       	nop
 930:	08 95       	ret

00000932 <LCD_PutChar>:
}

//Prints Char
void LCD_PutChar(unsigned char data)
{
	lcd_data(data);
 932:	0e 94 58 04 	call	0x8b0	; 0x8b0 <lcd_data>
 936:	08 95       	ret

00000938 <__subsf3>:
 938:	50 58       	subi	r21, 0x80	; 128

0000093a <__addsf3>:
 93a:	bb 27       	eor	r27, r27
 93c:	aa 27       	eor	r26, r26
 93e:	0e 94 b4 04 	call	0x968	; 0x968 <__addsf3x>
 942:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_round>
 946:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscA>
 94a:	38 f0       	brcs	.+14     	; 0x95a <__addsf3+0x20>
 94c:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_pscB>
 950:	20 f0       	brcs	.+8      	; 0x95a <__addsf3+0x20>
 952:	39 f4       	brne	.+14     	; 0x962 <__addsf3+0x28>
 954:	9f 3f       	cpi	r25, 0xFF	; 255
 956:	19 f4       	brne	.+6      	; 0x95e <__addsf3+0x24>
 958:	26 f4       	brtc	.+8      	; 0x962 <__addsf3+0x28>
 95a:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_nan>
 95e:	0e f4       	brtc	.+2      	; 0x962 <__addsf3+0x28>
 960:	e0 95       	com	r30
 962:	e7 fb       	bst	r30, 7
 964:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_inf>

00000968 <__addsf3x>:
 968:	e9 2f       	mov	r30, r25
 96a:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_split3>
 96e:	58 f3       	brcs	.-42     	; 0x946 <__addsf3+0xc>
 970:	ba 17       	cp	r27, r26
 972:	62 07       	cpc	r22, r18
 974:	73 07       	cpc	r23, r19
 976:	84 07       	cpc	r24, r20
 978:	95 07       	cpc	r25, r21
 97a:	20 f0       	brcs	.+8      	; 0x984 <__addsf3x+0x1c>
 97c:	79 f4       	brne	.+30     	; 0x99c <__addsf3x+0x34>
 97e:	a6 f5       	brtc	.+104    	; 0x9e8 <__addsf3x+0x80>
 980:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_zero>
 984:	0e f4       	brtc	.+2      	; 0x988 <__addsf3x+0x20>
 986:	e0 95       	com	r30
 988:	0b 2e       	mov	r0, r27
 98a:	ba 2f       	mov	r27, r26
 98c:	a0 2d       	mov	r26, r0
 98e:	0b 01       	movw	r0, r22
 990:	b9 01       	movw	r22, r18
 992:	90 01       	movw	r18, r0
 994:	0c 01       	movw	r0, r24
 996:	ca 01       	movw	r24, r20
 998:	a0 01       	movw	r20, r0
 99a:	11 24       	eor	r1, r1
 99c:	ff 27       	eor	r31, r31
 99e:	59 1b       	sub	r21, r25
 9a0:	99 f0       	breq	.+38     	; 0x9c8 <__addsf3x+0x60>
 9a2:	59 3f       	cpi	r21, 0xF9	; 249
 9a4:	50 f4       	brcc	.+20     	; 0x9ba <__addsf3x+0x52>
 9a6:	50 3e       	cpi	r21, 0xE0	; 224
 9a8:	68 f1       	brcs	.+90     	; 0xa04 <__addsf3x+0x9c>
 9aa:	1a 16       	cp	r1, r26
 9ac:	f0 40       	sbci	r31, 0x00	; 0
 9ae:	a2 2f       	mov	r26, r18
 9b0:	23 2f       	mov	r18, r19
 9b2:	34 2f       	mov	r19, r20
 9b4:	44 27       	eor	r20, r20
 9b6:	58 5f       	subi	r21, 0xF8	; 248
 9b8:	f3 cf       	rjmp	.-26     	; 0x9a0 <__addsf3x+0x38>
 9ba:	46 95       	lsr	r20
 9bc:	37 95       	ror	r19
 9be:	27 95       	ror	r18
 9c0:	a7 95       	ror	r26
 9c2:	f0 40       	sbci	r31, 0x00	; 0
 9c4:	53 95       	inc	r21
 9c6:	c9 f7       	brne	.-14     	; 0x9ba <__addsf3x+0x52>
 9c8:	7e f4       	brtc	.+30     	; 0x9e8 <__addsf3x+0x80>
 9ca:	1f 16       	cp	r1, r31
 9cc:	ba 0b       	sbc	r27, r26
 9ce:	62 0b       	sbc	r22, r18
 9d0:	73 0b       	sbc	r23, r19
 9d2:	84 0b       	sbc	r24, r20
 9d4:	ba f0       	brmi	.+46     	; 0xa04 <__addsf3x+0x9c>
 9d6:	91 50       	subi	r25, 0x01	; 1
 9d8:	a1 f0       	breq	.+40     	; 0xa02 <__addsf3x+0x9a>
 9da:	ff 0f       	add	r31, r31
 9dc:	bb 1f       	adc	r27, r27
 9de:	66 1f       	adc	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	c2 f7       	brpl	.-16     	; 0x9d6 <__addsf3x+0x6e>
 9e6:	0e c0       	rjmp	.+28     	; 0xa04 <__addsf3x+0x9c>
 9e8:	ba 0f       	add	r27, r26
 9ea:	62 1f       	adc	r22, r18
 9ec:	73 1f       	adc	r23, r19
 9ee:	84 1f       	adc	r24, r20
 9f0:	48 f4       	brcc	.+18     	; 0xa04 <__addsf3x+0x9c>
 9f2:	87 95       	ror	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b7 95       	ror	r27
 9fa:	f7 95       	ror	r31
 9fc:	9e 3f       	cpi	r25, 0xFE	; 254
 9fe:	08 f0       	brcs	.+2      	; 0xa02 <__addsf3x+0x9a>
 a00:	b0 cf       	rjmp	.-160    	; 0x962 <__addsf3+0x28>
 a02:	93 95       	inc	r25
 a04:	88 0f       	add	r24, r24
 a06:	08 f0       	brcs	.+2      	; 0xa0a <__addsf3x+0xa2>
 a08:	99 27       	eor	r25, r25
 a0a:	ee 0f       	add	r30, r30
 a0c:	97 95       	ror	r25
 a0e:	87 95       	ror	r24
 a10:	08 95       	ret

00000a12 <__cmpsf2>:
 a12:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__fp_cmp>
 a16:	08 f4       	brcc	.+2      	; 0xa1a <__cmpsf2+0x8>
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	08 95       	ret

00000a1c <__divsf3>:
 a1c:	0e 94 22 05 	call	0xa44	; 0xa44 <__divsf3x>
 a20:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_round>
 a24:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_pscB>
 a28:	58 f0       	brcs	.+22     	; 0xa40 <__divsf3+0x24>
 a2a:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscA>
 a2e:	40 f0       	brcs	.+16     	; 0xa40 <__divsf3+0x24>
 a30:	29 f4       	brne	.+10     	; 0xa3c <__divsf3+0x20>
 a32:	5f 3f       	cpi	r21, 0xFF	; 255
 a34:	29 f0       	breq	.+10     	; 0xa40 <__divsf3+0x24>
 a36:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_inf>
 a3a:	51 11       	cpse	r21, r1
 a3c:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_szero>
 a40:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_nan>

00000a44 <__divsf3x>:
 a44:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_split3>
 a48:	68 f3       	brcs	.-38     	; 0xa24 <__divsf3+0x8>

00000a4a <__divsf3_pse>:
 a4a:	99 23       	and	r25, r25
 a4c:	b1 f3       	breq	.-20     	; 0xa3a <__divsf3+0x1e>
 a4e:	55 23       	and	r21, r21
 a50:	91 f3       	breq	.-28     	; 0xa36 <__divsf3+0x1a>
 a52:	95 1b       	sub	r25, r21
 a54:	55 0b       	sbc	r21, r21
 a56:	bb 27       	eor	r27, r27
 a58:	aa 27       	eor	r26, r26
 a5a:	62 17       	cp	r22, r18
 a5c:	73 07       	cpc	r23, r19
 a5e:	84 07       	cpc	r24, r20
 a60:	38 f0       	brcs	.+14     	; 0xa70 <__divsf3_pse+0x26>
 a62:	9f 5f       	subi	r25, 0xFF	; 255
 a64:	5f 4f       	sbci	r21, 0xFF	; 255
 a66:	22 0f       	add	r18, r18
 a68:	33 1f       	adc	r19, r19
 a6a:	44 1f       	adc	r20, r20
 a6c:	aa 1f       	adc	r26, r26
 a6e:	a9 f3       	breq	.-22     	; 0xa5a <__divsf3_pse+0x10>
 a70:	35 d0       	rcall	.+106    	; 0xadc <__divsf3_pse+0x92>
 a72:	0e 2e       	mov	r0, r30
 a74:	3a f0       	brmi	.+14     	; 0xa84 <__divsf3_pse+0x3a>
 a76:	e0 e8       	ldi	r30, 0x80	; 128
 a78:	32 d0       	rcall	.+100    	; 0xade <__divsf3_pse+0x94>
 a7a:	91 50       	subi	r25, 0x01	; 1
 a7c:	50 40       	sbci	r21, 0x00	; 0
 a7e:	e6 95       	lsr	r30
 a80:	00 1c       	adc	r0, r0
 a82:	ca f7       	brpl	.-14     	; 0xa76 <__divsf3_pse+0x2c>
 a84:	2b d0       	rcall	.+86     	; 0xadc <__divsf3_pse+0x92>
 a86:	fe 2f       	mov	r31, r30
 a88:	29 d0       	rcall	.+82     	; 0xadc <__divsf3_pse+0x92>
 a8a:	66 0f       	add	r22, r22
 a8c:	77 1f       	adc	r23, r23
 a8e:	88 1f       	adc	r24, r24
 a90:	bb 1f       	adc	r27, r27
 a92:	26 17       	cp	r18, r22
 a94:	37 07       	cpc	r19, r23
 a96:	48 07       	cpc	r20, r24
 a98:	ab 07       	cpc	r26, r27
 a9a:	b0 e8       	ldi	r27, 0x80	; 128
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <__divsf3_pse+0x56>
 a9e:	bb 0b       	sbc	r27, r27
 aa0:	80 2d       	mov	r24, r0
 aa2:	bf 01       	movw	r22, r30
 aa4:	ff 27       	eor	r31, r31
 aa6:	93 58       	subi	r25, 0x83	; 131
 aa8:	5f 4f       	sbci	r21, 0xFF	; 255
 aaa:	3a f0       	brmi	.+14     	; 0xaba <__divsf3_pse+0x70>
 aac:	9e 3f       	cpi	r25, 0xFE	; 254
 aae:	51 05       	cpc	r21, r1
 ab0:	78 f0       	brcs	.+30     	; 0xad0 <__divsf3_pse+0x86>
 ab2:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_inf>
 ab6:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_szero>
 aba:	5f 3f       	cpi	r21, 0xFF	; 255
 abc:	e4 f3       	brlt	.-8      	; 0xab6 <__divsf3_pse+0x6c>
 abe:	98 3e       	cpi	r25, 0xE8	; 232
 ac0:	d4 f3       	brlt	.-12     	; 0xab6 <__divsf3_pse+0x6c>
 ac2:	86 95       	lsr	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	b7 95       	ror	r27
 aca:	f7 95       	ror	r31
 acc:	9f 5f       	subi	r25, 0xFF	; 255
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__divsf3_pse+0x78>
 ad0:	88 0f       	add	r24, r24
 ad2:	91 1d       	adc	r25, r1
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	97 f9       	bld	r25, 7
 ada:	08 95       	ret
 adc:	e1 e0       	ldi	r30, 0x01	; 1
 ade:	66 0f       	add	r22, r22
 ae0:	77 1f       	adc	r23, r23
 ae2:	88 1f       	adc	r24, r24
 ae4:	bb 1f       	adc	r27, r27
 ae6:	62 17       	cp	r22, r18
 ae8:	73 07       	cpc	r23, r19
 aea:	84 07       	cpc	r24, r20
 aec:	ba 07       	cpc	r27, r26
 aee:	20 f0       	brcs	.+8      	; 0xaf8 <__divsf3_pse+0xae>
 af0:	62 1b       	sub	r22, r18
 af2:	73 0b       	sbc	r23, r19
 af4:	84 0b       	sbc	r24, r20
 af6:	ba 0b       	sbc	r27, r26
 af8:	ee 1f       	adc	r30, r30
 afa:	88 f7       	brcc	.-30     	; 0xade <__divsf3_pse+0x94>
 afc:	e0 95       	com	r30
 afe:	08 95       	ret

00000b00 <__fixunssfsi>:
 b00:	0e 94 40 06 	call	0xc80	; 0xc80 <__fp_splitA>
 b04:	88 f0       	brcs	.+34     	; 0xb28 <__fixunssfsi+0x28>
 b06:	9f 57       	subi	r25, 0x7F	; 127
 b08:	98 f0       	brcs	.+38     	; 0xb30 <__fixunssfsi+0x30>
 b0a:	b9 2f       	mov	r27, r25
 b0c:	99 27       	eor	r25, r25
 b0e:	b7 51       	subi	r27, 0x17	; 23
 b10:	b0 f0       	brcs	.+44     	; 0xb3e <__fixunssfsi+0x3e>
 b12:	e1 f0       	breq	.+56     	; 0xb4c <__fixunssfsi+0x4c>
 b14:	66 0f       	add	r22, r22
 b16:	77 1f       	adc	r23, r23
 b18:	88 1f       	adc	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	1a f0       	brmi	.+6      	; 0xb24 <__fixunssfsi+0x24>
 b1e:	ba 95       	dec	r27
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__fixunssfsi+0x14>
 b22:	14 c0       	rjmp	.+40     	; 0xb4c <__fixunssfsi+0x4c>
 b24:	b1 30       	cpi	r27, 0x01	; 1
 b26:	91 f0       	breq	.+36     	; 0xb4c <__fixunssfsi+0x4c>
 b28:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__fp_zero>
 b2c:	b1 e0       	ldi	r27, 0x01	; 1
 b2e:	08 95       	ret
 b30:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_zero>
 b34:	67 2f       	mov	r22, r23
 b36:	78 2f       	mov	r23, r24
 b38:	88 27       	eor	r24, r24
 b3a:	b8 5f       	subi	r27, 0xF8	; 248
 b3c:	39 f0       	breq	.+14     	; 0xb4c <__fixunssfsi+0x4c>
 b3e:	b9 3f       	cpi	r27, 0xF9	; 249
 b40:	cc f3       	brlt	.-14     	; 0xb34 <__fixunssfsi+0x34>
 b42:	86 95       	lsr	r24
 b44:	77 95       	ror	r23
 b46:	67 95       	ror	r22
 b48:	b3 95       	inc	r27
 b4a:	d9 f7       	brne	.-10     	; 0xb42 <__fixunssfsi+0x42>
 b4c:	3e f4       	brtc	.+14     	; 0xb5c <__fixunssfsi+0x5c>
 b4e:	90 95       	com	r25
 b50:	80 95       	com	r24
 b52:	70 95       	com	r23
 b54:	61 95       	neg	r22
 b56:	7f 4f       	sbci	r23, 0xFF	; 255
 b58:	8f 4f       	sbci	r24, 0xFF	; 255
 b5a:	9f 4f       	sbci	r25, 0xFF	; 255
 b5c:	08 95       	ret

00000b5e <__floatunsisf>:
 b5e:	e8 94       	clt
 b60:	09 c0       	rjmp	.+18     	; 0xb74 <__floatsisf+0x12>

00000b62 <__floatsisf>:
 b62:	97 fb       	bst	r25, 7
 b64:	3e f4       	brtc	.+14     	; 0xb74 <__floatsisf+0x12>
 b66:	90 95       	com	r25
 b68:	80 95       	com	r24
 b6a:	70 95       	com	r23
 b6c:	61 95       	neg	r22
 b6e:	7f 4f       	sbci	r23, 0xFF	; 255
 b70:	8f 4f       	sbci	r24, 0xFF	; 255
 b72:	9f 4f       	sbci	r25, 0xFF	; 255
 b74:	99 23       	and	r25, r25
 b76:	a9 f0       	breq	.+42     	; 0xba2 <__floatsisf+0x40>
 b78:	f9 2f       	mov	r31, r25
 b7a:	96 e9       	ldi	r25, 0x96	; 150
 b7c:	bb 27       	eor	r27, r27
 b7e:	93 95       	inc	r25
 b80:	f6 95       	lsr	r31
 b82:	87 95       	ror	r24
 b84:	77 95       	ror	r23
 b86:	67 95       	ror	r22
 b88:	b7 95       	ror	r27
 b8a:	f1 11       	cpse	r31, r1
 b8c:	f8 cf       	rjmp	.-16     	; 0xb7e <__floatsisf+0x1c>
 b8e:	fa f4       	brpl	.+62     	; 0xbce <__floatsisf+0x6c>
 b90:	bb 0f       	add	r27, r27
 b92:	11 f4       	brne	.+4      	; 0xb98 <__floatsisf+0x36>
 b94:	60 ff       	sbrs	r22, 0
 b96:	1b c0       	rjmp	.+54     	; 0xbce <__floatsisf+0x6c>
 b98:	6f 5f       	subi	r22, 0xFF	; 255
 b9a:	7f 4f       	sbci	r23, 0xFF	; 255
 b9c:	8f 4f       	sbci	r24, 0xFF	; 255
 b9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ba0:	16 c0       	rjmp	.+44     	; 0xbce <__floatsisf+0x6c>
 ba2:	88 23       	and	r24, r24
 ba4:	11 f0       	breq	.+4      	; 0xbaa <__floatsisf+0x48>
 ba6:	96 e9       	ldi	r25, 0x96	; 150
 ba8:	11 c0       	rjmp	.+34     	; 0xbcc <__floatsisf+0x6a>
 baa:	77 23       	and	r23, r23
 bac:	21 f0       	breq	.+8      	; 0xbb6 <__floatsisf+0x54>
 bae:	9e e8       	ldi	r25, 0x8E	; 142
 bb0:	87 2f       	mov	r24, r23
 bb2:	76 2f       	mov	r23, r22
 bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <__floatsisf+0x5e>
 bb6:	66 23       	and	r22, r22
 bb8:	71 f0       	breq	.+28     	; 0xbd6 <__floatsisf+0x74>
 bba:	96 e8       	ldi	r25, 0x86	; 134
 bbc:	86 2f       	mov	r24, r22
 bbe:	70 e0       	ldi	r23, 0x00	; 0
 bc0:	60 e0       	ldi	r22, 0x00	; 0
 bc2:	2a f0       	brmi	.+10     	; 0xbce <__floatsisf+0x6c>
 bc4:	9a 95       	dec	r25
 bc6:	66 0f       	add	r22, r22
 bc8:	77 1f       	adc	r23, r23
 bca:	88 1f       	adc	r24, r24
 bcc:	da f7       	brpl	.-10     	; 0xbc4 <__floatsisf+0x62>
 bce:	88 0f       	add	r24, r24
 bd0:	96 95       	lsr	r25
 bd2:	87 95       	ror	r24
 bd4:	97 f9       	bld	r25, 7
 bd6:	08 95       	ret

00000bd8 <__fp_cmp>:
 bd8:	99 0f       	add	r25, r25
 bda:	00 08       	sbc	r0, r0
 bdc:	55 0f       	add	r21, r21
 bde:	aa 0b       	sbc	r26, r26
 be0:	e0 e8       	ldi	r30, 0x80	; 128
 be2:	fe ef       	ldi	r31, 0xFE	; 254
 be4:	16 16       	cp	r1, r22
 be6:	17 06       	cpc	r1, r23
 be8:	e8 07       	cpc	r30, r24
 bea:	f9 07       	cpc	r31, r25
 bec:	c0 f0       	brcs	.+48     	; 0xc1e <__fp_cmp+0x46>
 bee:	12 16       	cp	r1, r18
 bf0:	13 06       	cpc	r1, r19
 bf2:	e4 07       	cpc	r30, r20
 bf4:	f5 07       	cpc	r31, r21
 bf6:	98 f0       	brcs	.+38     	; 0xc1e <__fp_cmp+0x46>
 bf8:	62 1b       	sub	r22, r18
 bfa:	73 0b       	sbc	r23, r19
 bfc:	84 0b       	sbc	r24, r20
 bfe:	95 0b       	sbc	r25, r21
 c00:	39 f4       	brne	.+14     	; 0xc10 <__fp_cmp+0x38>
 c02:	0a 26       	eor	r0, r26
 c04:	61 f0       	breq	.+24     	; 0xc1e <__fp_cmp+0x46>
 c06:	23 2b       	or	r18, r19
 c08:	24 2b       	or	r18, r20
 c0a:	25 2b       	or	r18, r21
 c0c:	21 f4       	brne	.+8      	; 0xc16 <__fp_cmp+0x3e>
 c0e:	08 95       	ret
 c10:	0a 26       	eor	r0, r26
 c12:	09 f4       	brne	.+2      	; 0xc16 <__fp_cmp+0x3e>
 c14:	a1 40       	sbci	r26, 0x01	; 1
 c16:	a6 95       	lsr	r26
 c18:	8f ef       	ldi	r24, 0xFF	; 255
 c1a:	81 1d       	adc	r24, r1
 c1c:	81 1d       	adc	r24, r1
 c1e:	08 95       	ret

00000c20 <__fp_inf>:
 c20:	97 f9       	bld	r25, 7
 c22:	9f 67       	ori	r25, 0x7F	; 127
 c24:	80 e8       	ldi	r24, 0x80	; 128
 c26:	70 e0       	ldi	r23, 0x00	; 0
 c28:	60 e0       	ldi	r22, 0x00	; 0
 c2a:	08 95       	ret

00000c2c <__fp_nan>:
 c2c:	9f ef       	ldi	r25, 0xFF	; 255
 c2e:	80 ec       	ldi	r24, 0xC0	; 192
 c30:	08 95       	ret

00000c32 <__fp_pscA>:
 c32:	00 24       	eor	r0, r0
 c34:	0a 94       	dec	r0
 c36:	16 16       	cp	r1, r22
 c38:	17 06       	cpc	r1, r23
 c3a:	18 06       	cpc	r1, r24
 c3c:	09 06       	cpc	r0, r25
 c3e:	08 95       	ret

00000c40 <__fp_pscB>:
 c40:	00 24       	eor	r0, r0
 c42:	0a 94       	dec	r0
 c44:	12 16       	cp	r1, r18
 c46:	13 06       	cpc	r1, r19
 c48:	14 06       	cpc	r1, r20
 c4a:	05 06       	cpc	r0, r21
 c4c:	08 95       	ret

00000c4e <__fp_round>:
 c4e:	09 2e       	mov	r0, r25
 c50:	03 94       	inc	r0
 c52:	00 0c       	add	r0, r0
 c54:	11 f4       	brne	.+4      	; 0xc5a <__fp_round+0xc>
 c56:	88 23       	and	r24, r24
 c58:	52 f0       	brmi	.+20     	; 0xc6e <__fp_round+0x20>
 c5a:	bb 0f       	add	r27, r27
 c5c:	40 f4       	brcc	.+16     	; 0xc6e <__fp_round+0x20>
 c5e:	bf 2b       	or	r27, r31
 c60:	11 f4       	brne	.+4      	; 0xc66 <__fp_round+0x18>
 c62:	60 ff       	sbrs	r22, 0
 c64:	04 c0       	rjmp	.+8      	; 0xc6e <__fp_round+0x20>
 c66:	6f 5f       	subi	r22, 0xFF	; 255
 c68:	7f 4f       	sbci	r23, 0xFF	; 255
 c6a:	8f 4f       	sbci	r24, 0xFF	; 255
 c6c:	9f 4f       	sbci	r25, 0xFF	; 255
 c6e:	08 95       	ret

00000c70 <__fp_split3>:
 c70:	57 fd       	sbrc	r21, 7
 c72:	90 58       	subi	r25, 0x80	; 128
 c74:	44 0f       	add	r20, r20
 c76:	55 1f       	adc	r21, r21
 c78:	59 f0       	breq	.+22     	; 0xc90 <__fp_splitA+0x10>
 c7a:	5f 3f       	cpi	r21, 0xFF	; 255
 c7c:	71 f0       	breq	.+28     	; 0xc9a <__fp_splitA+0x1a>
 c7e:	47 95       	ror	r20

00000c80 <__fp_splitA>:
 c80:	88 0f       	add	r24, r24
 c82:	97 fb       	bst	r25, 7
 c84:	99 1f       	adc	r25, r25
 c86:	61 f0       	breq	.+24     	; 0xca0 <__fp_splitA+0x20>
 c88:	9f 3f       	cpi	r25, 0xFF	; 255
 c8a:	79 f0       	breq	.+30     	; 0xcaa <__fp_splitA+0x2a>
 c8c:	87 95       	ror	r24
 c8e:	08 95       	ret
 c90:	12 16       	cp	r1, r18
 c92:	13 06       	cpc	r1, r19
 c94:	14 06       	cpc	r1, r20
 c96:	55 1f       	adc	r21, r21
 c98:	f2 cf       	rjmp	.-28     	; 0xc7e <__fp_split3+0xe>
 c9a:	46 95       	lsr	r20
 c9c:	f1 df       	rcall	.-30     	; 0xc80 <__fp_splitA>
 c9e:	08 c0       	rjmp	.+16     	; 0xcb0 <__fp_splitA+0x30>
 ca0:	16 16       	cp	r1, r22
 ca2:	17 06       	cpc	r1, r23
 ca4:	18 06       	cpc	r1, r24
 ca6:	99 1f       	adc	r25, r25
 ca8:	f1 cf       	rjmp	.-30     	; 0xc8c <__fp_splitA+0xc>
 caa:	86 95       	lsr	r24
 cac:	71 05       	cpc	r23, r1
 cae:	61 05       	cpc	r22, r1
 cb0:	08 94       	sec
 cb2:	08 95       	ret

00000cb4 <__fp_zero>:
 cb4:	e8 94       	clt

00000cb6 <__fp_szero>:
 cb6:	bb 27       	eor	r27, r27
 cb8:	66 27       	eor	r22, r22
 cba:	77 27       	eor	r23, r23
 cbc:	cb 01       	movw	r24, r22
 cbe:	97 f9       	bld	r25, 7
 cc0:	08 95       	ret

00000cc2 <__mulsf3>:
 cc2:	0e 94 74 06 	call	0xce8	; 0xce8 <__mulsf3x>
 cc6:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__fp_round>
 cca:	0e 94 19 06 	call	0xc32	; 0xc32 <__fp_pscA>
 cce:	38 f0       	brcs	.+14     	; 0xcde <__mulsf3+0x1c>
 cd0:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_pscB>
 cd4:	20 f0       	brcs	.+8      	; 0xcde <__mulsf3+0x1c>
 cd6:	95 23       	and	r25, r21
 cd8:	11 f0       	breq	.+4      	; 0xcde <__mulsf3+0x1c>
 cda:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_inf>
 cde:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_nan>
 ce2:	11 24       	eor	r1, r1
 ce4:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_szero>

00000ce8 <__mulsf3x>:
 ce8:	0e 94 38 06 	call	0xc70	; 0xc70 <__fp_split3>
 cec:	70 f3       	brcs	.-36     	; 0xcca <__mulsf3+0x8>

00000cee <__mulsf3_pse>:
 cee:	95 9f       	mul	r25, r21
 cf0:	c1 f3       	breq	.-16     	; 0xce2 <__mulsf3+0x20>
 cf2:	95 0f       	add	r25, r21
 cf4:	50 e0       	ldi	r21, 0x00	; 0
 cf6:	55 1f       	adc	r21, r21
 cf8:	62 9f       	mul	r22, r18
 cfa:	f0 01       	movw	r30, r0
 cfc:	72 9f       	mul	r23, r18
 cfe:	bb 27       	eor	r27, r27
 d00:	f0 0d       	add	r31, r0
 d02:	b1 1d       	adc	r27, r1
 d04:	63 9f       	mul	r22, r19
 d06:	aa 27       	eor	r26, r26
 d08:	f0 0d       	add	r31, r0
 d0a:	b1 1d       	adc	r27, r1
 d0c:	aa 1f       	adc	r26, r26
 d0e:	64 9f       	mul	r22, r20
 d10:	66 27       	eor	r22, r22
 d12:	b0 0d       	add	r27, r0
 d14:	a1 1d       	adc	r26, r1
 d16:	66 1f       	adc	r22, r22
 d18:	82 9f       	mul	r24, r18
 d1a:	22 27       	eor	r18, r18
 d1c:	b0 0d       	add	r27, r0
 d1e:	a1 1d       	adc	r26, r1
 d20:	62 1f       	adc	r22, r18
 d22:	73 9f       	mul	r23, r19
 d24:	b0 0d       	add	r27, r0
 d26:	a1 1d       	adc	r26, r1
 d28:	62 1f       	adc	r22, r18
 d2a:	83 9f       	mul	r24, r19
 d2c:	a0 0d       	add	r26, r0
 d2e:	61 1d       	adc	r22, r1
 d30:	22 1f       	adc	r18, r18
 d32:	74 9f       	mul	r23, r20
 d34:	33 27       	eor	r19, r19
 d36:	a0 0d       	add	r26, r0
 d38:	61 1d       	adc	r22, r1
 d3a:	23 1f       	adc	r18, r19
 d3c:	84 9f       	mul	r24, r20
 d3e:	60 0d       	add	r22, r0
 d40:	21 1d       	adc	r18, r1
 d42:	82 2f       	mov	r24, r18
 d44:	76 2f       	mov	r23, r22
 d46:	6a 2f       	mov	r22, r26
 d48:	11 24       	eor	r1, r1
 d4a:	9f 57       	subi	r25, 0x7F	; 127
 d4c:	50 40       	sbci	r21, 0x00	; 0
 d4e:	9a f0       	brmi	.+38     	; 0xd76 <__mulsf3_pse+0x88>
 d50:	f1 f0       	breq	.+60     	; 0xd8e <__mulsf3_pse+0xa0>
 d52:	88 23       	and	r24, r24
 d54:	4a f0       	brmi	.+18     	; 0xd68 <__mulsf3_pse+0x7a>
 d56:	ee 0f       	add	r30, r30
 d58:	ff 1f       	adc	r31, r31
 d5a:	bb 1f       	adc	r27, r27
 d5c:	66 1f       	adc	r22, r22
 d5e:	77 1f       	adc	r23, r23
 d60:	88 1f       	adc	r24, r24
 d62:	91 50       	subi	r25, 0x01	; 1
 d64:	50 40       	sbci	r21, 0x00	; 0
 d66:	a9 f7       	brne	.-22     	; 0xd52 <__mulsf3_pse+0x64>
 d68:	9e 3f       	cpi	r25, 0xFE	; 254
 d6a:	51 05       	cpc	r21, r1
 d6c:	80 f0       	brcs	.+32     	; 0xd8e <__mulsf3_pse+0xa0>
 d6e:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_inf>
 d72:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__fp_szero>
 d76:	5f 3f       	cpi	r21, 0xFF	; 255
 d78:	e4 f3       	brlt	.-8      	; 0xd72 <__mulsf3_pse+0x84>
 d7a:	98 3e       	cpi	r25, 0xE8	; 232
 d7c:	d4 f3       	brlt	.-12     	; 0xd72 <__mulsf3_pse+0x84>
 d7e:	86 95       	lsr	r24
 d80:	77 95       	ror	r23
 d82:	67 95       	ror	r22
 d84:	b7 95       	ror	r27
 d86:	f7 95       	ror	r31
 d88:	e7 95       	ror	r30
 d8a:	9f 5f       	subi	r25, 0xFF	; 255
 d8c:	c1 f7       	brne	.-16     	; 0xd7e <__mulsf3_pse+0x90>
 d8e:	fe 2b       	or	r31, r30
 d90:	88 0f       	add	r24, r24
 d92:	91 1d       	adc	r25, r1
 d94:	96 95       	lsr	r25
 d96:	87 95       	ror	r24
 d98:	97 f9       	bld	r25, 7
 d9a:	08 95       	ret

00000d9c <__mulsi3>:
 d9c:	db 01       	movw	r26, r22
 d9e:	8f 93       	push	r24
 da0:	9f 93       	push	r25
 da2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__muluhisi3>
 da6:	bf 91       	pop	r27
 da8:	af 91       	pop	r26
 daa:	a2 9f       	mul	r26, r18
 dac:	80 0d       	add	r24, r0
 dae:	91 1d       	adc	r25, r1
 db0:	a3 9f       	mul	r26, r19
 db2:	90 0d       	add	r25, r0
 db4:	b2 9f       	mul	r27, r18
 db6:	90 0d       	add	r25, r0
 db8:	11 24       	eor	r1, r1
 dba:	08 95       	ret

00000dbc <__udivmodsi4>:
 dbc:	a1 e2       	ldi	r26, 0x21	; 33
 dbe:	1a 2e       	mov	r1, r26
 dc0:	aa 1b       	sub	r26, r26
 dc2:	bb 1b       	sub	r27, r27
 dc4:	fd 01       	movw	r30, r26
 dc6:	0d c0       	rjmp	.+26     	; 0xde2 <__udivmodsi4_ep>

00000dc8 <__udivmodsi4_loop>:
 dc8:	aa 1f       	adc	r26, r26
 dca:	bb 1f       	adc	r27, r27
 dcc:	ee 1f       	adc	r30, r30
 dce:	ff 1f       	adc	r31, r31
 dd0:	a2 17       	cp	r26, r18
 dd2:	b3 07       	cpc	r27, r19
 dd4:	e4 07       	cpc	r30, r20
 dd6:	f5 07       	cpc	r31, r21
 dd8:	20 f0       	brcs	.+8      	; 0xde2 <__udivmodsi4_ep>
 dda:	a2 1b       	sub	r26, r18
 ddc:	b3 0b       	sbc	r27, r19
 dde:	e4 0b       	sbc	r30, r20
 de0:	f5 0b       	sbc	r31, r21

00000de2 <__udivmodsi4_ep>:
 de2:	66 1f       	adc	r22, r22
 de4:	77 1f       	adc	r23, r23
 de6:	88 1f       	adc	r24, r24
 de8:	99 1f       	adc	r25, r25
 dea:	1a 94       	dec	r1
 dec:	69 f7       	brne	.-38     	; 0xdc8 <__udivmodsi4_loop>
 dee:	60 95       	com	r22
 df0:	70 95       	com	r23
 df2:	80 95       	com	r24
 df4:	90 95       	com	r25
 df6:	9b 01       	movw	r18, r22
 df8:	ac 01       	movw	r20, r24
 dfa:	bd 01       	movw	r22, r26
 dfc:	cf 01       	movw	r24, r30
 dfe:	08 95       	ret

00000e00 <__divmodsi4>:
 e00:	05 2e       	mov	r0, r21
 e02:	97 fb       	bst	r25, 7
 e04:	1e f4       	brtc	.+6      	; 0xe0c <__divmodsi4+0xc>
 e06:	00 94       	com	r0
 e08:	0e 94 17 07 	call	0xe2e	; 0xe2e <__negsi2>
 e0c:	57 fd       	sbrc	r21, 7
 e0e:	07 d0       	rcall	.+14     	; 0xe1e <__divmodsi4_neg2>
 e10:	0e 94 de 06 	call	0xdbc	; 0xdbc <__udivmodsi4>
 e14:	07 fc       	sbrc	r0, 7
 e16:	03 d0       	rcall	.+6      	; 0xe1e <__divmodsi4_neg2>
 e18:	4e f4       	brtc	.+18     	; 0xe2c <__divmodsi4_exit>
 e1a:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__negsi2>

00000e1e <__divmodsi4_neg2>:
 e1e:	50 95       	com	r21
 e20:	40 95       	com	r20
 e22:	30 95       	com	r19
 e24:	21 95       	neg	r18
 e26:	3f 4f       	sbci	r19, 0xFF	; 255
 e28:	4f 4f       	sbci	r20, 0xFF	; 255
 e2a:	5f 4f       	sbci	r21, 0xFF	; 255

00000e2c <__divmodsi4_exit>:
 e2c:	08 95       	ret

00000e2e <__negsi2>:
 e2e:	90 95       	com	r25
 e30:	80 95       	com	r24
 e32:	70 95       	com	r23
 e34:	61 95       	neg	r22
 e36:	7f 4f       	sbci	r23, 0xFF	; 255
 e38:	8f 4f       	sbci	r24, 0xFF	; 255
 e3a:	9f 4f       	sbci	r25, 0xFF	; 255
 e3c:	08 95       	ret

00000e3e <__muluhisi3>:
 e3e:	0e 94 2a 07 	call	0xe54	; 0xe54 <__umulhisi3>
 e42:	a5 9f       	mul	r26, r21
 e44:	90 0d       	add	r25, r0
 e46:	b4 9f       	mul	r27, r20
 e48:	90 0d       	add	r25, r0
 e4a:	a4 9f       	mul	r26, r20
 e4c:	80 0d       	add	r24, r0
 e4e:	91 1d       	adc	r25, r1
 e50:	11 24       	eor	r1, r1
 e52:	08 95       	ret

00000e54 <__umulhisi3>:
 e54:	a2 9f       	mul	r26, r18
 e56:	b0 01       	movw	r22, r0
 e58:	b3 9f       	mul	r27, r19
 e5a:	c0 01       	movw	r24, r0
 e5c:	a3 9f       	mul	r26, r19
 e5e:	70 0d       	add	r23, r0
 e60:	81 1d       	adc	r24, r1
 e62:	11 24       	eor	r1, r1
 e64:	91 1d       	adc	r25, r1
 e66:	b2 9f       	mul	r27, r18
 e68:	70 0d       	add	r23, r0
 e6a:	81 1d       	adc	r24, r1
 e6c:	11 24       	eor	r1, r1
 e6e:	91 1d       	adc	r25, r1
 e70:	08 95       	ret

00000e72 <_exit>:
 e72:	f8 94       	cli

00000e74 <__stop_program>:
 e74:	ff cf       	rjmp	.-2      	; 0xe74 <__stop_program>
