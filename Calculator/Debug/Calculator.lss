
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000f16  00000faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  00000fba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001589  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6a  00000000  00000000  0000269d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000add  00000000  00000000  00003107  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00003be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d3  00000000  00000000  00003de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c8e  00000000  00000000  000044b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00005145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 82 03 	call	0x704	; 0x704 <main>
  9e:	0c 94 89 07 	jmp	0xf12	; 0xf12 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CalculatorInitialzie>:



void CalculatorInitialzie(void)
{
    LCD_Init();
  a6:	0e 94 94 04 	call	0x928	; 0x928 <LCD_Init>
  aa:	08 95       	ret

000000ac <vid_ConvertFloatToInteger>:

    }
}

void vid_ConvertFloatToInteger(f32* Copy_f32_DecimalDigits, u8 Copy_u8_FloatPrecision)
{
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	ec 01       	movw	r28, r24
  bc:	16 2f       	mov	r17, r22
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
  be:	89 2b       	or	r24, r25
  c0:	89 f4       	brne	.+34     	; 0xe4 <vid_ConvertFloatToInteger+0x38>
  c2:	28 c0       	rjmp	.+80     	; 0x114 <vid_ConvertFloatToInteger+0x68>
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
        {
            *Copy_f32_DecimalDigits *= 10;
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	40 e2       	ldi	r20, 0x20	; 32
  ca:	51 e4       	ldi	r21, 0x41	; 65
  cc:	c7 01       	movw	r24, r14
  ce:	b6 01       	movw	r22, r12
  d0:	0e 94 b1 06 	call	0xd62	; 0xd62 <__mulsf3>
  d4:	68 83       	st	Y, r22
  d6:	79 83       	std	Y+1, r23	; 0x01
  d8:	8a 83       	std	Y+2, r24	; 0x02
  da:	9b 83       	std	Y+3, r25	; 0x03

            
            Local_u32_CheckVariable = (u32)(*Copy_f32_DecimalDigits);
  dc:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fixunssfsi>

            Copy_u8_FloatPrecision--;
  e0:	11 50       	subi	r17, 0x01	; 1
  e2:	03 c0       	rjmp	.+6      	; 0xea <vid_ConvertFloatToInteger+0x3e>
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	cb 01       	movw	r24, r22
    u32 Local_u32_CheckVariable = 0;
    f32 Local_f32_TempDecimalDigits;

    if(Copy_f32_DecimalDigits)
    {
        while((*Copy_f32_DecimalDigits - Local_u32_CheckVariable) || ( Copy_u8_FloatPrecision == 0))
  ea:	c8 80       	ld	r12, Y
  ec:	d9 80       	ldd	r13, Y+1	; 0x01
  ee:	ea 80       	ldd	r14, Y+2	; 0x02
  f0:	fb 80       	ldd	r15, Y+3	; 0x03
  f2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatunsisf>
  f6:	9b 01       	movw	r18, r22
  f8:	ac 01       	movw	r20, r24
  fa:	c7 01       	movw	r24, r14
  fc:	b6 01       	movw	r22, r12
  fe:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__subsf3>
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	a9 01       	movw	r20, r18
 108:	0e 94 59 05 	call	0xab2	; 0xab2 <__cmpsf2>
 10c:	81 11       	cpse	r24, r1
 10e:	da cf       	rjmp	.-76     	; 0xc4 <vid_ConvertFloatToInteger+0x18>
 110:	11 23       	and	r17, r17
 112:	c1 f2       	breq	.-80     	; 0xc4 <vid_ConvertFloatToInteger+0x18>
        if(Local_u32_CheckVariable >= 5)
        {
            *Copy_f32_DecimalDigits++;
        }
	}
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	df 90       	pop	r13
 120:	cf 90       	pop	r12
 122:	08 95       	ret

00000124 <vid_ReverseInteger>:

void vid_ReverseInteger(u32* Copy_pu32_Num)
{
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
    //Must cast any to u32 when using this function

    if(Copy_pu32_Num)
 136:	89 2b       	or	r24, r25
 138:	21 f5       	brne	.+72     	; 0x182 <vid_ReverseInteger+0x5e>
 13a:	33 c0       	rjmp	.+102    	; 0x1a2 <vid_ReverseInteger+0x7e>
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
 13c:	97 01       	movw	r18, r14
 13e:	86 01       	movw	r16, r12
 140:	00 0f       	add	r16, r16
 142:	11 1f       	adc	r17, r17
 144:	22 1f       	adc	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	68 01       	movw	r12, r16
 14a:	79 01       	movw	r14, r18
 14c:	cc 0c       	add	r12, r12
 14e:	dd 1c       	adc	r13, r13
 150:	ee 1c       	adc	r14, r14
 152:	ff 1c       	adc	r15, r15
 154:	cc 0c       	add	r12, r12
 156:	dd 1c       	adc	r13, r13
 158:	ee 1c       	adc	r14, r14
 15a:	ff 1c       	adc	r15, r15
 15c:	c0 0e       	add	r12, r16
 15e:	d1 1e       	adc	r13, r17
 160:	e2 1e       	adc	r14, r18
 162:	f3 1e       	adc	r15, r19
 164:	2a e0       	ldi	r18, 0x0A	; 10
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodsi4>
 170:	c6 0e       	add	r12, r22
 172:	d7 1e       	adc	r13, r23
 174:	e8 1e       	adc	r14, r24
 176:	f9 1e       	adc	r15, r25
            *Copy_pu32_Num /= 10;
 178:	28 83       	st	Y, r18
 17a:	39 83       	std	Y+1, r19	; 0x01
 17c:	4a 83       	std	Y+2, r20	; 0x02
 17e:	5b 83       	std	Y+3, r21	; 0x03
 180:	03 c0       	rjmp	.+6      	; 0x188 <vid_ReverseInteger+0x64>
 182:	c1 2c       	mov	r12, r1
 184:	d1 2c       	mov	r13, r1
 186:	76 01       	movw	r14, r12
    //Must cast any to u32 when using this function

    if(Copy_pu32_Num)
    {   
        u32 Local_u32_ReversedNum = 0;
        while(*Copy_pu32_Num)
 188:	68 81       	ld	r22, Y
 18a:	79 81       	ldd	r23, Y+1	; 0x01
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	9b 81       	ldd	r25, Y+3	; 0x03
 190:	61 15       	cp	r22, r1
 192:	71 05       	cpc	r23, r1
 194:	81 05       	cpc	r24, r1
 196:	91 05       	cpc	r25, r1
 198:	89 f6       	brne	.-94     	; 0x13c <vid_ReverseInteger+0x18>
        {
            Local_u32_ReversedNum = (Local_u32_ReversedNum*10) + (*Copy_pu32_Num % 10);
            *Copy_pu32_Num /= 10;
        }

        *Copy_pu32_Num = Local_u32_ReversedNum;
 19a:	c8 82       	st	Y, r12
 19c:	d9 82       	std	Y+1, r13	; 0x01
 19e:	ea 82       	std	Y+2, r14	; 0x02
 1a0:	fb 82       	std	Y+3, r15	; 0x03

    }

}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	08 95       	ret

000001b4 <vid_CountNumber>:

u32 vid_CountNumber(u32 Num)
{
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
    u32 Count = 0;
 1bc:	c1 2c       	mov	r12, r1
 1be:	d1 2c       	mov	r13, r1
 1c0:	76 01       	movw	r14, r12

    do
    {
        Num /= 10;
 1c2:	2a e0       	ldi	r18, 0x0A	; 10
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodsi4>
 1ce:	ca 01       	movw	r24, r20
 1d0:	b9 01       	movw	r22, r18

        Count++;
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	c2 1a       	sub	r12, r18
 1d6:	d2 0a       	sbc	r13, r18
 1d8:	e2 0a       	sbc	r14, r18
 1da:	f2 0a       	sbc	r15, r18

    }while(Num);
 1dc:	61 15       	cp	r22, r1
 1de:	71 05       	cpc	r23, r1
 1e0:	81 05       	cpc	r24, r1
 1e2:	91 05       	cpc	r25, r1
 1e4:	71 f7       	brne	.-36     	; 0x1c2 <vid_CountNumber+0xe>

    return Count;

 1e6:	c7 01       	movw	r24, r14
 1e8:	b6 01       	movw	r22, r12
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	df 90       	pop	r13
 1f0:	cf 90       	pop	r12
 1f2:	08 95       	ret

000001f4 <Calculator>:
{
    LCD_Init();
}

void Calculator(void)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	2c 97       	sbiw	r28, 0x0c	; 12
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61

    s32 FirstDigit;
    s32 SecondDigit;
    u8 Operation;

    u8 NegativeFlag = False;
 208:	31 2c       	mov	r3, r1
    LCD_Init();
}

void Calculator(void)
{
    State_t CurrentState = CALCULATOR_FIRST_DIGIT;
 20a:	00 e0       	ldi	r16, 0x00	; 0
    u8 NegativeFlag = False;
	
    while (1)
    {

        switch (CurrentState)
 20c:	02 30       	cpi	r16, 0x02	; 2
 20e:	09 f4       	brne	.+2      	; 0x212 <Calculator+0x1e>
 210:	52 c0       	rjmp	.+164    	; 0x2b6 <Calculator+0xc2>
 212:	28 f4       	brcc	.+10     	; 0x21e <Calculator+0x2a>
 214:	00 23       	and	r16, r16
 216:	61 f0       	breq	.+24     	; 0x230 <Calculator+0x3c>
 218:	01 30       	cpi	r16, 0x01	; 1
 21a:	a1 f1       	breq	.+104    	; 0x284 <Calculator+0x90>
 21c:	f7 cf       	rjmp	.-18     	; 0x20c <Calculator+0x18>
 21e:	04 30       	cpi	r16, 0x04	; 4
 220:	09 f4       	brne	.+2      	; 0x224 <Calculator+0x30>
 222:	74 c0       	rjmp	.+232    	; 0x30c <Calculator+0x118>
 224:	08 f4       	brcc	.+2      	; 0x228 <Calculator+0x34>
 226:	63 c0       	rjmp	.+198    	; 0x2ee <Calculator+0xfa>
 228:	05 30       	cpi	r16, 0x05	; 5
 22a:	09 f4       	brne	.+2      	; 0x22e <Calculator+0x3a>
 22c:	62 c2       	rjmp	.+1220   	; 0x6f2 <__EEPROM_REGION_LENGTH__+0x2f2>
 22e:	ee cf       	rjmp	.-36     	; 0x20c <Calculator+0x18>
        {
            case CALCULATOR_FIRST_DIGIT:
            {

                KeyPressed = keypad_scan();
 230:	0e 94 89 03 	call	0x712	; 0x712 <keypad_scan>


                if( KeyPressed == '-')
 234:	8d 32       	cpi	r24, 0x2D	; 45
 236:	51 f4       	brne	.+20     	; 0x24c <Calculator+0x58>
                {
                    LCD_GoToXY(0,0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_GoToXY>

                    NegativeFlag = True;

                    LCD_PutChar('-');
 240:	8d e2       	ldi	r24, 0x2D	; 45
 242:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                if( KeyPressed == '-')
                {
                    LCD_GoToXY(0,0);

                    NegativeFlag = True;
 246:	33 24       	eor	r3, r3
 248:	33 94       	inc	r3
 24a:	e0 cf       	rjmp	.-64     	; 0x20c <Calculator+0x18>

                    LCD_PutChar('-');
                }
                else if ( (KeyPressed >= '0' ) && (KeyPressed <= '9') )
 24c:	90 ed       	ldi	r25, 0xD0	; 208
 24e:	98 0f       	add	r25, r24
 250:	9a 30       	cpi	r25, 0x0A	; 10
 252:	e0 f6       	brcc	.-72     	; 0x20c <Calculator+0x18>
                {
                    
                    FirstDigit = (KeyPressed - 48);
 254:	88 2e       	mov	r8, r24
 256:	91 2c       	mov	r9, r1
 258:	20 e3       	ldi	r18, 0x30	; 48
 25a:	82 1a       	sub	r8, r18
 25c:	91 08       	sbc	r9, r1
 25e:	09 2c       	mov	r0, r9
 260:	00 0c       	add	r0, r0
 262:	aa 08       	sbc	r10, r10
 264:	bb 08       	sbc	r11, r11

                    if(NegativeFlag)
 266:	33 20       	and	r3, r3
 268:	49 f0       	breq	.+18     	; 0x27c <Calculator+0x88>
                    {
                        FirstDigit *= -1;
 26a:	b0 94       	com	r11
 26c:	a0 94       	com	r10
 26e:	90 94       	com	r9
 270:	80 94       	com	r8
 272:	81 1c       	adc	r8, r1
 274:	91 1c       	adc	r9, r1
 276:	a1 1c       	adc	r10, r1
 278:	b1 1c       	adc	r11, r1

                        NegativeFlag = False;
 27a:	31 2c       	mov	r3, r1
                    }

                    LCD_PutChar(KeyPressed);
 27c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                    CurrentState = CALCULATOR_OPERATION;
 280:	01 e0       	ldi	r16, 0x01	; 1
 282:	c4 cf       	rjmp	.-120    	; 0x20c <Calculator+0x18>
                break;
            }            

            case CALCULATOR_OPERATION:
            {
                KeyPressed = keypad_scan();
 284:	0e 94 89 03 	call	0x712	; 0x712 <keypad_scan>
 288:	e8 2e       	mov	r14, r24

                if ( (KeyPressed == '+' ) || (KeyPressed == '-' ) || (KeyPressed == 'x' ) || (KeyPressed == '/' )  )
 28a:	3b e2       	ldi	r19, 0x2B	; 43
 28c:	83 17       	cp	r24, r19
 28e:	49 f0       	breq	.+18     	; 0x2a2 <Calculator+0xae>
 290:	4d e2       	ldi	r20, 0x2D	; 45
 292:	84 17       	cp	r24, r20
 294:	31 f0       	breq	.+12     	; 0x2a2 <Calculator+0xae>
 296:	58 e7       	ldi	r21, 0x78	; 120
 298:	85 17       	cp	r24, r21
 29a:	19 f0       	breq	.+6      	; 0x2a2 <Calculator+0xae>
 29c:	8f e2       	ldi	r24, 0x2F	; 47
 29e:	e8 12       	cpse	r14, r24
 2a0:	b5 cf       	rjmp	.-150    	; 0x20c <Calculator+0x18>
                {
                    Operation = KeyPressed;

                    LCD_GoToXY(0,2);
 2a2:	62 e0       	ldi	r22, 0x02	; 2
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_GoToXY>

                    LCD_PutChar(KeyPressed);
 2aa:	8e 2d       	mov	r24, r14
 2ac:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>
            {
                KeyPressed = keypad_scan();

                if ( (KeyPressed == '+' ) || (KeyPressed == '-' ) || (KeyPressed == 'x' ) || (KeyPressed == '/' )  )
                {
                    Operation = KeyPressed;
 2b0:	1e 2d       	mov	r17, r14

                    LCD_GoToXY(0,2);

                    LCD_PutChar(KeyPressed);

                    CurrentState = CALCULATOR_SECOND_DIGIT;
 2b2:	02 e0       	ldi	r16, 0x02	; 2
 2b4:	ab cf       	rjmp	.-170    	; 0x20c <Calculator+0x18>
                break;
            }

            case CALCULATOR_SECOND_DIGIT:
            {
                KeyPressed = keypad_scan();
 2b6:	0e 94 89 03 	call	0x712	; 0x712 <keypad_scan>
 2ba:	e8 2e       	mov	r14, r24

                if ( (KeyPressed >= '0' ) && (KeyPressed <= '9') )
 2bc:	80 ed       	ldi	r24, 0xD0	; 208
 2be:	8e 0d       	add	r24, r14
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	08 f0       	brcs	.+2      	; 0x2c6 <Calculator+0xd2>
 2c4:	a3 cf       	rjmp	.-186    	; 0x20c <Calculator+0x18>
                {
                    SecondDigit = KeyPressed - 48;
 2c6:	8e 2d       	mov	r24, r14
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	c0 97       	sbiw	r24, 0x30	; 48
 2cc:	9c 01       	movw	r18, r24
 2ce:	99 0f       	add	r25, r25
 2d0:	44 0b       	sbc	r20, r20
 2d2:	55 0b       	sbc	r21, r21
 2d4:	29 87       	std	Y+9, r18	; 0x09
 2d6:	3a 87       	std	Y+10, r19	; 0x0a
 2d8:	4b 87       	std	Y+11, r20	; 0x0b
 2da:	5c 87       	std	Y+12, r21	; 0x0c

                    LCD_GoToXY(0,4);
 2dc:	64 e0       	ldi	r22, 0x04	; 4
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_GoToXY>

                    LCD_PutChar(KeyPressed);
 2e4:	8e 2d       	mov	r24, r14
 2e6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                    CurrentState = CALCULATOR_EQUAL_OPERATOR;
 2ea:	03 e0       	ldi	r16, 0x03	; 3
 2ec:	8f cf       	rjmp	.-226    	; 0x20c <Calculator+0x18>
                break;
            }

            case CALCULATOR_EQUAL_OPERATOR:
            {
                KeyPressed = keypad_scan();
 2ee:	0e 94 89 03 	call	0x712	; 0x712 <keypad_scan>
 2f2:	e8 2e       	mov	r14, r24

                if ( KeyPressed == '=' )
 2f4:	3d e3       	ldi	r19, 0x3D	; 61
 2f6:	83 13       	cpse	r24, r19
 2f8:	89 cf       	rjmp	.-238    	; 0x20c <Calculator+0x18>
                {

                    LCD_GoToXY(0,6);
 2fa:	66 e0       	ldi	r22, 0x06	; 6
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_GoToXY>

                    LCD_PutChar(KeyPressed);
 302:	8e 2d       	mov	r24, r14
 304:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                    CurrentState = CALCULATOR_RESULT;
 308:	04 e0       	ldi	r16, 0x04	; 4
 30a:	80 cf       	rjmp	.-256    	; 0x20c <Calculator+0x18>
        
            case CALCULATOR_RESULT:
            {
                s32 Result;

                switch (Operation)
 30c:	1d 32       	cpi	r17, 0x2D	; 45
 30e:	09 f4       	brne	.+2      	; 0x312 <Calculator+0x11e>
 310:	79 c0       	rjmp	.+242    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 312:	18 f4       	brcc	.+6      	; 0x31a <Calculator+0x126>
 314:	1b 32       	cpi	r17, 0x2B	; 43
 316:	41 f0       	breq	.+16     	; 0x328 <Calculator+0x134>
 318:	ea c1       	rjmp	.+980    	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
 31a:	1f 32       	cpi	r17, 0x2F	; 47
 31c:	09 f4       	brne	.+2      	; 0x320 <Calculator+0x12c>
 31e:	4e c1       	rjmp	.+668    	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
 320:	18 37       	cpi	r17, 0x78	; 120
 322:	09 f4       	brne	.+2      	; 0x326 <Calculator+0x132>
 324:	de c0       	rjmp	.+444    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 326:	e3 c1       	rjmp	.+966    	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
                {
                    case '+':
                    {
                        Result = FirstDigit + SecondDigit;
 328:	89 85       	ldd	r24, Y+9	; 0x09
 32a:	9a 85       	ldd	r25, Y+10	; 0x0a
 32c:	ab 85       	ldd	r26, Y+11	; 0x0b
 32e:	bc 85       	ldd	r27, Y+12	; 0x0c
 330:	88 0d       	add	r24, r8
 332:	99 1d       	adc	r25, r9
 334:	aa 1d       	adc	r26, r10
 336:	bb 1d       	adc	r27, r11
 338:	89 83       	std	Y+1, r24	; 0x01
 33a:	9a 83       	std	Y+2, r25	; 0x02
 33c:	ab 83       	std	Y+3, r26	; 0x03
 33e:	bc 83       	std	Y+4, r27	; 0x04
						
                        LCD_GoToXY(0, 8);
 340:	68 e0       	ldi	r22, 0x08	; 8
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_GoToXY>

                        if(Result < 0 )
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	9a 81       	ldd	r25, Y+2	; 0x02
 34c:	ab 81       	ldd	r26, Y+3	; 0x03
 34e:	bc 81       	ldd	r27, Y+4	; 0x04
 350:	bb 23       	and	r27, r27
 352:	94 f4       	brge	.+36     	; 0x378 <Calculator+0x184>
                        {
                            LCD_PutChar('-');
 354:	8d e2       	ldi	r24, 0x2D	; 45
 356:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                            Result *= -1;
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	9a 81       	ldd	r25, Y+2	; 0x02
 35e:	ab 81       	ldd	r26, Y+3	; 0x03
 360:	bc 81       	ldd	r27, Y+4	; 0x04
 362:	b0 95       	com	r27
 364:	a0 95       	com	r26
 366:	90 95       	com	r25
 368:	81 95       	neg	r24
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	af 4f       	sbci	r26, 0xFF	; 255
 36e:	bf 4f       	sbci	r27, 0xFF	; 255
 370:	89 83       	std	Y+1, r24	; 0x01
 372:	9a 83       	std	Y+2, r25	; 0x02
 374:	ab 83       	std	Y+3, r26	; 0x03
 376:	bc 83       	std	Y+4, r27	; 0x04

                        }   

						u32 Count = vid_CountNumber(Result);
 378:	49 80       	ldd	r4, Y+1	; 0x01
 37a:	5a 80       	ldd	r5, Y+2	; 0x02
 37c:	6b 80       	ldd	r6, Y+3	; 0x03
 37e:	7c 80       	ldd	r7, Y+4	; 0x04
 380:	c3 01       	movw	r24, r6
 382:	b2 01       	movw	r22, r4
 384:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vid_CountNumber>
 388:	6b 01       	movw	r12, r22
 38a:	7c 01       	movw	r14, r24

                        vid_ReverseInteger(Result);
 38c:	c2 01       	movw	r24, r4
 38e:	0e 94 92 00 	call	0x124	; 0x124 <vid_ReverseInteger>

                        while (Result)
 392:	20 c0       	rjmp	.+64     	; 0x3d4 <Calculator+0x1e0>
                        {
                            LCD_PutChar((Result % 10) + 48);
 394:	0f 2e       	mov	r0, r31
 396:	fa e0       	ldi	r31, 0x0A	; 10
 398:	4f 2e       	mov	r4, r31
 39a:	51 2c       	mov	r5, r1
 39c:	61 2c       	mov	r6, r1
 39e:	71 2c       	mov	r7, r1
 3a0:	f0 2d       	mov	r31, r0
 3a2:	a3 01       	movw	r20, r6
 3a4:	92 01       	movw	r18, r4
 3a6:	0e 94 50 07 	call	0xea0	; 0xea0 <__divmodsi4>
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	86 0f       	add	r24, r22
 3ae:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                            Result /= 10;
 3b2:	69 81       	ldd	r22, Y+1	; 0x01
 3b4:	7a 81       	ldd	r23, Y+2	; 0x02
 3b6:	8b 81       	ldd	r24, Y+3	; 0x03
 3b8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ba:	a3 01       	movw	r20, r6
 3bc:	92 01       	movw	r18, r4
 3be:	0e 94 50 07 	call	0xea0	; 0xea0 <__divmodsi4>
 3c2:	29 83       	std	Y+1, r18	; 0x01
 3c4:	3a 83       	std	Y+2, r19	; 0x02
 3c6:	4b 83       	std	Y+3, r20	; 0x03
 3c8:	5c 83       	std	Y+4, r21	; 0x04

                            Count--;    
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	c4 1a       	sub	r12, r20
 3ce:	d1 08       	sbc	r13, r1
 3d0:	e1 08       	sbc	r14, r1
 3d2:	f1 08       	sbc	r15, r1

						u32 Count = vid_CountNumber(Result);

                        vid_ReverseInteger(Result);

                        while (Result)
 3d4:	69 81       	ldd	r22, Y+1	; 0x01
 3d6:	7a 81       	ldd	r23, Y+2	; 0x02
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	9c 81       	ldd	r25, Y+4	; 0x04
 3dc:	61 15       	cp	r22, r1
 3de:	71 05       	cpc	r23, r1
 3e0:	81 05       	cpc	r24, r1
 3e2:	91 05       	cpc	r25, r1
 3e4:	b9 f6       	brne	.-82     	; 0x394 <Calculator+0x1a0>
 3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <Calculator+0x204>
                            Count--;    
                        }

                        while(Count)
                        {
                            LCD_PutChar('0');
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>
                            
                            Count--;
 3ee:	51 e0       	ldi	r21, 0x01	; 1
 3f0:	c5 1a       	sub	r12, r21
 3f2:	d1 08       	sbc	r13, r1
 3f4:	e1 08       	sbc	r14, r1
 3f6:	f1 08       	sbc	r15, r1
                            Result /= 10;

                            Count--;    
                        }

                        while(Count)
 3f8:	c1 14       	cp	r12, r1
 3fa:	d1 04       	cpc	r13, r1
 3fc:	e1 04       	cpc	r14, r1
 3fe:	f1 04       	cpc	r15, r1
 400:	99 f7       	brne	.-26     	; 0x3e8 <Calculator+0x1f4>
 402:	75 c1       	rjmp	.+746    	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
                    }

                    case '-':
                    {

                        Result = FirstDigit - SecondDigit;
 404:	d5 01       	movw	r26, r10
 406:	c4 01       	movw	r24, r8
 408:	29 85       	ldd	r18, Y+9	; 0x09
 40a:	3a 85       	ldd	r19, Y+10	; 0x0a
 40c:	4b 85       	ldd	r20, Y+11	; 0x0b
 40e:	5c 85       	ldd	r21, Y+12	; 0x0c
 410:	82 1b       	sub	r24, r18
 412:	93 0b       	sbc	r25, r19
 414:	a4 0b       	sbc	r26, r20
 416:	b5 0b       	sbc	r27, r21
 418:	89 83       	std	Y+1, r24	; 0x01
 41a:	9a 83       	std	Y+2, r25	; 0x02
 41c:	ab 83       	std	Y+3, r26	; 0x03
 41e:	bc 83       	std	Y+4, r27	; 0x04

                        LCD_GoToXY(0, 8);
 420:	68 e0       	ldi	r22, 0x08	; 8
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_GoToXY>

                        if(Result < 0 )
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	9a 81       	ldd	r25, Y+2	; 0x02
 42c:	ab 81       	ldd	r26, Y+3	; 0x03
 42e:	bc 81       	ldd	r27, Y+4	; 0x04
 430:	bb 23       	and	r27, r27
 432:	94 f4       	brge	.+36     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
                        {
                            LCD_PutChar('-');
 434:	8d e2       	ldi	r24, 0x2D	; 45
 436:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                            Result *= -1;
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	9a 81       	ldd	r25, Y+2	; 0x02
 43e:	ab 81       	ldd	r26, Y+3	; 0x03
 440:	bc 81       	ldd	r27, Y+4	; 0x04
 442:	b0 95       	com	r27
 444:	a0 95       	com	r26
 446:	90 95       	com	r25
 448:	81 95       	neg	r24
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	af 4f       	sbci	r26, 0xFF	; 255
 44e:	bf 4f       	sbci	r27, 0xFF	; 255
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	9a 83       	std	Y+2, r25	; 0x02
 454:	ab 83       	std	Y+3, r26	; 0x03
 456:	bc 83       	std	Y+4, r27	; 0x04
                        }                        
                        
                        u32 Count = vid_CountNumber(Result);
 458:	69 81       	ldd	r22, Y+1	; 0x01
 45a:	7a 81       	ldd	r23, Y+2	; 0x02
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	9c 81       	ldd	r25, Y+4	; 0x04
 460:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vid_CountNumber>
 464:	6b 01       	movw	r12, r22
 466:	7c 01       	movw	r14, r24

                        vid_ReverseInteger(&Result);
 468:	ce 01       	movw	r24, r28
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	0e 94 92 00 	call	0x124	; 0x124 <vid_ReverseInteger>

                        while (Result)
 470:	20 c0       	rjmp	.+64     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
                        {
                            LCD_PutChar((Result % 10) + 48);
 472:	0f 2e       	mov	r0, r31
 474:	fa e0       	ldi	r31, 0x0A	; 10
 476:	4f 2e       	mov	r4, r31
 478:	51 2c       	mov	r5, r1
 47a:	61 2c       	mov	r6, r1
 47c:	71 2c       	mov	r7, r1
 47e:	f0 2d       	mov	r31, r0
 480:	a3 01       	movw	r20, r6
 482:	92 01       	movw	r18, r4
 484:	0e 94 50 07 	call	0xea0	; 0xea0 <__divmodsi4>
 488:	80 e3       	ldi	r24, 0x30	; 48
 48a:	86 0f       	add	r24, r22
 48c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                            Result /= 10;
 490:	69 81       	ldd	r22, Y+1	; 0x01
 492:	7a 81       	ldd	r23, Y+2	; 0x02
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	9c 81       	ldd	r25, Y+4	; 0x04
 498:	a3 01       	movw	r20, r6
 49a:	92 01       	movw	r18, r4
 49c:	0e 94 50 07 	call	0xea0	; 0xea0 <__divmodsi4>
 4a0:	29 83       	std	Y+1, r18	; 0x01
 4a2:	3a 83       	std	Y+2, r19	; 0x02
 4a4:	4b 83       	std	Y+3, r20	; 0x03
 4a6:	5c 83       	std	Y+4, r21	; 0x04

                            Count--;    
 4a8:	31 e0       	ldi	r19, 0x01	; 1
 4aa:	c3 1a       	sub	r12, r19
 4ac:	d1 08       	sbc	r13, r1
 4ae:	e1 08       	sbc	r14, r1
 4b0:	f1 08       	sbc	r15, r1
                        
                        u32 Count = vid_CountNumber(Result);

                        vid_ReverseInteger(&Result);

                        while (Result)
 4b2:	69 81       	ldd	r22, Y+1	; 0x01
 4b4:	7a 81       	ldd	r23, Y+2	; 0x02
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	9c 81       	ldd	r25, Y+4	; 0x04
 4ba:	61 15       	cp	r22, r1
 4bc:	71 05       	cpc	r23, r1
 4be:	81 05       	cpc	r24, r1
 4c0:	91 05       	cpc	r25, r1
 4c2:	b9 f6       	brne	.-82     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
                            Count--;    
                        }

                        while(Count)
                        {
                            LCD_PutChar('0');
 4c6:	80 e3       	ldi	r24, 0x30	; 48
 4c8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>
                            
                            Count--;
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	c4 1a       	sub	r12, r20
 4d0:	d1 08       	sbc	r13, r1
 4d2:	e1 08       	sbc	r14, r1
 4d4:	f1 08       	sbc	r15, r1
                            Result /= 10;

                            Count--;    
                        }

                        while(Count)
 4d6:	c1 14       	cp	r12, r1
 4d8:	d1 04       	cpc	r13, r1
 4da:	e1 04       	cpc	r14, r1
 4dc:	f1 04       	cpc	r15, r1
 4de:	99 f7       	brne	.-26     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4e0:	06 c1       	rjmp	.+524    	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
                    }

                    case 'x':
                    {
                        
                        Result = FirstDigit * SecondDigit;
 4e2:	a5 01       	movw	r20, r10
 4e4:	94 01       	movw	r18, r8
 4e6:	69 85       	ldd	r22, Y+9	; 0x09
 4e8:	7a 85       	ldd	r23, Y+10	; 0x0a
 4ea:	8b 85       	ldd	r24, Y+11	; 0x0b
 4ec:	9c 85       	ldd	r25, Y+12	; 0x0c
 4ee:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__mulsi3>
 4f2:	69 83       	std	Y+1, r22	; 0x01
 4f4:	7a 83       	std	Y+2, r23	; 0x02
 4f6:	8b 83       	std	Y+3, r24	; 0x03
 4f8:	9c 83       	std	Y+4, r25	; 0x04

                        LCD_GoToXY(0, 8);
 4fa:	68 e0       	ldi	r22, 0x08	; 8
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_GoToXY>

                        if(Result < 0 )
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	9a 81       	ldd	r25, Y+2	; 0x02
 506:	ab 81       	ldd	r26, Y+3	; 0x03
 508:	bc 81       	ldd	r27, Y+4	; 0x04
 50a:	bb 23       	and	r27, r27
 50c:	94 f4       	brge	.+36     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
                        {
                            LCD_PutChar('-');
 50e:	8d e2       	ldi	r24, 0x2D	; 45
 510:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                            Result *= -1;
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	9a 81       	ldd	r25, Y+2	; 0x02
 518:	ab 81       	ldd	r26, Y+3	; 0x03
 51a:	bc 81       	ldd	r27, Y+4	; 0x04
 51c:	b0 95       	com	r27
 51e:	a0 95       	com	r26
 520:	90 95       	com	r25
 522:	81 95       	neg	r24
 524:	9f 4f       	sbci	r25, 0xFF	; 255
 526:	af 4f       	sbci	r26, 0xFF	; 255
 528:	bf 4f       	sbci	r27, 0xFF	; 255
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	9a 83       	std	Y+2, r25	; 0x02
 52e:	ab 83       	std	Y+3, r26	; 0x03
 530:	bc 83       	std	Y+4, r27	; 0x04
                        }                        
                        
                        u32 Count = vid_CountNumber(Result);
 532:	69 81       	ldd	r22, Y+1	; 0x01
 534:	7a 81       	ldd	r23, Y+2	; 0x02
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	9c 81       	ldd	r25, Y+4	; 0x04
 53a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vid_CountNumber>
 53e:	6b 01       	movw	r12, r22
 540:	7c 01       	movw	r14, r24

                        vid_ReverseInteger(&Result);
 542:	ce 01       	movw	r24, r28
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	0e 94 92 00 	call	0x124	; 0x124 <vid_ReverseInteger>

                        while (Result)
 54a:	20 c0       	rjmp	.+64     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
                        {
                            LCD_PutChar((Result % 10) + 48);
 54c:	0f 2e       	mov	r0, r31
 54e:	fa e0       	ldi	r31, 0x0A	; 10
 550:	4f 2e       	mov	r4, r31
 552:	51 2c       	mov	r5, r1
 554:	61 2c       	mov	r6, r1
 556:	71 2c       	mov	r7, r1
 558:	f0 2d       	mov	r31, r0
 55a:	a3 01       	movw	r20, r6
 55c:	92 01       	movw	r18, r4
 55e:	0e 94 50 07 	call	0xea0	; 0xea0 <__divmodsi4>
 562:	80 e3       	ldi	r24, 0x30	; 48
 564:	86 0f       	add	r24, r22
 566:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                            Result /= 10;
 56a:	69 81       	ldd	r22, Y+1	; 0x01
 56c:	7a 81       	ldd	r23, Y+2	; 0x02
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
 570:	9c 81       	ldd	r25, Y+4	; 0x04
 572:	a3 01       	movw	r20, r6
 574:	92 01       	movw	r18, r4
 576:	0e 94 50 07 	call	0xea0	; 0xea0 <__divmodsi4>
 57a:	29 83       	std	Y+1, r18	; 0x01
 57c:	3a 83       	std	Y+2, r19	; 0x02
 57e:	4b 83       	std	Y+3, r20	; 0x03
 580:	5c 83       	std	Y+4, r21	; 0x04

                            Count--;    
 582:	51 e0       	ldi	r21, 0x01	; 1
 584:	c5 1a       	sub	r12, r21
 586:	d1 08       	sbc	r13, r1
 588:	e1 08       	sbc	r14, r1
 58a:	f1 08       	sbc	r15, r1
                        
                        u32 Count = vid_CountNumber(Result);

                        vid_ReverseInteger(&Result);

                        while (Result)
 58c:	69 81       	ldd	r22, Y+1	; 0x01
 58e:	7a 81       	ldd	r23, Y+2	; 0x02
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	9c 81       	ldd	r25, Y+4	; 0x04
 594:	61 15       	cp	r22, r1
 596:	71 05       	cpc	r23, r1
 598:	81 05       	cpc	r24, r1
 59a:	91 05       	cpc	r25, r1
 59c:	b9 f6       	brne	.-82     	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
 59e:	08 c0       	rjmp	.+16     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
                            Count--;    
                        }

                        while(Count)
                        {
                            LCD_PutChar('0');
 5a0:	80 e3       	ldi	r24, 0x30	; 48
 5a2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>
                            
                            Count--;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	c8 1a       	sub	r12, r24
 5aa:	d1 08       	sbc	r13, r1
 5ac:	e1 08       	sbc	r14, r1
 5ae:	f1 08       	sbc	r15, r1
                            Result /= 10;

                            Count--;    
                        }

                        while(Count)
 5b0:	c1 14       	cp	r12, r1
 5b2:	d1 04       	cpc	r13, r1
 5b4:	e1 04       	cpc	r14, r1
 5b6:	f1 04       	cpc	r15, r1
 5b8:	99 f7       	brne	.-26     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 5ba:	99 c0       	rjmp	.+306    	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
                        break;
                    }

                    case '/':
                    {
                        f32 FloatResultPart = (((f32)FirstDigit) / SecondDigit);
 5bc:	c5 01       	movw	r24, r10
 5be:	b4 01       	movw	r22, r8
 5c0:	0e 94 01 06 	call	0xc02	; 0xc02 <__floatsisf>
 5c4:	6b 01       	movw	r12, r22
 5c6:	7c 01       	movw	r14, r24
 5c8:	69 85       	ldd	r22, Y+9	; 0x09
 5ca:	7a 85       	ldd	r23, Y+10	; 0x0a
 5cc:	8b 85       	ldd	r24, Y+11	; 0x0b
 5ce:	9c 85       	ldd	r25, Y+12	; 0x0c
 5d0:	0e 94 01 06 	call	0xc02	; 0xc02 <__floatsisf>
 5d4:	9b 01       	movw	r18, r22
 5d6:	ac 01       	movw	r20, r24
 5d8:	c7 01       	movw	r24, r14
 5da:	b6 01       	movw	r22, r12
 5dc:	0e 94 5e 05 	call	0xabc	; 0xabc <__divsf3>
 5e0:	6d 83       	std	Y+5, r22	; 0x05
 5e2:	7e 83       	std	Y+6, r23	; 0x06
 5e4:	8f 83       	std	Y+7, r24	; 0x07
 5e6:	98 87       	std	Y+8, r25	; 0x08

                        LCD_GoToXY(0, 8);
 5e8:	68 e0       	ldi	r22, 0x08	; 8
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	0e 94 c3 04 	call	0x986	; 0x986 <LCD_GoToXY>

                        if(FloatResultPart < 0 )
 5f0:	6d 81       	ldd	r22, Y+5	; 0x05
 5f2:	7e 81       	ldd	r23, Y+6	; 0x06
 5f4:	8f 81       	ldd	r24, Y+7	; 0x07
 5f6:	98 85       	ldd	r25, Y+8	; 0x08
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	a9 01       	movw	r20, r18
 5fe:	0e 94 59 05 	call	0xab2	; 0xab2 <__cmpsf2>
 602:	88 23       	and	r24, r24
 604:	64 f4       	brge	.+24     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
                        {
                            LCD_PutChar('-');
 606:	8d e2       	ldi	r24, 0x2D	; 45
 608:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                            FloatResultPart *= -1;
 60c:	8d 81       	ldd	r24, Y+5	; 0x05
 60e:	9e 81       	ldd	r25, Y+6	; 0x06
 610:	af 81       	ldd	r26, Y+7	; 0x07
 612:	b8 85       	ldd	r27, Y+8	; 0x08
 614:	b0 58       	subi	r27, 0x80	; 128
 616:	8d 83       	std	Y+5, r24	; 0x05
 618:	9e 83       	std	Y+6, r25	; 0x06
 61a:	af 83       	std	Y+7, r26	; 0x07
 61c:	b8 87       	std	Y+8, r27	; 0x08
                        }   

                        u32 IntegerResultPart = FloatResultPart;
 61e:	cd 80       	ldd	r12, Y+5	; 0x05
 620:	de 80       	ldd	r13, Y+6	; 0x06
 622:	ef 80       	ldd	r14, Y+7	; 0x07
 624:	f8 84       	ldd	r15, Y+8	; 0x08
 626:	c7 01       	movw	r24, r14
 628:	b6 01       	movw	r22, r12
 62a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fixunssfsi>
 62e:	69 83       	std	Y+1, r22	; 0x01
 630:	7a 83       	std	Y+2, r23	; 0x02
 632:	8b 83       	std	Y+3, r24	; 0x03
 634:	9c 83       	std	Y+4, r25	; 0x04

                        FloatResultPart = FloatResultPart - (f32)IntegerResultPart;
 636:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__floatunsisf>
 63a:	9b 01       	movw	r18, r22
 63c:	ac 01       	movw	r20, r24
 63e:	c7 01       	movw	r24, r14
 640:	b6 01       	movw	r22, r12
 642:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__subsf3>
 646:	6d 83       	std	Y+5, r22	; 0x05
 648:	7e 83       	std	Y+6, r23	; 0x06
 64a:	8f 83       	std	Y+7, r24	; 0x07
 64c:	98 87       	std	Y+8, r25	; 0x08

                        u8 DecimalDigitsCount = FLOAT_PRECISION;

                        vid_ConvertFloatToInteger(&FloatResultPart, DecimalDigitsCount);
 64e:	63 e0       	ldi	r22, 0x03	; 3
 650:	ce 01       	movw	r24, r28
 652:	05 96       	adiw	r24, 0x05	; 5
 654:	0e 94 56 00 	call	0xac	; 0xac <vid_ConvertFloatToInteger>
                        
                        LCD_PutChar(IntegerResultPart + 48);
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	80 5d       	subi	r24, 0xD0	; 208
 65c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                        if(FloatResultPart != 0)
 660:	6d 81       	ldd	r22, Y+5	; 0x05
 662:	7e 81       	ldd	r23, Y+6	; 0x06
 664:	8f 81       	ldd	r24, Y+7	; 0x07
 666:	98 85       	ldd	r25, Y+8	; 0x08
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	a9 01       	movw	r20, r18
 66e:	0e 94 59 05 	call	0xab2	; 0xab2 <__cmpsf2>
 672:	88 23       	and	r24, r24
 674:	e1 f1       	breq	.+120    	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
                        {
                            LCD_PutChar('.');
 676:	8e e2       	ldi	r24, 0x2E	; 46
 678:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                            //Using IntegerResultPart for safety
                            IntegerResultPart = FloatResultPart;
 67c:	6d 81       	ldd	r22, Y+5	; 0x05
 67e:	7e 81       	ldd	r23, Y+6	; 0x06
 680:	8f 81       	ldd	r24, Y+7	; 0x07
 682:	98 85       	ldd	r25, Y+8	; 0x08
 684:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fixunssfsi>
 688:	69 83       	std	Y+1, r22	; 0x01
 68a:	7a 83       	std	Y+2, r23	; 0x02
 68c:	8b 83       	std	Y+3, r24	; 0x03
 68e:	9c 83       	std	Y+4, r25	; 0x04

                            vid_ReverseInteger(&IntegerResultPart);
 690:	ce 01       	movw	r24, r28
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	0e 94 92 00 	call	0x124	; 0x124 <vid_ReverseInteger>

                        u32 IntegerResultPart = FloatResultPart;

                        FloatResultPart = FloatResultPart - (f32)IntegerResultPart;

                        u8 DecimalDigitsCount = FLOAT_PRECISION;
 698:	03 e0       	ldi	r16, 0x03	; 3
                            //Using IntegerResultPart for safety
                            IntegerResultPart = FloatResultPart;

                            vid_ReverseInteger(&IntegerResultPart);
                            
                            while (DecimalDigitsCount)
 69a:	20 c0       	rjmp	.+64     	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
                            {
                                LCD_PutChar((IntegerResultPart % 10) + 48);
 69c:	69 81       	ldd	r22, Y+1	; 0x01
 69e:	7a 81       	ldd	r23, Y+2	; 0x02
 6a0:	8b 81       	ldd	r24, Y+3	; 0x03
 6a2:	9c 81       	ldd	r25, Y+4	; 0x04
 6a4:	0f 2e       	mov	r0, r31
 6a6:	fa e0       	ldi	r31, 0x0A	; 10
 6a8:	4f 2e       	mov	r4, r31
 6aa:	51 2c       	mov	r5, r1
 6ac:	61 2c       	mov	r6, r1
 6ae:	71 2c       	mov	r7, r1
 6b0:	f0 2d       	mov	r31, r0
 6b2:	a3 01       	movw	r20, r6
 6b4:	92 01       	movw	r18, r4
 6b6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodsi4>
 6ba:	80 e3       	ldi	r24, 0x30	; 48
 6bc:	86 0f       	add	r24, r22
 6be:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                                IntegerResultPart /= 10;
 6c2:	69 81       	ldd	r22, Y+1	; 0x01
 6c4:	7a 81       	ldd	r23, Y+2	; 0x02
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ca:	a3 01       	movw	r20, r6
 6cc:	92 01       	movw	r18, r4
 6ce:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodsi4>
 6d2:	29 83       	std	Y+1, r18	; 0x01
 6d4:	3a 83       	std	Y+2, r19	; 0x02
 6d6:	4b 83       	std	Y+3, r20	; 0x03
 6d8:	5c 83       	std	Y+4, r21	; 0x04

                                DecimalDigitsCount--;
 6da:	01 50       	subi	r16, 0x01	; 1
                            //Using IntegerResultPart for safety
                            IntegerResultPart = FloatResultPart;

                            vid_ReverseInteger(&IntegerResultPart);
                            
                            while (DecimalDigitsCount)
 6dc:	01 11       	cpse	r16, r1
 6de:	de cf       	rjmp	.-68     	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
 6e0:	04 c0       	rjmp	.+8      	; 0x6ea <__EEPROM_REGION_LENGTH__+0x2ea>
                            }

                            //To Print any lost zeroes when the num was reversed
                            while(DecimalDigitsCount)
                            {
                                LCD_PutChar('0');
 6e2:	80 e3       	ldi	r24, 0x30	; 48
 6e4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LCD_PutChar>

                                DecimalDigitsCount--;
 6e8:	01 50       	subi	r16, 0x01	; 1

                                DecimalDigitsCount--;
                            }

                            //To Print any lost zeroes when the num was reversed
                            while(DecimalDigitsCount)
 6ea:	01 11       	cpse	r16, r1
 6ec:	fa cf       	rjmp	.-12     	; 0x6e2 <__EEPROM_REGION_LENGTH__+0x2e2>
                        break;
                    }
 
                }

                CurrentState = CALCULATOR_CLEAR_RESULT;
 6ee:	05 e0       	ldi	r16, 0x05	; 5
 6f0:	8d cd       	rjmp	.-1254   	; 0x20c <Calculator+0x18>
            }
        
            case CALCULATOR_CLEAR_RESULT:
            {

                KeyPressed = keypad_scan();
 6f2:	0e 94 89 03 	call	0x712	; 0x712 <keypad_scan>

                if ( KeyPressed == '*' )
 6f6:	8a 32       	cpi	r24, 0x2A	; 42
 6f8:	09 f0       	breq	.+2      	; 0x6fc <__EEPROM_REGION_LENGTH__+0x2fc>
 6fa:	88 cd       	rjmp	.-1264   	; 0x20c <Calculator+0x18>
                {

                    LCD_Clear();
 6fc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <LCD_Clear>

                    CurrentState = CALCULATOR_FIRST_DIGIT;
 700:	00 e0       	ldi	r16, 0x00	; 0
 702:	84 cd       	rjmp	.-1272   	; 0x20c <Calculator+0x18>

00000704 <main>:
#define F_CPU 16000000UL

int main(void)
{
	
	CalculatorInitialzie();
 704:	0e 94 53 00 	call	0xa6	; 0xa6 <CalculatorInitialzie>

	Calculator();
 708:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Calculator>
	
}
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	08 95       	ret

00000712 <keypad_scan>:
	{'*','0','=','/'},
};

char keypad_scan()
{
	INPUT_PORT_DIRECTION &=~0xFF;//rows as inputs
 712:	87 b1       	in	r24, 0x07	; 7
 714:	17 b8       	out	0x07, r1	; 7
	OUTPUT_PORT_DIRECTION &=~0xFF;//columns
 716:	84 b1       	in	r24, 0x04	; 4
 718:	14 b8       	out	0x04, r1	; 4

	//Activating Pull up resistor for PORTC 0:3
	INPUR_PORT |= 0xFF;
 71a:	88 b1       	in	r24, 0x08	; 8
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	88 b9       	out	0x08, r24	; 8
	
	for(int i=0; i<4; i++)
 720:	40 e0       	ldi	r20, 0x00	; 0
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	b1 c0       	rjmp	.+354    	; 0x888 <__DATA_REGION_LENGTH__+0x88>
	{
		OUTPUT_PORT_DIRECTION |= (1 << i);
 726:	24 b1       	in	r18, 0x04	; 4
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	04 2e       	mov	r0, r20
 72e:	02 c0       	rjmp	.+4      	; 0x734 <keypad_scan+0x22>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	0a 94       	dec	r0
 736:	e2 f7       	brpl	.-8      	; 0x730 <keypad_scan+0x1e>
 738:	92 2f       	mov	r25, r18
 73a:	98 2b       	or	r25, r24
 73c:	94 b9       	out	0x04, r25	; 4
		OUTPUT_PORT &= ~(1<<i); // Moves on the columns and puts 0 according to the turn
 73e:	95 b1       	in	r25, 0x05	; 5
 740:	80 95       	com	r24
 742:	89 23       	and	r24, r25
 744:	85 b9       	out	0x05, r24	; 5
		
		for(int j=0; j<4; j++)
 746:	20 e0       	ldi	r18, 0x00	; 0
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	96 c0       	rjmp	.+300    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
		{
			if( (INPUT_PIN & (1 << j)) == 0) // checks if input from rows is also 0 (Active Low)
 74c:	86 b1       	in	r24, 0x06	; 6
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 2e       	mov	r0, r18
 752:	02 c0       	rjmp	.+4      	; 0x758 <keypad_scan+0x46>
 754:	95 95       	asr	r25
 756:	87 95       	ror	r24
 758:	0a 94       	dec	r0
 75a:	e2 f7       	brpl	.-8      	; 0x754 <keypad_scan+0x42>
 75c:	80 fd       	sbrc	r24, 0
 75e:	8a c0       	rjmp	.+276    	; 0x874 <__DATA_REGION_LENGTH__+0x74>

static inline void debounce(int Row){
	
	static int count = 0;
	static int button_state = 0;
	int current_state = (~INPUT_PIN & (1<<Row)) != 0;
 760:	86 b1       	in	r24, 0x06	; 6
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	80 95       	com	r24
 766:	90 95       	com	r25
 768:	02 2e       	mov	r0, r18
 76a:	02 c0       	rjmp	.+4      	; 0x770 <keypad_scan+0x5e>
 76c:	95 95       	asr	r25
 76e:	87 95       	ror	r24
 770:	0a 94       	dec	r0
 772:	e2 f7       	brpl	.-8      	; 0x76c <keypad_scan+0x5a>
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	fc 01       	movw	r30, r24
 778:	e1 70       	andi	r30, 0x01	; 1
 77a:	ff 27       	eor	r31, r31
 77c:	80 ff       	sbrs	r24, 0
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	86 2f       	mov	r24, r22
 782:	90 e0       	ldi	r25, 0x00	; 0
	
	if (current_state != button_state)
 784:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <button_state.1734>
 788:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <button_state.1734+0x1>
 78c:	86 17       	cp	r24, r22
 78e:	97 07       	cpc	r25, r23
 790:	f9 f0       	breq	.+62     	; 0x7d0 <keypad_scan+0xbe>
	{        
		 count++;
 792:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 796:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 79a:	6f 5f       	subi	r22, 0xFF	; 255
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
 7a2:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
		 
		if (count >= 4) {
 7a6:	64 30       	cpi	r22, 0x04	; 4
 7a8:	71 05       	cpc	r23, r1
 7aa:	0c f4       	brge	.+2      	; 0x7ae <keypad_scan+0x9c>
 7ac:	51 c0       	rjmp	.+162    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			
			button_state = current_state;
 7ae:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <button_state.1734+0x1>
 7b2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <button_state.1734>
			if (current_state != 0) button = 1;
 7b6:	ef 2b       	or	r30, r31
 7b8:	31 f0       	breq	.+12     	; 0x7c6 <keypad_scan+0xb4>
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <button+0x1>
 7c2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <button>
			count = 0;
 7c6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 7ca:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 7ce:	40 c0       	rjmp	.+128    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		}
	}
	else count = 0;
 7d0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 7d4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 7d8:	3b c0       	rjmp	.+118    	; 0x850 <__DATA_REGION_LENGTH__+0x50>

static inline void debounce(int Row){
	
	static int count = 0;
	static int button_state = 0;
	int current_state = (~INPUT_PIN & (1<<Row)) != 0;
 7da:	86 b1       	in	r24, 0x06	; 6
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	80 95       	com	r24
 7e0:	90 95       	com	r25
 7e2:	02 2e       	mov	r0, r18
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <keypad_scan+0xd8>
 7e6:	95 95       	asr	r25
 7e8:	87 95       	ror	r24
 7ea:	0a 94       	dec	r0
 7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <keypad_scan+0xd4>
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	fc 01       	movw	r30, r24
 7f2:	e1 70       	andi	r30, 0x01	; 1
 7f4:	ff 27       	eor	r31, r31
 7f6:	80 ff       	sbrs	r24, 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	86 2f       	mov	r24, r22
 7fc:	90 e0       	ldi	r25, 0x00	; 0
	
	if (current_state != button_state)
 7fe:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <button_state.1734>
 802:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <button_state.1734+0x1>
 806:	86 17       	cp	r24, r22
 808:	97 07       	cpc	r25, r23
 80a:	f1 f0       	breq	.+60     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
	{        
		 count++;
 80c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 810:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 814:	6f 5f       	subi	r22, 0xFF	; 255
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
 81c:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
		 
		if (count >= 4) {
 820:	64 30       	cpi	r22, 0x04	; 4
 822:	71 05       	cpc	r23, r1
 824:	ac f0       	brlt	.+42     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
			
			button_state = current_state;
 826:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <button_state.1734+0x1>
 82a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <button_state.1734>
			if (current_state != 0) button = 1;
 82e:	ef 2b       	or	r30, r31
 830:	31 f0       	breq	.+12     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <button+0x1>
 83a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <button>
			count = 0;
 83e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 842:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 846:	04 c0       	rjmp	.+8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		}
	}
	else count = 0;
 848:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 84c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			{
				debounce(j);
				
				while(button == 0) debounce(j); //handling long press on key in the function
 850:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <button>
 854:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <button+0x1>
 858:	89 2b       	or	r24, r25
 85a:	09 f4       	brne	.+2      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 85c:	be cf       	rjmp	.-132    	; 0x7da <keypad_scan+0xc8>
				
				return key[j][i];
 85e:	22 0f       	add	r18, r18
 860:	33 1f       	adc	r19, r19
 862:	22 0f       	add	r18, r18
 864:	33 1f       	adc	r19, r19
 866:	20 50       	subi	r18, 0x00	; 0
 868:	3f 4f       	sbci	r19, 0xFF	; 255
 86a:	f9 01       	movw	r30, r18
 86c:	e4 0f       	add	r30, r20
 86e:	f5 1f       	adc	r31, r21
 870:	80 81       	ld	r24, Z
 872:	08 95       	ret
	for(int i=0; i<4; i++)
	{
		OUTPUT_PORT_DIRECTION |= (1 << i);
		OUTPUT_PORT &= ~(1<<i); // Moves on the columns and puts 0 according to the turn
		
		for(int j=0; j<4; j++)
 874:	2f 5f       	subi	r18, 0xFF	; 255
 876:	3f 4f       	sbci	r19, 0xFF	; 255
 878:	24 30       	cpi	r18, 0x04	; 4
 87a:	31 05       	cpc	r19, r1
 87c:	0c f4       	brge	.+2      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 87e:	66 cf       	rjmp	.-308    	; 0x74c <keypad_scan+0x3a>
				return key[j][i];
			}
			
		}
		
		OUTPUT_PORT_DIRECTION &= ~0xFF; // Resets all port output to 1
 880:	84 b1       	in	r24, 0x04	; 4
 882:	14 b8       	out	0x04, r1	; 4
	OUTPUT_PORT_DIRECTION &=~0xFF;//columns

	//Activating Pull up resistor for PORTC 0:3
	INPUR_PORT |= 0xFF;
	
	for(int i=0; i<4; i++)
 884:	4f 5f       	subi	r20, 0xFF	; 255
 886:	5f 4f       	sbci	r21, 0xFF	; 255
 888:	44 30       	cpi	r20, 0x04	; 4
 88a:	51 05       	cpc	r21, r1
 88c:	0c f4       	brge	.+2      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 88e:	4b cf       	rjmp	.-362    	; 0x726 <keypad_scan+0x14>
		
		OUTPUT_PORT_DIRECTION &= ~0xFF; // Resets all port output to 1
		
	}
	
	return KEYPAD_DEFAULT_VALUE; // clear the buffer key press to avoid condition mishandling 
 890:	8f ef       	ldi	r24, 0xFF	; 255
 892:	08 95       	ret

00000894 <lcd_reset>:
char columnCount;
char lastPOSx;

void lcd_reset()
{
	    lcd_port_dir=0XFF;
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	8a b9       	out	0x0a, r24	; 10
        lcd_port = 0xFF;
 898:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 89a:	2f ef       	ldi	r18, 0xFF	; 255
 89c:	89 ef       	ldi	r24, 0xF9	; 249
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	21 50       	subi	r18, 0x01	; 1
 8a2:	80 40       	sbci	r24, 0x00	; 0
 8a4:	90 40       	sbci	r25, 0x00	; 0
 8a6:	e1 f7       	brne	.-8      	; 0x8a0 <lcd_reset+0xc>
 8a8:	00 c0       	rjmp	.+0      	; 0x8aa <lcd_reset+0x16>
 8aa:	00 00       	nop
        _delay_ms(20);
        lcd_port = 0x03+LCD_EN;
 8ac:	93 e8       	ldi	r25, 0x83	; 131
 8ae:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
 8b0:	83 e0       	ldi	r24, 0x03	; 3
 8b2:	8b b9       	out	0x0b, r24	; 11
 8b4:	ef e3       	ldi	r30, 0x3F	; 63
 8b6:	fc e9       	ldi	r31, 0x9C	; 156
 8b8:	31 97       	sbiw	r30, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <lcd_reset+0x24>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <lcd_reset+0x2a>
 8be:	00 00       	nop
        _delay_ms(10);
        lcd_port = 0x03+LCD_EN;
 8c0:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
 8c2:	8b b9       	out	0x0b, r24	; 11
 8c4:	ef e9       	ldi	r30, 0x9F	; 159
 8c6:	ff e0       	ldi	r31, 0x0F	; 15
 8c8:	31 97       	sbiw	r30, 0x01	; 1
 8ca:	f1 f7       	brne	.-4      	; 0x8c8 <lcd_reset+0x34>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <lcd_reset+0x3a>
 8ce:	00 00       	nop
        _delay_ms(1);
        lcd_port = 0x03+LCD_EN;
 8d0:	9b b9       	out	0x0b, r25	; 11
        lcd_port = 0x03;
 8d2:	8b b9       	out	0x0b, r24	; 11
 8d4:	8f e9       	ldi	r24, 0x9F	; 159
 8d6:	9f e0       	ldi	r25, 0x0F	; 15
 8d8:	01 97       	sbiw	r24, 0x01	; 1
 8da:	f1 f7       	brne	.-4      	; 0x8d8 <lcd_reset+0x44>
 8dc:	00 c0       	rjmp	.+0      	; 0x8de <lcd_reset+0x4a>
 8de:	00 00       	nop
        _delay_ms(1);
        lcd_port = 0x02+LCD_EN;
 8e0:	82 e8       	ldi	r24, 0x82	; 130
 8e2:	8b b9       	out	0x0b, r24	; 11
        lcd_port = 0x02;
 8e4:	82 e0       	ldi	r24, 0x02	; 2
 8e6:	8b b9       	out	0x0b, r24	; 11
 8e8:	ef e9       	ldi	r30, 0x9F	; 159
 8ea:	ff e0       	ldi	r31, 0x0F	; 15
 8ec:	31 97       	sbiw	r30, 0x01	; 1
 8ee:	f1 f7       	brne	.-4      	; 0x8ec <lcd_reset+0x58>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <lcd_reset+0x5e>
 8f2:	00 00       	nop
 8f4:	08 95       	ret

000008f6 <lcd_cmd>:
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 }
 void lcd_cmd (char cmd)
{
        lcd_port = ((cmd >> 4) & 0x0F)|LCD_EN;
 8f6:	98 2f       	mov	r25, r24
 8f8:	92 95       	swap	r25
 8fa:	9f 70       	andi	r25, 0x0F	; 15
 8fc:	29 2f       	mov	r18, r25
 8fe:	20 68       	ori	r18, 0x80	; 128
 900:	2b b9       	out	0x0b, r18	; 11
        lcd_port = ((cmd >> 4) & 0x0F);
 902:	9b b9       	out	0x0b, r25	; 11

        lcd_port = (cmd & 0x0F)|LCD_EN;
 904:	8f 70       	andi	r24, 0x0F	; 15
 906:	98 2f       	mov	r25, r24
 908:	90 68       	ori	r25, 0x80	; 128
 90a:	9b b9       	out	0x0b, r25	; 11
        lcd_port = (cmd & 0x0F);
 90c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 90e:	8f e1       	ldi	r24, 0x1F	; 31
 910:	93 e0       	ldi	r25, 0x03	; 3
 912:	01 97       	sbiw	r24, 0x01	; 1
 914:	f1 f7       	brne	.-4      	; 0x912 <__stack+0x13>
 916:	00 c0       	rjmp	.+0      	; 0x918 <__stack+0x19>
 918:	00 00       	nop
 91a:	8f e1       	ldi	r24, 0x1F	; 31
 91c:	93 e0       	ldi	r25, 0x03	; 3
 91e:	01 97       	sbiw	r24, 0x01	; 1
 920:	f1 f7       	brne	.-4      	; 0x91e <__stack+0x1f>
 922:	00 c0       	rjmp	.+0      	; 0x924 <__stack+0x25>
 924:	00 00       	nop
 926:	08 95       	ret

00000928 <LCD_Init>:
        _delay_ms(1);
}

void LCD_Init(void)
{
	columnCount= 16;
 928:	80 e1       	ldi	r24, 0x10	; 16
 92a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <columnCount>
	lastPOSx=0;
 92e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <lastPOSx>
        lcd_reset();         // Call LCD reset
 932:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_reset>
        lcd_cmd(0x28);       // 4-bit mode - 2 line - 5x7 font. 
 936:	88 e2       	ldi	r24, 0x28	; 40
 938:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <lcd_cmd>
        lcd_cmd(0x0c);       // Display no cursor - no blink.
 93c:	8c e0       	ldi	r24, 0x0C	; 12
 93e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <lcd_cmd>
        lcd_cmd(0x06);       // Automatic Increment - No Display shift.
 942:	86 e0       	ldi	r24, 0x06	; 6
 944:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <lcd_cmd>
        lcd_cmd(0x80);       // Address DDRAM with 0 offset 80h.
 948:	80 e8       	ldi	r24, 0x80	; 128
 94a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <lcd_cmd>
 94e:	08 95       	ret

00000950 <lcd_data>:
}

//Print character
void lcd_data (unsigned char dat)
{
        lcd_port = (((dat >> 4) & 0x0F)|LCD_EN|LCD_RS);
 950:	98 2f       	mov	r25, r24
 952:	92 95       	swap	r25
 954:	9f 70       	andi	r25, 0x0F	; 15
 956:	29 2f       	mov	r18, r25
 958:	20 6a       	ori	r18, 0xA0	; 160
 95a:	2b b9       	out	0x0b, r18	; 11
        lcd_port = (((dat >> 4) & 0x0F)|LCD_RS);
 95c:	90 62       	ori	r25, 0x20	; 32
 95e:	9b b9       	out	0x0b, r25	; 11
       
        lcd_port = ((dat & 0x0F)|LCD_EN|LCD_RS);
 960:	8f 70       	andi	r24, 0x0F	; 15
 962:	98 2f       	mov	r25, r24
 964:	90 6a       	ori	r25, 0xA0	; 160
 966:	9b b9       	out	0x0b, r25	; 11
        lcd_port = ((dat & 0x0F)|LCD_RS);
 968:	80 62       	ori	r24, 0x20	; 32
 96a:	8b b9       	out	0x0b, r24	; 11
 96c:	8f e1       	ldi	r24, 0x1F	; 31
 96e:	93 e0       	ldi	r25, 0x03	; 3
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	f1 f7       	brne	.-4      	; 0x970 <lcd_data+0x20>
 974:	00 c0       	rjmp	.+0      	; 0x976 <lcd_data+0x26>
 976:	00 00       	nop
 978:	8f e1       	ldi	r24, 0x1F	; 31
 97a:	93 e0       	ldi	r25, 0x03	; 3
 97c:	01 97       	sbiw	r24, 0x01	; 1
 97e:	f1 f7       	brne	.-4      	; 0x97c <lcd_data+0x2c>
 980:	00 c0       	rjmp	.+0      	; 0x982 <lcd_data+0x32>
 982:	00 00       	nop
 984:	08 95       	ret

00000986 <LCD_GoToXY>:
}

//Go to Location
void LCD_GoToXY(char posX,char posY)
{
    if (posX==0 ) 
 986:	81 11       	cpse	r24, r1
 988:	05 c0       	rjmp	.+10     	; 0x994 <LCD_GoToXY+0xe>
        lcd_cmd((1<<7)+0x00+posY);
 98a:	80 e8       	ldi	r24, 0x80	; 128
 98c:	86 0f       	add	r24, r22
 98e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <lcd_cmd>
 992:	07 c0       	rjmp	.+14     	; 0x9a2 <LCD_GoToXY+0x1c>
    else
	{
        lcd_cmd((1<<7)+0x40+posY);
 994:	80 ec       	ldi	r24, 0xC0	; 192
 996:	86 0f       	add	r24, r22
 998:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <lcd_cmd>
	lastPOSx=1;
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <lastPOSx>
 9a2:	85 ed       	ldi	r24, 0xD5	; 213
 9a4:	8a 95       	dec	r24
 9a6:	f1 f7       	brne	.-4      	; 0x9a4 <LCD_GoToXY+0x1e>
 9a8:	00 00       	nop
 9aa:	08 95       	ret

000009ac <LCD_Clear>:
}

//Clears Page
void LCD_Clear(void)
{
	lcd_cmd(0x01);
 9ac:	81 e0       	ldi	r24, 0x01	; 1
 9ae:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9b2:	8f e3       	ldi	r24, 0x3F	; 63
 9b4:	9f e1       	ldi	r25, 0x1F	; 31
 9b6:	01 97       	sbiw	r24, 0x01	; 1
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <LCD_Clear+0xa>
 9ba:	00 c0       	rjmp	.+0      	; 0x9bc <LCD_Clear+0x10>
 9bc:	00 00       	nop
	_delay_ms(2);
	lcd_cmd(0x02);
 9be:	82 e0       	ldi	r24, 0x02	; 2
 9c0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <lcd_cmd>
 9c4:	8f e3       	ldi	r24, 0x3F	; 63
 9c6:	9f e1       	ldi	r25, 0x1F	; 31
 9c8:	01 97       	sbiw	r24, 0x01	; 1
 9ca:	f1 f7       	brne	.-4      	; 0x9c8 <LCD_Clear+0x1c>
 9cc:	00 c0       	rjmp	.+0      	; 0x9ce <LCD_Clear+0x22>
 9ce:	00 00       	nop
 9d0:	08 95       	ret

000009d2 <LCD_PutChar>:
}

//Prints Char
void LCD_PutChar(unsigned char data)
{
	lcd_data(data);
 9d2:	0e 94 a8 04 	call	0x950	; 0x950 <lcd_data>
 9d6:	08 95       	ret

000009d8 <__subsf3>:
 9d8:	50 58       	subi	r21, 0x80	; 128

000009da <__addsf3>:
 9da:	bb 27       	eor	r27, r27
 9dc:	aa 27       	eor	r26, r26
 9de:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3x>
 9e2:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_round>
 9e6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscA>
 9ea:	38 f0       	brcs	.+14     	; 0x9fa <__addsf3+0x20>
 9ec:	0e 94 70 06 	call	0xce0	; 0xce0 <__fp_pscB>
 9f0:	20 f0       	brcs	.+8      	; 0x9fa <__addsf3+0x20>
 9f2:	39 f4       	brne	.+14     	; 0xa02 <__addsf3+0x28>
 9f4:	9f 3f       	cpi	r25, 0xFF	; 255
 9f6:	19 f4       	brne	.+6      	; 0x9fe <__addsf3+0x24>
 9f8:	26 f4       	brtc	.+8      	; 0xa02 <__addsf3+0x28>
 9fa:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_nan>
 9fe:	0e f4       	brtc	.+2      	; 0xa02 <__addsf3+0x28>
 a00:	e0 95       	com	r30
 a02:	e7 fb       	bst	r30, 7
 a04:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_inf>

00000a08 <__addsf3x>:
 a08:	e9 2f       	mov	r30, r25
 a0a:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_split3>
 a0e:	58 f3       	brcs	.-42     	; 0x9e6 <__addsf3+0xc>
 a10:	ba 17       	cp	r27, r26
 a12:	62 07       	cpc	r22, r18
 a14:	73 07       	cpc	r23, r19
 a16:	84 07       	cpc	r24, r20
 a18:	95 07       	cpc	r25, r21
 a1a:	20 f0       	brcs	.+8      	; 0xa24 <__addsf3x+0x1c>
 a1c:	79 f4       	brne	.+30     	; 0xa3c <__addsf3x+0x34>
 a1e:	a6 f5       	brtc	.+104    	; 0xa88 <__addsf3x+0x80>
 a20:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_zero>
 a24:	0e f4       	brtc	.+2      	; 0xa28 <__addsf3x+0x20>
 a26:	e0 95       	com	r30
 a28:	0b 2e       	mov	r0, r27
 a2a:	ba 2f       	mov	r27, r26
 a2c:	a0 2d       	mov	r26, r0
 a2e:	0b 01       	movw	r0, r22
 a30:	b9 01       	movw	r22, r18
 a32:	90 01       	movw	r18, r0
 a34:	0c 01       	movw	r0, r24
 a36:	ca 01       	movw	r24, r20
 a38:	a0 01       	movw	r20, r0
 a3a:	11 24       	eor	r1, r1
 a3c:	ff 27       	eor	r31, r31
 a3e:	59 1b       	sub	r21, r25
 a40:	99 f0       	breq	.+38     	; 0xa68 <__addsf3x+0x60>
 a42:	59 3f       	cpi	r21, 0xF9	; 249
 a44:	50 f4       	brcc	.+20     	; 0xa5a <__addsf3x+0x52>
 a46:	50 3e       	cpi	r21, 0xE0	; 224
 a48:	68 f1       	brcs	.+90     	; 0xaa4 <__addsf3x+0x9c>
 a4a:	1a 16       	cp	r1, r26
 a4c:	f0 40       	sbci	r31, 0x00	; 0
 a4e:	a2 2f       	mov	r26, r18
 a50:	23 2f       	mov	r18, r19
 a52:	34 2f       	mov	r19, r20
 a54:	44 27       	eor	r20, r20
 a56:	58 5f       	subi	r21, 0xF8	; 248
 a58:	f3 cf       	rjmp	.-26     	; 0xa40 <__addsf3x+0x38>
 a5a:	46 95       	lsr	r20
 a5c:	37 95       	ror	r19
 a5e:	27 95       	ror	r18
 a60:	a7 95       	ror	r26
 a62:	f0 40       	sbci	r31, 0x00	; 0
 a64:	53 95       	inc	r21
 a66:	c9 f7       	brne	.-14     	; 0xa5a <__addsf3x+0x52>
 a68:	7e f4       	brtc	.+30     	; 0xa88 <__addsf3x+0x80>
 a6a:	1f 16       	cp	r1, r31
 a6c:	ba 0b       	sbc	r27, r26
 a6e:	62 0b       	sbc	r22, r18
 a70:	73 0b       	sbc	r23, r19
 a72:	84 0b       	sbc	r24, r20
 a74:	ba f0       	brmi	.+46     	; 0xaa4 <__addsf3x+0x9c>
 a76:	91 50       	subi	r25, 0x01	; 1
 a78:	a1 f0       	breq	.+40     	; 0xaa2 <__addsf3x+0x9a>
 a7a:	ff 0f       	add	r31, r31
 a7c:	bb 1f       	adc	r27, r27
 a7e:	66 1f       	adc	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	c2 f7       	brpl	.-16     	; 0xa76 <__addsf3x+0x6e>
 a86:	0e c0       	rjmp	.+28     	; 0xaa4 <__addsf3x+0x9c>
 a88:	ba 0f       	add	r27, r26
 a8a:	62 1f       	adc	r22, r18
 a8c:	73 1f       	adc	r23, r19
 a8e:	84 1f       	adc	r24, r20
 a90:	48 f4       	brcc	.+18     	; 0xaa4 <__addsf3x+0x9c>
 a92:	87 95       	ror	r24
 a94:	77 95       	ror	r23
 a96:	67 95       	ror	r22
 a98:	b7 95       	ror	r27
 a9a:	f7 95       	ror	r31
 a9c:	9e 3f       	cpi	r25, 0xFE	; 254
 a9e:	08 f0       	brcs	.+2      	; 0xaa2 <__addsf3x+0x9a>
 aa0:	b0 cf       	rjmp	.-160    	; 0xa02 <__addsf3+0x28>
 aa2:	93 95       	inc	r25
 aa4:	88 0f       	add	r24, r24
 aa6:	08 f0       	brcs	.+2      	; 0xaaa <__addsf3x+0xa2>
 aa8:	99 27       	eor	r25, r25
 aaa:	ee 0f       	add	r30, r30
 aac:	97 95       	ror	r25
 aae:	87 95       	ror	r24
 ab0:	08 95       	ret

00000ab2 <__cmpsf2>:
 ab2:	0e 94 3c 06 	call	0xc78	; 0xc78 <__fp_cmp>
 ab6:	08 f4       	brcc	.+2      	; 0xaba <__cmpsf2+0x8>
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	08 95       	ret

00000abc <__divsf3>:
 abc:	0e 94 72 05 	call	0xae4	; 0xae4 <__divsf3x>
 ac0:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_round>
 ac4:	0e 94 70 06 	call	0xce0	; 0xce0 <__fp_pscB>
 ac8:	58 f0       	brcs	.+22     	; 0xae0 <__divsf3+0x24>
 aca:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscA>
 ace:	40 f0       	brcs	.+16     	; 0xae0 <__divsf3+0x24>
 ad0:	29 f4       	brne	.+10     	; 0xadc <__divsf3+0x20>
 ad2:	5f 3f       	cpi	r21, 0xFF	; 255
 ad4:	29 f0       	breq	.+10     	; 0xae0 <__divsf3+0x24>
 ad6:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_inf>
 ada:	51 11       	cpse	r21, r1
 adc:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_szero>
 ae0:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_nan>

00000ae4 <__divsf3x>:
 ae4:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_split3>
 ae8:	68 f3       	brcs	.-38     	; 0xac4 <__divsf3+0x8>

00000aea <__divsf3_pse>:
 aea:	99 23       	and	r25, r25
 aec:	b1 f3       	breq	.-20     	; 0xada <__divsf3+0x1e>
 aee:	55 23       	and	r21, r21
 af0:	91 f3       	breq	.-28     	; 0xad6 <__divsf3+0x1a>
 af2:	95 1b       	sub	r25, r21
 af4:	55 0b       	sbc	r21, r21
 af6:	bb 27       	eor	r27, r27
 af8:	aa 27       	eor	r26, r26
 afa:	62 17       	cp	r22, r18
 afc:	73 07       	cpc	r23, r19
 afe:	84 07       	cpc	r24, r20
 b00:	38 f0       	brcs	.+14     	; 0xb10 <__divsf3_pse+0x26>
 b02:	9f 5f       	subi	r25, 0xFF	; 255
 b04:	5f 4f       	sbci	r21, 0xFF	; 255
 b06:	22 0f       	add	r18, r18
 b08:	33 1f       	adc	r19, r19
 b0a:	44 1f       	adc	r20, r20
 b0c:	aa 1f       	adc	r26, r26
 b0e:	a9 f3       	breq	.-22     	; 0xafa <__divsf3_pse+0x10>
 b10:	35 d0       	rcall	.+106    	; 0xb7c <__divsf3_pse+0x92>
 b12:	0e 2e       	mov	r0, r30
 b14:	3a f0       	brmi	.+14     	; 0xb24 <__divsf3_pse+0x3a>
 b16:	e0 e8       	ldi	r30, 0x80	; 128
 b18:	32 d0       	rcall	.+100    	; 0xb7e <__divsf3_pse+0x94>
 b1a:	91 50       	subi	r25, 0x01	; 1
 b1c:	50 40       	sbci	r21, 0x00	; 0
 b1e:	e6 95       	lsr	r30
 b20:	00 1c       	adc	r0, r0
 b22:	ca f7       	brpl	.-14     	; 0xb16 <__divsf3_pse+0x2c>
 b24:	2b d0       	rcall	.+86     	; 0xb7c <__divsf3_pse+0x92>
 b26:	fe 2f       	mov	r31, r30
 b28:	29 d0       	rcall	.+82     	; 0xb7c <__divsf3_pse+0x92>
 b2a:	66 0f       	add	r22, r22
 b2c:	77 1f       	adc	r23, r23
 b2e:	88 1f       	adc	r24, r24
 b30:	bb 1f       	adc	r27, r27
 b32:	26 17       	cp	r18, r22
 b34:	37 07       	cpc	r19, r23
 b36:	48 07       	cpc	r20, r24
 b38:	ab 07       	cpc	r26, r27
 b3a:	b0 e8       	ldi	r27, 0x80	; 128
 b3c:	09 f0       	breq	.+2      	; 0xb40 <__divsf3_pse+0x56>
 b3e:	bb 0b       	sbc	r27, r27
 b40:	80 2d       	mov	r24, r0
 b42:	bf 01       	movw	r22, r30
 b44:	ff 27       	eor	r31, r31
 b46:	93 58       	subi	r25, 0x83	; 131
 b48:	5f 4f       	sbci	r21, 0xFF	; 255
 b4a:	3a f0       	brmi	.+14     	; 0xb5a <__divsf3_pse+0x70>
 b4c:	9e 3f       	cpi	r25, 0xFE	; 254
 b4e:	51 05       	cpc	r21, r1
 b50:	78 f0       	brcs	.+30     	; 0xb70 <__divsf3_pse+0x86>
 b52:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_inf>
 b56:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_szero>
 b5a:	5f 3f       	cpi	r21, 0xFF	; 255
 b5c:	e4 f3       	brlt	.-8      	; 0xb56 <__divsf3_pse+0x6c>
 b5e:	98 3e       	cpi	r25, 0xE8	; 232
 b60:	d4 f3       	brlt	.-12     	; 0xb56 <__divsf3_pse+0x6c>
 b62:	86 95       	lsr	r24
 b64:	77 95       	ror	r23
 b66:	67 95       	ror	r22
 b68:	b7 95       	ror	r27
 b6a:	f7 95       	ror	r31
 b6c:	9f 5f       	subi	r25, 0xFF	; 255
 b6e:	c9 f7       	brne	.-14     	; 0xb62 <__divsf3_pse+0x78>
 b70:	88 0f       	add	r24, r24
 b72:	91 1d       	adc	r25, r1
 b74:	96 95       	lsr	r25
 b76:	87 95       	ror	r24
 b78:	97 f9       	bld	r25, 7
 b7a:	08 95       	ret
 b7c:	e1 e0       	ldi	r30, 0x01	; 1
 b7e:	66 0f       	add	r22, r22
 b80:	77 1f       	adc	r23, r23
 b82:	88 1f       	adc	r24, r24
 b84:	bb 1f       	adc	r27, r27
 b86:	62 17       	cp	r22, r18
 b88:	73 07       	cpc	r23, r19
 b8a:	84 07       	cpc	r24, r20
 b8c:	ba 07       	cpc	r27, r26
 b8e:	20 f0       	brcs	.+8      	; 0xb98 <__divsf3_pse+0xae>
 b90:	62 1b       	sub	r22, r18
 b92:	73 0b       	sbc	r23, r19
 b94:	84 0b       	sbc	r24, r20
 b96:	ba 0b       	sbc	r27, r26
 b98:	ee 1f       	adc	r30, r30
 b9a:	88 f7       	brcc	.-30     	; 0xb7e <__divsf3_pse+0x94>
 b9c:	e0 95       	com	r30
 b9e:	08 95       	ret

00000ba0 <__fixunssfsi>:
 ba0:	0e 94 90 06 	call	0xd20	; 0xd20 <__fp_splitA>
 ba4:	88 f0       	brcs	.+34     	; 0xbc8 <__fixunssfsi+0x28>
 ba6:	9f 57       	subi	r25, 0x7F	; 127
 ba8:	98 f0       	brcs	.+38     	; 0xbd0 <__fixunssfsi+0x30>
 baa:	b9 2f       	mov	r27, r25
 bac:	99 27       	eor	r25, r25
 bae:	b7 51       	subi	r27, 0x17	; 23
 bb0:	b0 f0       	brcs	.+44     	; 0xbde <__fixunssfsi+0x3e>
 bb2:	e1 f0       	breq	.+56     	; 0xbec <__fixunssfsi+0x4c>
 bb4:	66 0f       	add	r22, r22
 bb6:	77 1f       	adc	r23, r23
 bb8:	88 1f       	adc	r24, r24
 bba:	99 1f       	adc	r25, r25
 bbc:	1a f0       	brmi	.+6      	; 0xbc4 <__fixunssfsi+0x24>
 bbe:	ba 95       	dec	r27
 bc0:	c9 f7       	brne	.-14     	; 0xbb4 <__fixunssfsi+0x14>
 bc2:	14 c0       	rjmp	.+40     	; 0xbec <__fixunssfsi+0x4c>
 bc4:	b1 30       	cpi	r27, 0x01	; 1
 bc6:	91 f0       	breq	.+36     	; 0xbec <__fixunssfsi+0x4c>
 bc8:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_zero>
 bcc:	b1 e0       	ldi	r27, 0x01	; 1
 bce:	08 95       	ret
 bd0:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__fp_zero>
 bd4:	67 2f       	mov	r22, r23
 bd6:	78 2f       	mov	r23, r24
 bd8:	88 27       	eor	r24, r24
 bda:	b8 5f       	subi	r27, 0xF8	; 248
 bdc:	39 f0       	breq	.+14     	; 0xbec <__fixunssfsi+0x4c>
 bde:	b9 3f       	cpi	r27, 0xF9	; 249
 be0:	cc f3       	brlt	.-14     	; 0xbd4 <__fixunssfsi+0x34>
 be2:	86 95       	lsr	r24
 be4:	77 95       	ror	r23
 be6:	67 95       	ror	r22
 be8:	b3 95       	inc	r27
 bea:	d9 f7       	brne	.-10     	; 0xbe2 <__fixunssfsi+0x42>
 bec:	3e f4       	brtc	.+14     	; 0xbfc <__fixunssfsi+0x5c>
 bee:	90 95       	com	r25
 bf0:	80 95       	com	r24
 bf2:	70 95       	com	r23
 bf4:	61 95       	neg	r22
 bf6:	7f 4f       	sbci	r23, 0xFF	; 255
 bf8:	8f 4f       	sbci	r24, 0xFF	; 255
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	08 95       	ret

00000bfe <__floatunsisf>:
 bfe:	e8 94       	clt
 c00:	09 c0       	rjmp	.+18     	; 0xc14 <__floatsisf+0x12>

00000c02 <__floatsisf>:
 c02:	97 fb       	bst	r25, 7
 c04:	3e f4       	brtc	.+14     	; 0xc14 <__floatsisf+0x12>
 c06:	90 95       	com	r25
 c08:	80 95       	com	r24
 c0a:	70 95       	com	r23
 c0c:	61 95       	neg	r22
 c0e:	7f 4f       	sbci	r23, 0xFF	; 255
 c10:	8f 4f       	sbci	r24, 0xFF	; 255
 c12:	9f 4f       	sbci	r25, 0xFF	; 255
 c14:	99 23       	and	r25, r25
 c16:	a9 f0       	breq	.+42     	; 0xc42 <__floatsisf+0x40>
 c18:	f9 2f       	mov	r31, r25
 c1a:	96 e9       	ldi	r25, 0x96	; 150
 c1c:	bb 27       	eor	r27, r27
 c1e:	93 95       	inc	r25
 c20:	f6 95       	lsr	r31
 c22:	87 95       	ror	r24
 c24:	77 95       	ror	r23
 c26:	67 95       	ror	r22
 c28:	b7 95       	ror	r27
 c2a:	f1 11       	cpse	r31, r1
 c2c:	f8 cf       	rjmp	.-16     	; 0xc1e <__floatsisf+0x1c>
 c2e:	fa f4       	brpl	.+62     	; 0xc6e <__floatsisf+0x6c>
 c30:	bb 0f       	add	r27, r27
 c32:	11 f4       	brne	.+4      	; 0xc38 <__floatsisf+0x36>
 c34:	60 ff       	sbrs	r22, 0
 c36:	1b c0       	rjmp	.+54     	; 0xc6e <__floatsisf+0x6c>
 c38:	6f 5f       	subi	r22, 0xFF	; 255
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	16 c0       	rjmp	.+44     	; 0xc6e <__floatsisf+0x6c>
 c42:	88 23       	and	r24, r24
 c44:	11 f0       	breq	.+4      	; 0xc4a <__floatsisf+0x48>
 c46:	96 e9       	ldi	r25, 0x96	; 150
 c48:	11 c0       	rjmp	.+34     	; 0xc6c <__floatsisf+0x6a>
 c4a:	77 23       	and	r23, r23
 c4c:	21 f0       	breq	.+8      	; 0xc56 <__floatsisf+0x54>
 c4e:	9e e8       	ldi	r25, 0x8E	; 142
 c50:	87 2f       	mov	r24, r23
 c52:	76 2f       	mov	r23, r22
 c54:	05 c0       	rjmp	.+10     	; 0xc60 <__floatsisf+0x5e>
 c56:	66 23       	and	r22, r22
 c58:	71 f0       	breq	.+28     	; 0xc76 <__floatsisf+0x74>
 c5a:	96 e8       	ldi	r25, 0x86	; 134
 c5c:	86 2f       	mov	r24, r22
 c5e:	70 e0       	ldi	r23, 0x00	; 0
 c60:	60 e0       	ldi	r22, 0x00	; 0
 c62:	2a f0       	brmi	.+10     	; 0xc6e <__floatsisf+0x6c>
 c64:	9a 95       	dec	r25
 c66:	66 0f       	add	r22, r22
 c68:	77 1f       	adc	r23, r23
 c6a:	88 1f       	adc	r24, r24
 c6c:	da f7       	brpl	.-10     	; 0xc64 <__floatsisf+0x62>
 c6e:	88 0f       	add	r24, r24
 c70:	96 95       	lsr	r25
 c72:	87 95       	ror	r24
 c74:	97 f9       	bld	r25, 7
 c76:	08 95       	ret

00000c78 <__fp_cmp>:
 c78:	99 0f       	add	r25, r25
 c7a:	00 08       	sbc	r0, r0
 c7c:	55 0f       	add	r21, r21
 c7e:	aa 0b       	sbc	r26, r26
 c80:	e0 e8       	ldi	r30, 0x80	; 128
 c82:	fe ef       	ldi	r31, 0xFE	; 254
 c84:	16 16       	cp	r1, r22
 c86:	17 06       	cpc	r1, r23
 c88:	e8 07       	cpc	r30, r24
 c8a:	f9 07       	cpc	r31, r25
 c8c:	c0 f0       	brcs	.+48     	; 0xcbe <__fp_cmp+0x46>
 c8e:	12 16       	cp	r1, r18
 c90:	13 06       	cpc	r1, r19
 c92:	e4 07       	cpc	r30, r20
 c94:	f5 07       	cpc	r31, r21
 c96:	98 f0       	brcs	.+38     	; 0xcbe <__fp_cmp+0x46>
 c98:	62 1b       	sub	r22, r18
 c9a:	73 0b       	sbc	r23, r19
 c9c:	84 0b       	sbc	r24, r20
 c9e:	95 0b       	sbc	r25, r21
 ca0:	39 f4       	brne	.+14     	; 0xcb0 <__fp_cmp+0x38>
 ca2:	0a 26       	eor	r0, r26
 ca4:	61 f0       	breq	.+24     	; 0xcbe <__fp_cmp+0x46>
 ca6:	23 2b       	or	r18, r19
 ca8:	24 2b       	or	r18, r20
 caa:	25 2b       	or	r18, r21
 cac:	21 f4       	brne	.+8      	; 0xcb6 <__fp_cmp+0x3e>
 cae:	08 95       	ret
 cb0:	0a 26       	eor	r0, r26
 cb2:	09 f4       	brne	.+2      	; 0xcb6 <__fp_cmp+0x3e>
 cb4:	a1 40       	sbci	r26, 0x01	; 1
 cb6:	a6 95       	lsr	r26
 cb8:	8f ef       	ldi	r24, 0xFF	; 255
 cba:	81 1d       	adc	r24, r1
 cbc:	81 1d       	adc	r24, r1
 cbe:	08 95       	ret

00000cc0 <__fp_inf>:
 cc0:	97 f9       	bld	r25, 7
 cc2:	9f 67       	ori	r25, 0x7F	; 127
 cc4:	80 e8       	ldi	r24, 0x80	; 128
 cc6:	70 e0       	ldi	r23, 0x00	; 0
 cc8:	60 e0       	ldi	r22, 0x00	; 0
 cca:	08 95       	ret

00000ccc <__fp_nan>:
 ccc:	9f ef       	ldi	r25, 0xFF	; 255
 cce:	80 ec       	ldi	r24, 0xC0	; 192
 cd0:	08 95       	ret

00000cd2 <__fp_pscA>:
 cd2:	00 24       	eor	r0, r0
 cd4:	0a 94       	dec	r0
 cd6:	16 16       	cp	r1, r22
 cd8:	17 06       	cpc	r1, r23
 cda:	18 06       	cpc	r1, r24
 cdc:	09 06       	cpc	r0, r25
 cde:	08 95       	ret

00000ce0 <__fp_pscB>:
 ce0:	00 24       	eor	r0, r0
 ce2:	0a 94       	dec	r0
 ce4:	12 16       	cp	r1, r18
 ce6:	13 06       	cpc	r1, r19
 ce8:	14 06       	cpc	r1, r20
 cea:	05 06       	cpc	r0, r21
 cec:	08 95       	ret

00000cee <__fp_round>:
 cee:	09 2e       	mov	r0, r25
 cf0:	03 94       	inc	r0
 cf2:	00 0c       	add	r0, r0
 cf4:	11 f4       	brne	.+4      	; 0xcfa <__fp_round+0xc>
 cf6:	88 23       	and	r24, r24
 cf8:	52 f0       	brmi	.+20     	; 0xd0e <__fp_round+0x20>
 cfa:	bb 0f       	add	r27, r27
 cfc:	40 f4       	brcc	.+16     	; 0xd0e <__fp_round+0x20>
 cfe:	bf 2b       	or	r27, r31
 d00:	11 f4       	brne	.+4      	; 0xd06 <__fp_round+0x18>
 d02:	60 ff       	sbrs	r22, 0
 d04:	04 c0       	rjmp	.+8      	; 0xd0e <__fp_round+0x20>
 d06:	6f 5f       	subi	r22, 0xFF	; 255
 d08:	7f 4f       	sbci	r23, 0xFF	; 255
 d0a:	8f 4f       	sbci	r24, 0xFF	; 255
 d0c:	9f 4f       	sbci	r25, 0xFF	; 255
 d0e:	08 95       	ret

00000d10 <__fp_split3>:
 d10:	57 fd       	sbrc	r21, 7
 d12:	90 58       	subi	r25, 0x80	; 128
 d14:	44 0f       	add	r20, r20
 d16:	55 1f       	adc	r21, r21
 d18:	59 f0       	breq	.+22     	; 0xd30 <__fp_splitA+0x10>
 d1a:	5f 3f       	cpi	r21, 0xFF	; 255
 d1c:	71 f0       	breq	.+28     	; 0xd3a <__fp_splitA+0x1a>
 d1e:	47 95       	ror	r20

00000d20 <__fp_splitA>:
 d20:	88 0f       	add	r24, r24
 d22:	97 fb       	bst	r25, 7
 d24:	99 1f       	adc	r25, r25
 d26:	61 f0       	breq	.+24     	; 0xd40 <__fp_splitA+0x20>
 d28:	9f 3f       	cpi	r25, 0xFF	; 255
 d2a:	79 f0       	breq	.+30     	; 0xd4a <__fp_splitA+0x2a>
 d2c:	87 95       	ror	r24
 d2e:	08 95       	ret
 d30:	12 16       	cp	r1, r18
 d32:	13 06       	cpc	r1, r19
 d34:	14 06       	cpc	r1, r20
 d36:	55 1f       	adc	r21, r21
 d38:	f2 cf       	rjmp	.-28     	; 0xd1e <__fp_split3+0xe>
 d3a:	46 95       	lsr	r20
 d3c:	f1 df       	rcall	.-30     	; 0xd20 <__fp_splitA>
 d3e:	08 c0       	rjmp	.+16     	; 0xd50 <__fp_splitA+0x30>
 d40:	16 16       	cp	r1, r22
 d42:	17 06       	cpc	r1, r23
 d44:	18 06       	cpc	r1, r24
 d46:	99 1f       	adc	r25, r25
 d48:	f1 cf       	rjmp	.-30     	; 0xd2c <__fp_splitA+0xc>
 d4a:	86 95       	lsr	r24
 d4c:	71 05       	cpc	r23, r1
 d4e:	61 05       	cpc	r22, r1
 d50:	08 94       	sec
 d52:	08 95       	ret

00000d54 <__fp_zero>:
 d54:	e8 94       	clt

00000d56 <__fp_szero>:
 d56:	bb 27       	eor	r27, r27
 d58:	66 27       	eor	r22, r22
 d5a:	77 27       	eor	r23, r23
 d5c:	cb 01       	movw	r24, r22
 d5e:	97 f9       	bld	r25, 7
 d60:	08 95       	ret

00000d62 <__mulsf3>:
 d62:	0e 94 c4 06 	call	0xd88	; 0xd88 <__mulsf3x>
 d66:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_round>
 d6a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__fp_pscA>
 d6e:	38 f0       	brcs	.+14     	; 0xd7e <__mulsf3+0x1c>
 d70:	0e 94 70 06 	call	0xce0	; 0xce0 <__fp_pscB>
 d74:	20 f0       	brcs	.+8      	; 0xd7e <__mulsf3+0x1c>
 d76:	95 23       	and	r25, r21
 d78:	11 f0       	breq	.+4      	; 0xd7e <__mulsf3+0x1c>
 d7a:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_inf>
 d7e:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_nan>
 d82:	11 24       	eor	r1, r1
 d84:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_szero>

00000d88 <__mulsf3x>:
 d88:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_split3>
 d8c:	70 f3       	brcs	.-36     	; 0xd6a <__mulsf3+0x8>

00000d8e <__mulsf3_pse>:
 d8e:	95 9f       	mul	r25, r21
 d90:	c1 f3       	breq	.-16     	; 0xd82 <__mulsf3+0x20>
 d92:	95 0f       	add	r25, r21
 d94:	50 e0       	ldi	r21, 0x00	; 0
 d96:	55 1f       	adc	r21, r21
 d98:	62 9f       	mul	r22, r18
 d9a:	f0 01       	movw	r30, r0
 d9c:	72 9f       	mul	r23, r18
 d9e:	bb 27       	eor	r27, r27
 da0:	f0 0d       	add	r31, r0
 da2:	b1 1d       	adc	r27, r1
 da4:	63 9f       	mul	r22, r19
 da6:	aa 27       	eor	r26, r26
 da8:	f0 0d       	add	r31, r0
 daa:	b1 1d       	adc	r27, r1
 dac:	aa 1f       	adc	r26, r26
 dae:	64 9f       	mul	r22, r20
 db0:	66 27       	eor	r22, r22
 db2:	b0 0d       	add	r27, r0
 db4:	a1 1d       	adc	r26, r1
 db6:	66 1f       	adc	r22, r22
 db8:	82 9f       	mul	r24, r18
 dba:	22 27       	eor	r18, r18
 dbc:	b0 0d       	add	r27, r0
 dbe:	a1 1d       	adc	r26, r1
 dc0:	62 1f       	adc	r22, r18
 dc2:	73 9f       	mul	r23, r19
 dc4:	b0 0d       	add	r27, r0
 dc6:	a1 1d       	adc	r26, r1
 dc8:	62 1f       	adc	r22, r18
 dca:	83 9f       	mul	r24, r19
 dcc:	a0 0d       	add	r26, r0
 dce:	61 1d       	adc	r22, r1
 dd0:	22 1f       	adc	r18, r18
 dd2:	74 9f       	mul	r23, r20
 dd4:	33 27       	eor	r19, r19
 dd6:	a0 0d       	add	r26, r0
 dd8:	61 1d       	adc	r22, r1
 dda:	23 1f       	adc	r18, r19
 ddc:	84 9f       	mul	r24, r20
 dde:	60 0d       	add	r22, r0
 de0:	21 1d       	adc	r18, r1
 de2:	82 2f       	mov	r24, r18
 de4:	76 2f       	mov	r23, r22
 de6:	6a 2f       	mov	r22, r26
 de8:	11 24       	eor	r1, r1
 dea:	9f 57       	subi	r25, 0x7F	; 127
 dec:	50 40       	sbci	r21, 0x00	; 0
 dee:	9a f0       	brmi	.+38     	; 0xe16 <__mulsf3_pse+0x88>
 df0:	f1 f0       	breq	.+60     	; 0xe2e <__mulsf3_pse+0xa0>
 df2:	88 23       	and	r24, r24
 df4:	4a f0       	brmi	.+18     	; 0xe08 <__mulsf3_pse+0x7a>
 df6:	ee 0f       	add	r30, r30
 df8:	ff 1f       	adc	r31, r31
 dfa:	bb 1f       	adc	r27, r27
 dfc:	66 1f       	adc	r22, r22
 dfe:	77 1f       	adc	r23, r23
 e00:	88 1f       	adc	r24, r24
 e02:	91 50       	subi	r25, 0x01	; 1
 e04:	50 40       	sbci	r21, 0x00	; 0
 e06:	a9 f7       	brne	.-22     	; 0xdf2 <__mulsf3_pse+0x64>
 e08:	9e 3f       	cpi	r25, 0xFE	; 254
 e0a:	51 05       	cpc	r21, r1
 e0c:	80 f0       	brcs	.+32     	; 0xe2e <__mulsf3_pse+0xa0>
 e0e:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__fp_inf>
 e12:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_szero>
 e16:	5f 3f       	cpi	r21, 0xFF	; 255
 e18:	e4 f3       	brlt	.-8      	; 0xe12 <__mulsf3_pse+0x84>
 e1a:	98 3e       	cpi	r25, 0xE8	; 232
 e1c:	d4 f3       	brlt	.-12     	; 0xe12 <__mulsf3_pse+0x84>
 e1e:	86 95       	lsr	r24
 e20:	77 95       	ror	r23
 e22:	67 95       	ror	r22
 e24:	b7 95       	ror	r27
 e26:	f7 95       	ror	r31
 e28:	e7 95       	ror	r30
 e2a:	9f 5f       	subi	r25, 0xFF	; 255
 e2c:	c1 f7       	brne	.-16     	; 0xe1e <__mulsf3_pse+0x90>
 e2e:	fe 2b       	or	r31, r30
 e30:	88 0f       	add	r24, r24
 e32:	91 1d       	adc	r25, r1
 e34:	96 95       	lsr	r25
 e36:	87 95       	ror	r24
 e38:	97 f9       	bld	r25, 7
 e3a:	08 95       	ret

00000e3c <__mulsi3>:
 e3c:	db 01       	movw	r26, r22
 e3e:	8f 93       	push	r24
 e40:	9f 93       	push	r25
 e42:	0e 94 6f 07 	call	0xede	; 0xede <__muluhisi3>
 e46:	bf 91       	pop	r27
 e48:	af 91       	pop	r26
 e4a:	a2 9f       	mul	r26, r18
 e4c:	80 0d       	add	r24, r0
 e4e:	91 1d       	adc	r25, r1
 e50:	a3 9f       	mul	r26, r19
 e52:	90 0d       	add	r25, r0
 e54:	b2 9f       	mul	r27, r18
 e56:	90 0d       	add	r25, r0
 e58:	11 24       	eor	r1, r1
 e5a:	08 95       	ret

00000e5c <__udivmodsi4>:
 e5c:	a1 e2       	ldi	r26, 0x21	; 33
 e5e:	1a 2e       	mov	r1, r26
 e60:	aa 1b       	sub	r26, r26
 e62:	bb 1b       	sub	r27, r27
 e64:	fd 01       	movw	r30, r26
 e66:	0d c0       	rjmp	.+26     	; 0xe82 <__udivmodsi4_ep>

00000e68 <__udivmodsi4_loop>:
 e68:	aa 1f       	adc	r26, r26
 e6a:	bb 1f       	adc	r27, r27
 e6c:	ee 1f       	adc	r30, r30
 e6e:	ff 1f       	adc	r31, r31
 e70:	a2 17       	cp	r26, r18
 e72:	b3 07       	cpc	r27, r19
 e74:	e4 07       	cpc	r30, r20
 e76:	f5 07       	cpc	r31, r21
 e78:	20 f0       	brcs	.+8      	; 0xe82 <__udivmodsi4_ep>
 e7a:	a2 1b       	sub	r26, r18
 e7c:	b3 0b       	sbc	r27, r19
 e7e:	e4 0b       	sbc	r30, r20
 e80:	f5 0b       	sbc	r31, r21

00000e82 <__udivmodsi4_ep>:
 e82:	66 1f       	adc	r22, r22
 e84:	77 1f       	adc	r23, r23
 e86:	88 1f       	adc	r24, r24
 e88:	99 1f       	adc	r25, r25
 e8a:	1a 94       	dec	r1
 e8c:	69 f7       	brne	.-38     	; 0xe68 <__udivmodsi4_loop>
 e8e:	60 95       	com	r22
 e90:	70 95       	com	r23
 e92:	80 95       	com	r24
 e94:	90 95       	com	r25
 e96:	9b 01       	movw	r18, r22
 e98:	ac 01       	movw	r20, r24
 e9a:	bd 01       	movw	r22, r26
 e9c:	cf 01       	movw	r24, r30
 e9e:	08 95       	ret

00000ea0 <__divmodsi4>:
 ea0:	05 2e       	mov	r0, r21
 ea2:	97 fb       	bst	r25, 7
 ea4:	1e f4       	brtc	.+6      	; 0xeac <__divmodsi4+0xc>
 ea6:	00 94       	com	r0
 ea8:	0e 94 67 07 	call	0xece	; 0xece <__negsi2>
 eac:	57 fd       	sbrc	r21, 7
 eae:	07 d0       	rcall	.+14     	; 0xebe <__divmodsi4_neg2>
 eb0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodsi4>
 eb4:	07 fc       	sbrc	r0, 7
 eb6:	03 d0       	rcall	.+6      	; 0xebe <__divmodsi4_neg2>
 eb8:	4e f4       	brtc	.+18     	; 0xecc <__divmodsi4_exit>
 eba:	0c 94 67 07 	jmp	0xece	; 0xece <__negsi2>

00000ebe <__divmodsi4_neg2>:
 ebe:	50 95       	com	r21
 ec0:	40 95       	com	r20
 ec2:	30 95       	com	r19
 ec4:	21 95       	neg	r18
 ec6:	3f 4f       	sbci	r19, 0xFF	; 255
 ec8:	4f 4f       	sbci	r20, 0xFF	; 255
 eca:	5f 4f       	sbci	r21, 0xFF	; 255

00000ecc <__divmodsi4_exit>:
 ecc:	08 95       	ret

00000ece <__negsi2>:
 ece:	90 95       	com	r25
 ed0:	80 95       	com	r24
 ed2:	70 95       	com	r23
 ed4:	61 95       	neg	r22
 ed6:	7f 4f       	sbci	r23, 0xFF	; 255
 ed8:	8f 4f       	sbci	r24, 0xFF	; 255
 eda:	9f 4f       	sbci	r25, 0xFF	; 255
 edc:	08 95       	ret

00000ede <__muluhisi3>:
 ede:	0e 94 7a 07 	call	0xef4	; 0xef4 <__umulhisi3>
 ee2:	a5 9f       	mul	r26, r21
 ee4:	90 0d       	add	r25, r0
 ee6:	b4 9f       	mul	r27, r20
 ee8:	90 0d       	add	r25, r0
 eea:	a4 9f       	mul	r26, r20
 eec:	80 0d       	add	r24, r0
 eee:	91 1d       	adc	r25, r1
 ef0:	11 24       	eor	r1, r1
 ef2:	08 95       	ret

00000ef4 <__umulhisi3>:
 ef4:	a2 9f       	mul	r26, r18
 ef6:	b0 01       	movw	r22, r0
 ef8:	b3 9f       	mul	r27, r19
 efa:	c0 01       	movw	r24, r0
 efc:	a3 9f       	mul	r26, r19
 efe:	70 0d       	add	r23, r0
 f00:	81 1d       	adc	r24, r1
 f02:	11 24       	eor	r1, r1
 f04:	91 1d       	adc	r25, r1
 f06:	b2 9f       	mul	r27, r18
 f08:	70 0d       	add	r23, r0
 f0a:	81 1d       	adc	r24, r1
 f0c:	11 24       	eor	r1, r1
 f0e:	91 1d       	adc	r25, r1
 f10:	08 95       	ret

00000f12 <_exit>:
 f12:	f8 94       	cli

00000f14 <__stop_program>:
 f14:	ff cf       	rjmp	.-2      	; 0xf14 <__stop_program>
